<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sensu Documentation Home on Sensu Docs</title>
    <link>/</link>
    <description>Recent content in Sensu Documentation Home on Sensu Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Jul 2017 16:35:46 -0700</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sensu Go release notes</title>
      <link>/sensu-go/6.6/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/release-notes/</guid>
      <description>6.6.6 release notes 6.6.5 release notes 6.6.4 release notes 6.6.3 release notes 6.6.2 release notes 6.6.1 release notes 6.6.0 release notes 6.5.5 release notes 6.5.4 release notes 6.5.3 release notes 6.5.2 release notes 6.5.1 release notes 6.5.0 release notes 6.4.3 release notes 6.4.2 release notes 6.4.1 release notes 6.4.0 release notes 6.3.0 release notes 6.2.7 release notes 6.2.6 release notes 6.2.5 release notes 6.2.4 release notes 6.2.3 release notes 6.</description>
    </item>
    
    <item>
      <title>Sensu Go release notes</title>
      <link>/sensu-go/6.7/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/release-notes/</guid>
      <description>6.7.5 release notes 6.7.4 release notes 6.7.3 release notes 6.7.2 release notes 6.7.1 release notes 6.7.0 release notes 6.6.6 release notes 6.6.5 release notes 6.6.4 release notes 6.6.3 release notes 6.6.2 release notes 6.6.1 release notes 6.6.0 release notes 6.5.5 release notes 6.5.4 release notes 6.5.3 release notes 6.5.2 release notes 6.5.1 release notes 6.5.0 release notes 6.4.3 release notes 6.4.2 release notes 6.4.1 release notes 6.4.0 release notes 6.</description>
    </item>
    
    <item>
      <title>Sensu Go release notes</title>
      <link>/sensu-go/6.8/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/release-notes/</guid>
      <description>6.8.2 release notes 6.8.1 release notes 6.8.0 release notes 6.7.5 release notes 6.7.4 release notes 6.7.3 release notes 6.7.2 release notes 6.7.1 release notes 6.7.0 release notes 6.6.6 release notes 6.6.5 release notes 6.6.4 release notes 6.6.3 release notes 6.6.2 release notes 6.6.1 release notes 6.6.0 release notes 6.5.5 release notes 6.5.4 release notes 6.5.3 release notes 6.5.2 release notes 6.5.1 release notes 6.5.0 release notes 6.4.3 release notes 6.</description>
    </item>
    
    <item>
      <title>Sensu Go release notes</title>
      <link>/sensu-go/latest/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/release-notes/</guid>
      <description>6.9.0 release notes 6.8.2 release notes 6.8.1 release notes 6.8.0 release notes 6.7.5 release notes 6.7.4 release notes 6.7.3 release notes 6.7.2 release notes 6.7.1 release notes 6.7.0 release notes 6.6.6 release notes 6.6.5 release notes 6.6.4 release notes 6.6.3 release notes 6.6.2 release notes 6.6.1 release notes 6.6.0 release notes 6.5.5 release notes 6.5.4 release notes 6.5.3 release notes 6.5.2 release notes 6.5.1 release notes 6.5.0 release notes 6.</description>
    </item>
    
    <item>
      <title>Get started with Sensu</title>
      <link>/sensu-go/6.6/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/get-started/</guid>
      <description>Sensu Go is the flexible observability pipeline designed for container-based and multi-cloud infrastructures.
Sensu is available as packages, Docker images, and binary-only distributions. You can install the commercial distribution or build Sensu from source.
Install the commercial distribution of Sensu Go Sensu&amp;rsquo;s supported platforms include Debian- and RHEL-family distributions and Windows.
Install Sensu Go with a commercial package and get started for free Learn about Sensu&amp;rsquo;s commercial features — all commercial features are available for free in the packaged Sensu Go distribution up to an entity limit of 100 Find the Sensu architecture that best meets your needs Discover Sensu dynamic runtime assets for deploying plugins on Bonsai, the Sensu asset hub Migrate from Sensu Core and Sensu Enterprise to Sensu Go Learn Sensu Watch this video for an 8-minute Sensu Go overview and demo:</description>
    </item>
    
    <item>
      <title>Get started with Sensu</title>
      <link>/sensu-go/6.7/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/get-started/</guid>
      <description>Sensu Go is the flexible observability pipeline designed for container-based and multi-cloud infrastructures.
Sensu is available as packages, Docker images, and binary-only distributions. You can install the commercial distribution or build Sensu from source.
Install the commercial distribution of Sensu Go Sensu&amp;rsquo;s supported platforms include Debian- and RHEL-family distributions and Windows.
Install Sensu Go with a commercial package and get started for free Learn about Sensu&amp;rsquo;s commercial features — all commercial features are available for free in the packaged Sensu Go distribution up to an entity limit of 100 Find the Sensu architecture that best meets your needs Discover, configure, and install monitoring and observability integrations in the Sensu Catalog and explore hundreds of dynamic runtime assets for deploying plugins in Bonsai, the Sensu asset hub Migrate from Sensu Core and Sensu Enterprise to Sensu Go Learn Sensu Watch this video for an 8-minute Sensu Go overview and demo:</description>
    </item>
    
    <item>
      <title>Get started with Sensu</title>
      <link>/sensu-go/6.8/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/get-started/</guid>
      <description>Sensu Go is the flexible observability pipeline designed for container-based and multi-cloud infrastructures.
Sensu is available as packages, Docker images, and binary-only distributions. You can install the commercial distribution or build Sensu from source.
Install the commercial distribution of Sensu Go Sensu&amp;rsquo;s supported platforms include Debian- and RHEL-family distributions and Windows.
Install Sensu Go with a commercial package and get started for free Learn about Sensu&amp;rsquo;s commercial features — all commercial features are available for free in the packaged Sensu Go distribution up to an entity limit of 100 Find the Sensu architecture that best meets your needs Discover, configure, and install monitoring and observability integrations in the Sensu Catalog and explore hundreds of dynamic runtime assets for deploying plugins in Bonsai, the Sensu asset hub Migrate from Sensu Core and Sensu Enterprise to Sensu Go Learn Sensu Watch this video for a 10-minute introduction to Sensu Go:</description>
    </item>
    
    <item>
      <title>Get started with Sensu</title>
      <link>/sensu-go/latest/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/get-started/</guid>
      <description>Sensu Go is the flexible observability pipeline designed for container-based and multi-cloud infrastructures.
Sensu is available as packages, Docker images, and binary-only distributions. You can install the commercial distribution or build Sensu from source.
Install the commercial distribution of Sensu Go Sensu&amp;rsquo;s supported platforms include Debian- and RHEL-family distributions and Windows.
Install Sensu Go with a commercial package and get started for free Learn about Sensu&amp;rsquo;s commercial features — all commercial features are available for free in the packaged Sensu Go distribution up to an entity limit of 100 Find the Sensu architecture that best meets your needs Discover, configure, and install monitoring and observability integrations in the Sensu Catalog and explore hundreds of dynamic runtime assets for deploying plugins in Bonsai, the Sensu asset hub Migrate from Sensu Core and Sensu Enterprise to Sensu Go Learn Sensu Watch this video for a 10-minute introduction to Sensu Go:</description>
    </item>
    
    <item>
      <title>Supported platforms and distributions</title>
      <link>/sensu-go/6.6/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/platforms/</guid>
      <description>Sensu is available as packages, Docker images, and binary-only distributions. We recommend installing Sensu with one of our supported packages, Docker images, or configuration management integrations. Sensu downloads are provided under the Sensu commercial license.
Supported packages This page lists supported packages for the most common platforms. Supported packages are available from sensu/stable on packagecloud and the Sensu downloads page.
NOTE: The sensu/stable repository on packagecloud includes packages for every platform Sensu supports, in addition to packages for the common platforms listed on this page.</description>
    </item>
    
    <item>
      <title>Supported platforms and distributions</title>
      <link>/sensu-go/6.7/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/platforms/</guid>
      <description>Sensu is available as packages, Docker images, and binary-only distributions. We recommend installing Sensu with one of our supported packages, Docker images, or configuration management integrations. Sensu downloads are provided under the Sensu commercial license.
Supported packages This page lists supported packages for the most common platforms. Supported packages are available from sensu/stable on packagecloud and the Sensu downloads page.
NOTE: The sensu/stable repository on packagecloud includes packages for every platform Sensu supports, in addition to packages for the common platforms listed on this page.</description>
    </item>
    
    <item>
      <title>Supported platforms and distributions</title>
      <link>/sensu-go/6.8/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/platforms/</guid>
      <description>Sensu is available as packages, Docker images, and binary-only distributions. We recommend installing Sensu with one of our supported packages, Docker images, or configuration management integrations. Sensu downloads are provided under the Sensu commercial license.
Supported packages This page lists supported packages for the most common platforms. Supported packages are available from sensu/stable on packagecloud and the Sensu downloads page.
NOTE: The sensu/stable repository on packagecloud includes packages for every platform Sensu supports, in addition to packages for the common platforms listed on this page.</description>
    </item>
    
    <item>
      <title>Supported platforms and distributions</title>
      <link>/sensu-go/latest/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/platforms/</guid>
      <description>Sensu is available as packages, Docker images, and binary-only distributions. We recommend installing Sensu with one of our supported packages, Docker images, or configuration management integrations. Sensu downloads are provided under the Sensu commercial license.
Supported packages This page lists supported packages for the most common platforms. Supported packages are available from sensu/stable on packagecloud and the Sensu downloads page.
NOTE: The sensu/stable repository on packagecloud includes packages for every platform Sensu supports, in addition to packages for the common platforms listed on this page.</description>
    </item>
    
    <item>
      <title>Get started with commercial features</title>
      <link>/sensu-go/6.6/commercial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/commercial/</guid>
      <description>Sensu Go offers commercial features designed for monitoring and observability at scale. All commercial features are available in the official Sensu Go distribution, and you can use them for free up to an entity limit of 100. If you have more than 100 entities, contact the Sensu sales team for a free trial.
In addition to the summary on this page, we describe commercial features in detail throughout the documentation. Watch for this notice to identify commercial features:</description>
    </item>
    
    <item>
      <title>Get started with commercial features</title>
      <link>/sensu-go/6.7/commercial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/commercial/</guid>
      <description>Sensu Go offers commercial features designed for monitoring and observability at scale. All commercial features are available in the official Sensu Go distribution, and you can use them for free up to an entity limit of 100. If you have more than 100 entities, contact the Sensu sales team for a free trial.
In addition to the summary on this page, we describe commercial features in detail throughout the documentation. Watch for this notice to identify commercial features:</description>
    </item>
    
    <item>
      <title>Get started with commercial features</title>
      <link>/sensu-go/6.8/commercial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/commercial/</guid>
      <description>Sensu Go offers commercial features designed for monitoring and observability at scale. All commercial features are available in the official Sensu Go distribution, and you can use them for free up to an entity limit of 100. If you have more than 100 entities, contact the Sensu sales team for a free trial.
In addition to the summary on this page, we describe commercial features in detail throughout the documentation. Watch for this notice to identify commercial features:</description>
    </item>
    
    <item>
      <title>Get started with commercial features</title>
      <link>/sensu-go/latest/commercial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/commercial/</guid>
      <description>Sensu Go offers commercial features designed for monitoring and observability at scale. All commercial features are available in the official Sensu Go distribution, and you can use them for free up to an entity limit of 100. If you have more than 100 entities, contact the Sensu sales team for a free trial.
In addition to the summary on this page, we describe commercial features in detail throughout the documentation. Watch for this notice to identify commercial features:</description>
    </item>
    
    <item>
      <title>Supported versions</title>
      <link>/sensu-go/6.6/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/versions/</guid>
      <description>Update Sensu frequently to stay in sync with the latest features and fixes. Read Upgrade Sensu to upgrade to the latest version.
Sensu supports the latest versions of official distributions, including packages, Docker images, and binary-only distributions. Learn more about Sensu licensing and support.
This table lists the supported versions of Sensu Go with links to active documentation (for supported versions) and offline documentation artifacts (for versions that are not supported).</description>
    </item>
    
    <item>
      <title>Supported versions</title>
      <link>/sensu-go/6.7/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/versions/</guid>
      <description>Update Sensu frequently to stay in sync with the latest features and fixes. Read Upgrade Sensu to upgrade to the latest version.
Sensu supports the latest versions of official distributions, including packages, Docker images, and binary-only distributions. Learn more about Sensu licensing and support.
This table lists the supported versions of Sensu Go with links to active documentation (for supported versions) and offline documentation artifacts (for versions that are not supported).</description>
    </item>
    
    <item>
      <title>Supported versions</title>
      <link>/sensu-go/6.8/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/versions/</guid>
      <description>Update Sensu frequently to stay in sync with the latest features and fixes. Read Upgrade Sensu to upgrade to the latest version.
Sensu supports the latest versions of official distributions, including packages, Docker images, and binary-only distributions. Learn more about Sensu licensing and support.
This table lists the supported versions of Sensu Go with links to active documentation (for supported versions) and offline documentation artifacts (for versions that are not supported).</description>
    </item>
    
    <item>
      <title>Supported versions</title>
      <link>/sensu-go/latest/versions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/versions/</guid>
      <description>Update Sensu frequently to stay in sync with the latest features and fixes. Read Upgrade Sensu to upgrade to the latest version.
Sensu supports the latest versions of official distributions, including packages, Docker images, and binary-only distributions. Learn more about Sensu licensing and support.
This table lists the supported versions of Sensu Go with links to active documentation (for supported versions) and offline documentation artifacts (for versions that are not supported).</description>
    </item>
    
    <item>
      <title>Sensu Plus</title>
      <link>/sensu-go/6.6/sensu-plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensu-plus/</guid>
      <description>COMMERCIAL FEATURE: Access Sensu Plus in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Plus is a built-in integration for transmitting your Sensu observability data to the Sumo Logic Continuous Intelligence Platform™ via a Sumo Logic HTTP Logs and Metrics Source. In Sumo Logic, you can configure customized interactive dashboards and analytics tools to gain better visibility into your Sensu data — read Introducing Sensu Plus for more information.</description>
    </item>
    
    <item>
      <title>Sensu Plus</title>
      <link>/sensu-go/6.7/sensu-plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensu-plus/</guid>
      <description>COMMERCIAL FEATURE: Access Sensu Plus in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Plus is a built-in integration for transmitting your Sensu observability data to the Sumo Logic Continuous Intelligence Platform™ via a Sumo Logic HTTP Logs and Metrics Source (an endpoint for receiving data). In Sumo Logic, you can configure customized interactive dashboards and analytics tools to gain better visibility into your Sensu data — read Introducing Sensu Plus for more information.</description>
    </item>
    
    <item>
      <title>Sensu Plus</title>
      <link>/sensu-go/6.8/sensu-plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensu-plus/</guid>
      <description>COMMERCIAL FEATURE: Access Sensu Plus in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Plus is a built-in integration for transmitting your Sensu observability data to the Sumo Logic Continuous Intelligence Platform™ via a Sumo Logic HTTP Logs and Metrics Source (an endpoint for receiving data). In Sumo Logic, you can configure customized interactive dashboards and analytics tools to gain better visibility into your Sensu data — read Introducing Sensu Plus for more information.</description>
    </item>
    
    <item>
      <title>Sensu Plus</title>
      <link>/sensu-go/latest/sensu-plus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensu-plus/</guid>
      <description>COMMERCIAL FEATURE: Access Sensu Plus in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Plus is a built-in integration for transmitting your Sensu observability data to the Sumo Logic Continuous Intelligence Platform™ via a Sumo Logic HTTP Logs and Metrics Source (an endpoint for receiving data). In Sumo Logic, you can configure customized interactive dashboards and analytics tools to gain better visibility into your Sensu data — read Introducing Sensu Plus for more information.</description>
    </item>
    
    <item>
      <title>CHANGELOG</title>
      <link>/sensu-enterprise/latest/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/changelog/</guid>
      <description>NOTE: Sensu Enterprise is built on Sensu Core. Sensu Core changes are documented in the Sensu Core changelog.
Releases Enterprise 3.8.0 Release Notes Enterprise 3.7.0 Release Notes Enterprise 3.6.2 Release Notes Enterprise 3.6.1 Release Notes Enterprise 3.6.0 Release Notes Enterprise 3.5.0 Release Notes Enterprise 3.4.0 Release Notes Enterprise 3.3.3 Release Notes Enterprise 3.3.2 Release Notes Enterprise 3.3.1 Release Notes Enterprise 3.3.0 Release Notes Enterprise 3.2.2 Release Notes Enterprise 3.2.1 Release Notes Enterprise 3.</description>
    </item>
    
    <item>
      <title>check_dependencies</title>
      <link>/sensu-enterprise/latest/filters/check-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/filters/check-dependencies/</guid>
      <description>ENTERPRISE: Built-in filters are available for Sensu Enterprise users only.
Reference documentation Overview Configuration Example(s) Filter specification CHECK attributes Overview The check_dependencies enterprise filter is used to filter events when an event already exists for a defined check dependency, enabling the user to reduce notification noise and only be notified for the &amp;ldquo;root cause&amp;rdquo; of a given failure. Check dependencies can be defined in the check definition, using dependencies, an array of checks (e.</description>
    </item>
    
    <item>
      <title>Using the EC2 Integration with Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/guides/using-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/guides/using-ec2/</guid>
      <description>In this guide, we&amp;rsquo;ll cover configuring and using the Sensu Enterprise Amazon Web Services (AWS) EC2 integration.
Prerequisites EC2 Integration Basics Integration Configuration Client Configuration IAM Roles and Sensu Cross-Account IAM Roles Wrapping Up References Prerequisites Before diving into this guide, we recommend having the following components ready:
A working Sensu Enterprise deployment An AWS account An AWS access key and secret key If you&amp;rsquo;ve not already signed up for Sensu Enterprise, you can do so via this link.</description>
    </item>
    
    <item>
      <title>Email</title>
      <link>/sensu-enterprise/latest/integrations/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/email/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Custom email templates Example(s) Configuration Example(s) Integration specification email attributes smtp attributes EXAMPLE ATTRIBUTES templates attributes Overview Send email notifications for events, using SMTP.
Custom email templates As of Sensu Enterprise version 2.3, the Sensu Enterprise email integration provides support for creating custom email templates using ERB (a templating language based on Ruby). Sensu Enterprise makes an @event variable available to the ERB template containing the complete event data payload.</description>
    </item>
    
    <item>
      <title>Using the Email Integration with G Suite</title>
      <link>/sensu-enterprise/latest/guides/email-gsuite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/guides/email-gsuite/</guid>
      <description>In this guide, we&amp;rsquo;ll walk through how to configure the Sensu Enterprise email integration to use G Suite as the SMTP gateway for sending email alerts.
Before we configure Sensu to use the gateway, we&amp;rsquo;ll have to first set up a user and app password in G Suite to use in our email integration configuration.
Set Up User and App Password The first step to using G Suite as our SMTP relay for Sensu is to set up a user and an app password.</description>
    </item>
    
    <item>
      <title>FreeBSD</title>
      <link>/sensu-core/latest/platforms/sensu-on-freebsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-freebsd/</guid>
      <description>Sensu on FreeBSD reference documentation Installing Sensu Core Download and install Sensu using the Sensu .txz file Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the packages specified in the instructions below are no longer available. To migrate to Sensu Go, read the Sensu Core migration guide.</description>
    </item>
    
    <item>
      <title>Getting started with Sensu</title>
      <link>/sensu-core/latest/quick-start/learn-sensu-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/quick-start/learn-sensu-basics/</guid>
      <description>Download the sandbox The Sensu sandbox is a virtual environment that makes it easy to get started building monitoring workflows.
Download the sandbox and learn Sensu Core Download the sandbox and learn Sensu Enterprise Install Sensu Core Sensu Core is the free and open source monitoring event pipeline.
Install Sensu with configuration management Install Sensu Core Discover Sensu Community Plugins Try Sensu Enterprise Sensu Enterprise offers features designed for enterprises, like contact routing, role-based access control, and support.</description>
    </item>
    
    <item>
      <title>Getting Started with Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/quick-start/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/quick-start/get-started/</guid>
      <description>Download the sandbox The Sensu sandbox is a virtual environment that makes it easy to get started building monitoring workflows.
Download the sandbox and learn Sensu Enterprise Try Sensu Enterprise Sensu Enterprise offers features designed for organizations, like contact routing, role-based access control, and support.
Sign up for a free trial of Sensu Enterprise, no credit card required Get started with the Sensu Enterprise sandbox Install Sensu Enterprise </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/sensu-core/latest/guides/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/overview/</guid>
      <description>The complete getting started guide The purpose of this guide is to help new Sensu users to obtain a basic understanding of the primitives or components used to build a comprehensive monitoring solution. In the course of working through this guide, users should be able to start monitoring servers, services, and application health, collect and analyze metrics, and setup alerts.
Objectives This guide will provide an introduction to the following building blocks:</description>
    </item>
    
    <item>
      <title>handle_when</title>
      <link>/sensu-enterprise/latest/filters/handle-when/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/filters/handle-when/</guid>
      <description>ENTERPRISE: Built-in filters are available for Sensu Enterprise users only.
Reference documentation Overview Configuration Example(s) Filter specification handle_when attributes Overview The handle_when enterprise filter is used to reduce notification &amp;ldquo;noise&amp;rdquo;. Users can define a minimum number of event occurrences before notifications will be sent. Users can also specify a reset time, in seconds, to reset where recurrences are counted from, to control when reminder/update notifications are sent. By default, occurrences is set to 1, and reset is 1800 (30 minutes).</description>
    </item>
    
    <item>
      <title>Installation Overview</title>
      <link>/sensu-core/latest/installation/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/overview/</guid>
      <description>The complete installation guide The purpose of this guide is to help provide new and experienced Sensu users alike with a detailed guide for installing and configuring Sensu into a variety of operating environments. By default, this guide will direct you to install and configure Sensu Core or Sensu Enterprise in a standalone configuration.
If you are a new Sensu user – or if you have only ever used automation tools like Chef, Puppet, or Ansible to install and configure Sensu – working through this installation guide for the exercise alone is strongly recommended.</description>
    </item>
    
    <item>
      <title>Installation Overview</title>
      <link>/sensu-enterprise/latest/installation/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/installation/overview/</guid>
      <description>Installing Sensu Enterprise Upgrading from Sensu Core to Sensu Enterprise Getting Started with Sensu Enterprise Installing Sensu Enterprise Sensu Enterprise is supported on RHEL/CentOS and Ubuntu/Debian Linux distributions. Please see the relevant section below for information on installing Sensu Enterprise and its prerequisites.
Prior to working through either the installation or upgrade instructions linked below, you&amp;rsquo;ll need to create a Sensu Enterprise account and obtain your Sensu Enterprise repository credentials via the Sensu Account Manager portal.</description>
    </item>
    
    <item>
      <title>Sensu Enterprise Console API Overview</title>
      <link>/sensu-enterprise-dashboard/latest/api/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/overview/</guid>
      <description>The Sensu Enterprise Console API provides access to monitoring data across datacenters, including clients, checks, and events. Use the Console API to request adhoc check executions, silence check results, resolve events, and more.
RESTful JSON API The Console API is a JSON-based RESTful API that uses standard HTTP response codes.
Reference documentation Aggregates API Checks API Clients API Configuration API Datacenters API Events API Health API Results API Silenced API Stashes API Subscriptions API RBAC for the Sensu Enterprise Console API Sensu Enterprise integrates role-based access controls with the Console API to help give your users the right level of API functionality.</description>
    </item>
    
    <item>
      <title>RESTful API Overview</title>
      <link>/sensu-core/latest/api/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/overview/</guid>
      <description>Sensu API The Sensu API provides access to monitoring data collected by Sensu, such as a client registry, check results, and event data. The API can be used to request adhoc check executions, and resolve events, among other things.
RESTful JSON API The Sensu API is JSON-based RESTful API. Familiarity with (or willingness to Google) industry standard RESTful API behaviors – including HTTP response codes – are strongly recommended.
Reference documentation Clients API Checks API Results API Aggregates API Events API Stashes API Health &amp;amp; Info API Settings API API configuration Response Content Filtering Sensu API endpoints that support the GET HTTP method support HTTP response content filtering on one or more Sensu attributes.</description>
    </item>
    
    <item>
      <title>Role Based Access Controls</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/overview/</guid>
      <description>ENTERPRISE: Role based access controls are available for Sensu Enterprise users only.
Reference Documentation What are Role Based Access Controls for Sensu Enterprise? How does Sensu provide RBAC? Supported RBAC drivers RBAC for the Sensu Enterprise Console API RBAC configuration Example RBAC definition RBAC definition specification DRIVER attributes roles attributes methods attributes What are Role Based Access Controls for Sensu Enterprise? Role-based access controls (RBAC) are a system for restricting access to authorized users according to a role, or job function.</description>
    </item>
    
    <item>
      <title>Sensu Server</title>
      <link>/sensu-core/latest/reference/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/server/</guid>
      <description>Reference documentation What is the Sensu server? Sensu Core vs Sensu Enterprise Check execution scheduling Check scheduling algorithm &amp;amp; synchronization Event processing Automated Sensu server task election Sensu server tasks Scaling Sensu What is the Sensu server? The Sensu server schedules and publishes check execution requests to client subscriptions (via a Publish/Subscribe model), and provides a scalable event processing platform for processing check results and monitoring events.
Sensu Core vs Sensu Enterprise The Sensu server comes in two flavors: the open-source Sensu Core (via the sensu-server process), and Sensu Enterprise (via the sensu-enterprise process).</description>
    </item>
    
    <item>
      <title>Using the ServiceNow Integration with Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/guides/using-snow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/guides/using-snow/</guid>
      <description>In this guide, we&amp;rsquo;ll cover configuring and using the Sensu Enterprise ServiceNow (SNOW) integration.
Prerequisites Before diving into this guide, we recommend having the following components ready:
A working Sensu Enterprise deployment Working SNOW Instance (you can sign up for a test instance at developer.servicenow.com) SNOW credentials ServiceNow Integration Basics Sensu Enterprise comes with a built-in integration for handling automatic registration and deregistration Sensu clients in SNOW. The integration also allows for creating incidents and events from Sensu incidents and events.</description>
    </item>
    
    <item>
      <title>silence_stashes</title>
      <link>/sensu-enterprise/latest/filters/silence-stashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/filters/silence-stashes/</guid>
      <description>ENTERPRISE: Built-in filters are available for Sensu Enterprise users only.
Reference documentation Overview Configuration Example(s) Filter specification Overview The silence_stashes Enterprise filter is used to filter events when specific Sensu API stashes exist. The Sensu Enterprise Dashboard and many community tools make use of &amp;ldquo;silence stashes&amp;rdquo; to indicate Sensu clients and/or their checks that are &amp;ldquo;silenced&amp;rdquo; or under maintenance. Events will be filtered if a silence stash exists for the client and/or its check specified in the event data.</description>
    </item>
    
    <item>
      <title>What is Sensu?</title>
      <link>/sensu-core/latest/overview/what-is-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/overview/what-is-sensu/</guid>
      <description>A Simple, Yet Powerful Monitoring Event Pipeline Sensu is a comprehensive monitoring solution that is powerful enough to solve complex monitoring problems at scale, yet simple enough to use for traditional monitoring scenarios and small environments. It achieves this broad appeal via building upon two simple, yet powerful monitoring primitives: Service Checks and Event Processing. These building blocks also provide infinitely extensible pipelines for composing monitoring solutions.
What is a Service Check?</description>
    </item>
    
    <item>
      <title>Adding a Client</title>
      <link>/sensu-core/latest/guides/adding-a-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/adding-a-client/</guid>
      <description>Sensu clients are pieces of infrastructure that Sensu monitors for you. The Sensu client software allows you to register a running instance of itself as capable of running any checks they might be eligible for.
Infrastructure sometimes includes hardware or services that don&amp;rsquo;t necessarily support running the Sensu client software but still needs to be monitored. For those cases, proxy clients let you monitor anything you can tell Sensu about.</description>
    </item>
    
    <item>
      <title>CHANGELOG</title>
      <link>/sensu-core/latest/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/changelog/</guid>
      <description>Releases Core 1.9.0 Release Notes Core 1.8.0 Release Notes Core 1.7.1 Release Notes Core 1.7.0 Release Notes Core 1.6.2 Release Notes Core 1.6.1 Release Notes Core 1.6.0 Release Notes Core 1.5.0 Release Notes Core 1.4.3 Release Notes Core 1.4.2 Release Notes Core 1.4.1 Release Notes Core 1.4.0 Release Notes Core 1.3.0 Release Notes Core 1.2.1 Release Notes Core 1.2.0 Release Notes Core 1.1.3 Release Notes Core 1.1.2 Release Notes Core 1.</description>
    </item>
    
    <item>
      <title>Clients</title>
      <link>/sensu-core/latest/reference/clients/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/clients/</guid>
      <description>Reference documentation What is a Sensu client? Client keepalives What is a client keepalive? Client registration &amp;amp; the client registry Registration and deregistration events Proxy clients How are keepalive events created? Client keepalive configuration Client signature Client subscriptions What is a client subscription? Round-robin client subscriptions Client subscription configuration Client socket input What is the Sensu client socket Example client socket usage Client socket configuration Standalone check execution scheduler Managing clients Client configuration Example client definition Client definition specification client attributes socket attributes http-socket attributes keepalive attributes thresholds attributes registration attributes deregistration attributes ec2 attributes chef attributes puppet attributes servicenow attributes influxdb attributes opsgenie attributes Custom attributes What is a Sensu client?</description>
    </item>
    
    <item>
      <title>Clients API</title>
      <link>/sensu-core/latest/api/clients/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/clients/</guid>
      <description>Reference documentation The /clients API endpoint /clients (GET) /clients (POST) The /clients/:client API endpoint(s) /clients/:client (GET) /clients/:client (DELETE) The /clients/:client/history API endpoint(s) The /clients API Endpoint The /clients API endpoint provides HTTP GET and POST access to the Sensu client registry.
/clients (GET) The /clients endpoint provides HTTP GET access to client registry data as published via client keepalives, generated for a proxy client, or created via HTTP POST to the /clients API.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/sensu-enterprise-dashboard/latest/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/configuration/</guid>
      <description>Dashboard configuration Example configuration Configuring multiple users Encrypting passwords Dashboard definition specification sensu attributes dashboard attributes auth attributes audit attributes github attributes gitlab attributes ldap attributes oidc attributes Dashboard configuration Example dashboard configuration The following is the bare minimum that should be included in your Sensu Enterprise Dashboard configuration.
{ &amp;#34;sensu&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;sensu-server-1&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;api1.example.com&amp;#34;, &amp;#34;port&amp;#34;: 4567 } ], &amp;#34;dashboard&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;port&amp;#34;: 3000 } } NOTE: the Sensu Enterprise Dashboard requires two configuration scopes: sensu and dashboard (see Dashboard definition specification, below).</description>
    </item>
    
    <item>
      <title>Heads-Up Display</title>
      <link>/sensu-enterprise-dashboard/latest/hud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/hud/</guid>
      <description>As of version 1.3, a new Heads Up Display (HUD) has been added to the Sensu Enterprise Dashboard, which provides an at-a-glance view into the overall health of your infrastructure via a set of built-in graphs and status widgets.
HUD RBAC Support The HUD is scoped according to any existing Sensu Enterprise Dashboard RBAC controls. For example, if a user is a member of a role with limited access to Sensu data, they will only see history graphs and status widgets corresponding to the Sensu Subscriptions and/or Datacenters they have access to.</description>
    </item>
    
    <item>
      <title>How Sensu Works</title>
      <link>/sensu-core/latest/overview/how-sensu-works/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/overview/how-sensu-works/</guid>
      <description>The Sensu Monitoring Flow Publishing subscription check requests A Check Request is scheduled/published by the Sensu Server or a Sensu Client The Sensu Client executes a Service Check Service Checks emit status information and telemetry data as Check Results Check Results are considered to be associated with either the Sensu Client executing the check or the Proxy Client of the check Those Check Results are published by the Sensu Client to the Sensu Transport, sometimes on behalf of another client The Sensu Server processes Check Results, persisting a copy of the latest result in the Data Store and creating a corresponding to Event The Sensu Server processes the Event by executing one or more Event Handlers The Sensu Server applies any Event Filters defined for an Event Handler The Sensu Server applies any Event Data Mutators defined for an Event Handler (assuming the event was not filtered out) The Sensu Server executes the Event Handler (assuming the event was not filtered out) </description>
    </item>
    
    <item>
      <title>IBM AIX</title>
      <link>/sensu-core/latest/platforms/sensu-on-ibm-aix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-ibm-aix/</guid>
      <description>Sensu on IBM AIX Installing Sensu Core Download and install Sensu using the Sensu .bff file Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Operating Sensu Managing the Sensu client process Rotating Sensu Logs Known limitations Foreign Function Interface Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the packages specified in the instructions below are no longer available.</description>
    </item>
    
    <item>
      <title>Installation Strategies</title>
      <link>/sensu-core/latest/installation/installation-strategies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/installation-strategies/</guid>
      <description>Sensu&amp;rsquo;s architecture is one of its most compelling features. It is flexible enough to be installed on a single system for development/testing/lab purposes (or small production environments), and sophisticated enough to support highly available configurations capable of monitoring infrastructure at scale.
Please review the following definitions of standalone, distributed, and high-availability installation strategies to help you select which one will be the most appropriate for your installation. If you&amp;rsquo;re just getting started with Sensu and/or if you&amp;rsquo;re not sure which strategy to choose, follow the instructions for a standalone installation.</description>
    </item>
    
    <item>
      <title>JIRA</title>
      <link>/sensu-enterprise/latest/integrations/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/jira/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example Integration Specification jira attributes Overview Create and resolve Jira issues for Sensu events.
Configuration Example The following is an example global configuration for the jira enterprise event handler (integration).
{ &amp;#34;jira&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;jira.example.com&amp;#34;, &amp;#34;user&amp;#34;: &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;secret&amp;#34;, &amp;#34;project&amp;#34;: &amp;#34;Sensu&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification jira attributes The following attributes are configured within the {&amp;quot;jira&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>PagerDuty</title>
      <link>/sensu-enterprise/latest/integrations/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/pagerduty/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration specification pagerduty attributes Overview Create and resolve PagerDuty incidents for events. After configuring a service in PagerDuty for Events API v2, configure the handler (integration) with the provided integration key.
Configuration Example(s) The following is an example global configuration for the pagerduty enterprise event handler (integration).
{ &amp;#34;pagerduty&amp;#34;: { &amp;#34;routing_key&amp;#34;: &amp;#34;r3FPuDvNOTEDyQYCc7trBkymIFcy2NkE&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification pagerduty attributes The following attributes are configured within the {&amp;quot;pagerduty&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>RBAC for LDAP</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/rbac-for-ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/rbac-for-ldap/</guid>
      <description>ENTERPRISE: Role based access controls are available for Sensu Enterprise users only.
Reference Documentation What is RBAC for LDAP? LDAP provider compatibility RBAC for LDAP configuration Example RBAC for LDAP definition RBAC for LDAP definition specification ldap attributes servers attributes roles attributes What is RBAC for LDAP? The Sensu Enterprise Dashboard offers support for built-in Role Based Access Controls (RBAC), which depends on using some external source of truth for authentication.</description>
    </item>
    
    <item>
      <title>Rollbar</title>
      <link>/sensu-enterprise/latest/integrations/rollbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/rollbar/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration specification rollbar attributes Overview Create and resolve Rollbar messages/items for Sensu events.
Configuration Example(s) The following is an example global configuration for the rollbar enterprise event handler (integration).
{ &amp;#34;rollbar&amp;#34;: { &amp;#34;access_token_read&amp;#34;: &amp;#34;2ae6bccccf534b9c8749a4327671e711&amp;#34;, &amp;#34;access_token_write&amp;#34;: &amp;#34;944872fdbfba40c48305fc8cd73707b5&amp;#34;, &amp;#34;access_token_patch&amp;#34;: &amp;#34;f34948101a714661a83dcd8dbe6a167a&amp;#34;, &amp;#34;timeout&amp;#34;: 30 } } Integration Specification rollbar attributes The following attributes are configured within the {&amp;quot;rollbar&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>The Five Minute Install</title>
      <link>/sensu-core/latest/quick-start/five-minute-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/quick-start/five-minute-install/</guid>
      <description>IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the repositories and https://eol-repositories.sensuapp.org URLs specified in the instructions and code examples on this page are no longer available. To migrate to Sensu Go, read the Sensu Core migration guide.
This installation guide is intended to help you install Sensu Core in a development environment for testing purposes.</description>
    </item>
    
    <item>
      <title>The Five Minute Install</title>
      <link>/sensu-enterprise/latest/quick-start/five-minute-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/quick-start/five-minute-install/</guid>
      <description>IMPORTANT: Sensu Enterprise reached end-of-life (EOL) March 31, 2020, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the repositories specified in the instructions and code examples below are no longer available. To migrate to Sensu Go, read Migrate from Sensu Core and Sensu Enterprise to Sensu Go.
This installation guide is intended to help you install Sensu Enterprise in a development environment for testing purposes.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>/sensu-core/latest/overview/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/overview/architecture/</guid>
      <description>Architectural Overview One of advantages that Sensu provides over other monitoring solutions is its architecture, which facilitates the execution of service checks, collection of metric data, and event processing at scale. This architecture is comprised of the following components:
Secure Transport Data Store Check Execution Scheduler Monitoring Agent Event Processor RESTful API Architectural Diagram Secure Transport Sensu services use a message bus (e.g. RabbitMQ) to communicate with one another (technically speaking, the Sensu services don’t actually communicate with each other – they only communicate with the message bus).</description>
    </item>
    
    <item>
      <title>Checks</title>
      <link>/sensu-core/latest/reference/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/checks/</guid>
      <description>Reference documentation What is a Sensu check? Sensu check specification Check commands What is a check command? Check command arguments How and where are check commands executed? Check execution platform How are checks scheduled? Subscription checks Standalone checks Check results What is a check result? Example check result output Check token substitution What is check token substitution? Example check tokens Check token specification Check hooks What are check hooks? Example check hooks Managing checks Check configuration Example check definition Check definition specification Check naming CHECK attributes subdue attributes influxdb attributes opsgenie attributes hooks attributes Custom attributes Check result specification check attributes client attributes What is a Sensu check?</description>
    </item>
    
    <item>
      <title>Checks API</title>
      <link>/sensu-core/latest/api/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/checks/</guid>
      <description>Reference documentation The /checks API endpoint /checks (GET) The /checks/:check API endpoint(s) /checks/:check (GET) /checks/:check (DELETE) The /request API endpoint /request (POST) The /checks API endpoint /checks (GET) The /checks API endpoint provides HTTP GET access to subscription check data.
NOTE: GET /checks responses do not include checks that are configured as standalone checks.
EXAMPLE The following example demonstrates a request to the /checks API, resulting in a JSON Array of JSON Hashes containing subscription check definitions.</description>
    </item>
    
    <item>
      <title>Client Installation</title>
      <link>/sensu-core/latest/quick-start/client-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/quick-start/client-installation/</guid>
      <description>IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the packages and https://eol-repositories.sensuapp.org URLs specified in the instructions and code examples on this page are no longer available. To migrate to Sensu Go, read the Sensu Core migration guide.
Install the Sensu Client Having successfully installed and configured a Sensu server and API (Sensu Core or Sensu Enterprise), let&amp;rsquo;s now install and/or configure a Sensu client.</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/sensu-core/latest/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/faq/</guid>
      <description>Sensu Frequently Asked Questions Please note the following frequently asked questions about Sensu Core, Sensu Enterprise, Sensu Training, Professional Services for Sensu, and more. If you need support for Sensu, please consider giving Sensu Enterprise a try.
What platforms does Sensu support?
Platform &amp;amp; Version 64bit 32bit Arch Comments Ubuntu 12.04 x86 Ubuntu 14.04 x86 Ubuntu 16.04 x86 No official 32bit images Ubuntu 18.04 x86 No official 32bit images Debian 8 x86 No official 32bit images Debian 9 x86 No official 32bit images CentOS 5 x86 32 and 64bit images built with sensu-omnibus-packer CentOS 6 x86 Using unofficial 32bit image CentOS 7 x86 No official 32bit images FreeBSD 10 x86 Official 32bit images are out of date FreeBSD 11 x86 No official 32bit images Solaris 10 sparc Solaris 11 sparc IBM AIX 6.</description>
    </item>
    
    <item>
      <title>Intro to Checks</title>
      <link>/sensu-core/latest/guides/intro-to-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/intro-to-checks/</guid>
      <description>The purpose of this guide is to help Sensu users create monitoring checks. At the conclusion of this guide, you - the user - should have several Sensu checks in place to monitor and measure machine resources, applications, and services. Each Sensu monitoring check in this guide demonstrates one or more check definition features, for more information please refer to the Sensu checks reference documentation.
Objectives What will be covered in this guide:</description>
    </item>
    
    <item>
      <title>Mac OS X</title>
      <link>/sensu-core/latest/platforms/sensu-on-mac-os-x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-mac-os-x/</guid>
      <description>Sensu on Mac OS X Installing Sensu Core Download and install Sensu using the Sensu Universal .pkg file Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Configure the Sensu client launchd daemon Operating Sensu Managing the Sensu client process with launchctl Interacting with Sensu via CLI Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>/sensu-core/latest/installation/installation-prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/installation-prerequisites/</guid>
      <description>As mentioned earlier in this guide, Sensu&amp;rsquo;s architecture is one of its most compelling features. While this modular design makes it infinitely adaptable to monitor any infrastructure, it also depends on some external services to function:
Data Store (Redis) Transport NOTE: this guide will focus on installing Sensu&amp;rsquo;s dependencies in a standalone configuration. However, in a live/production environment, it is strongly recommended that – at minimum – the Sensu data store and transport run on a different system than the Sensu server and API (i.</description>
    </item>
    
    <item>
      <title>RBAC for GitHub</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/rbac-for-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/rbac-for-github/</guid>
      <description>ENTERPRISE: Role based access controls are available for Sensu Enterprise users only.
Reference Documentation What is RBAC for GitHub? RBAC for GitHub configuration Example RBAC for GitHub definition RBAC for GitHub definition specification github attributes roles attributes Register an OAuth Application in GitHub What is RBAC for GitHub? The Sensu Enterprise Dashboard offers support for built-in Role Based Access Controls (RBAC), which depends on using some external source of truth for authentication.</description>
    </item>
    
    <item>
      <title>RBAC for OpenID Connect (OIDC)</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/rbac-for-oidc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/rbac-for-oidc/</guid>
      <description>ENTERPRISE: Role based access controls are available for Sensu Enterprise users only.
Reference Documentation What is RBAC for OIDC? RBAC for OIDC configuration Example RBAC for OIDC definition RBAC for OIDC definition specification oidc attributes roles attributes Register an OIDC Application Okta PingFederate What is RBAC for OIDC? The Sensu Enterprise Dashboard offers support for built-in Role Based Access Controls (RBAC), which depends on using some external source of truth for authentication.</description>
    </item>
    
    <item>
      <title>Sensu Server and API</title>
      <link>/sensu-core/latest/installation/install-sensu-server-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-sensu-server-api/</guid>
      <description>The Sensu Server and API are available in two flavors:
Sensu Core Sensu Enterprise NOTE: only one flavor of the Sensu server &amp;amp; API should be used at any given time. Sensu Enterprise users should skip Sensu Core server &amp;amp; API installation and jump directly to installing Sensu Enterprise.
Sensu Core (OSS) IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>ServiceNow</title>
      <link>/sensu-enterprise/latest/integrations/servicenow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/servicenow/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification servicenow attributes Overview Create ServiceNow configuration items upon Sensu client registration, create/resolve ServiceNow incidents, and/or create ServiceNow events for Sensu events.
Configuration Example(s) The following is an example global configuration for the servicenow enterprise event handler (integration).
{ &amp;#34;servicenow&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;dev42.service-now.com&amp;#34;, &amp;#34;user&amp;#34;: &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;secret&amp;#34;, &amp;#34;create_cmdb_ci&amp;#34;: true, &amp;#34;cmdb_ci_enabled&amp;#34;: true, &amp;#34;cmdb_ci_table&amp;#34;: &amp;#34;cmdb_ci_server&amp;#34;, &amp;#34;incident_management&amp;#34;: true, &amp;#34;incident_table&amp;#34;: &amp;#34;incident&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } When creating ServiceNow configuration items, by default, Sensu will use the client&amp;rsquo;s name for the item name.</description>
    </item>
    
    <item>
      <title>Upgrading Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/upgrading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/upgrading/</guid>
      <description>In most cases, you can upgrade Sensu Enterprise by installing the latest package. Certain versions of Sensu Enterprise may include changes that are not backwards compatible and require additional steps be taken when upgrading.
Upgrading the Sensu Enterprise package Upgrading from Sensu Enterprise &amp;lt; 3.0 Changes in OpsGenie integration Changes in Java package dependency Upgrading the Sensu Enterprise package The following instructions assume that you have already installed Sensu Enterprise using the steps detailed in the Sensu Installation Guide.</description>
    </item>
    
    <item>
      <title>Aggregates</title>
      <link>/sensu-core/latest/reference/aggregates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/aggregates/</guid>
      <description>Reference documentation What is a Sensu named aggregate? When should named aggregates be used? How do named aggregates work? Example aggregated check result Aggregate configuration Example aggregate definition Aggregate definition specification Aggregate check attributes What is a Sensu named aggregate? Sensu named aggregates are collections of check results, accessible via the Aggregates API. Check aggregates make it possible to treat the results of multiple disparate check results – executed across multiple disparate systems – as a single result.</description>
    </item>
    
    <item>
      <title>Enterprise Configuration</title>
      <link>/sensu-enterprise/latest/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/configuration/</guid>
      <description>Sensu Enterprise service scripts make use of certain environment variable values to configure the Java runtime environment. These settings take effect prior to Sensu Enterprise loading configuration files from disk as described in Sensu Configuration reference documentation.
Values for the environment variables described in this document should be set by editing /etc/default/sensu-enterprise. After changing values in this file, the sensu-enterprise service must be restarted before the new values can take effect.</description>
    </item>
    
    <item>
      <title>Intro to Filters</title>
      <link>/sensu-core/latest/guides/intro-to-filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/intro-to-filters/</guid>
      <description>The purpose of this guide is to help Sensu users create event filters. At the conclusion of this guide, you - the user - should have several Sensu event filters in place to filter events for one or more event handlers. Each Sensu filter in this guide demonstrates one or more filter definition features, for more information please refer to the Sensu filters reference documentation.
Objectives What will be covered in this guide:</description>
    </item>
    
    <item>
      <title>Microsoft Windows</title>
      <link>/sensu-core/latest/platforms/sensu-on-microsoft-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-microsoft-windows/</guid>
      <description>Sensu on Microsoft Windows reference documentation Installing Sensu Core Download and install Sensu using the Sensu MSI Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Configure the Sensu client Windows service wrapper Install the Sensu client Windows service Operating Sensu Managing the Sensu client Windows service Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>RBAC for GitLab</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/rbac-for-gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/rbac-for-gitlab/</guid>
      <description>ENTERPRISE: Role based access controls are available for Sensu Enterprise users only.
Reference Documentation What is RBAC for GitLab? RBAC for GitLab configuration Example RBAC for GitLab definition RBAC for GitLab definition specification gitlab attributes roles attributes Register an OAuth Application in GitLab What is RBAC for GitLab? The Sensu Enterprise Dashboard offers support for built-in Role Based Access Controls (RBAC), which depends on using some external source of truth for authentication.</description>
    </item>
    
    <item>
      <title>Results API</title>
      <link>/sensu-core/latest/api/results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/results/</guid>
      <description>Reference documentation The /results API endpoint /results (GET) /results (POST) The /results/:client API endpoint /results/:client (GET) The /results/:client/:check API endpoints /results/:client/:check (GET) /results/:client/:check (DELETE) The /results API endpoint The /results API endpoint provides HTTP GET and HTTP POST access to current check result data.
/results (GET) The /results API endpoint provides HTTP GET access to fetch current check result data.
EXAMPLES The following example demonstrates a /results API query which returns a JSON Array of JSON Hashes containing check results.</description>
    </item>
    
    <item>
      <title>Sensu Client</title>
      <link>/sensu-core/latest/installation/install-sensu-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-sensu-client/</guid>
      <description>Having successfully installed and configured a Sensu server and API (Sensu Core or Sensu Enterprise), let&amp;rsquo;s now install and/or configure a Sensu client. The Sensu client is run on every system you need to monitor, including those running the Sensu server and API, and Sensu&amp;rsquo;s dependencies (i.e. RabbitMQ and/or Redis). Both Sensu Core and Sensu Enterprise use the same Sensu client process (i.e. sensu-client), so upgrading from Sensu Core to Sensu Enterprise does not require you to install a difference Sensu client.</description>
    </item>
    
    <item>
      <title>Sensu Dashboards</title>
      <link>/sensu-core/latest/installation/install-a-dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-a-dashboard/</guid>
      <description>Sensu was originally designed as an API-based monitoring solution, enabling operations teams to compose monitoring solutions where Sensu provides the monitoring instrumentation, collection of telemetry data, scalable event processing, comprehensive APIs – and plugins for sending data to dedicated dashboard solutions. However, as the Sensu Core project and community have matured, the need for an optional Sensu dashboard has become more obvious. As a result, there are now two (2) dashboard solutions for Sensu: Uchiwa (for Sensu Core users), and the Sensu Enterprise Dashboard (for Sensu Enterprise customers).</description>
    </item>
    
    <item>
      <title>Supported Platforms</title>
      <link>/sensu-core/latest/overview/platforms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/overview/platforms/</guid>
      <description>Sensu Core All versions of Sensu (including Sensu Enterprise) are based on the same core components and functionality, which are provided by the Sensu open-source software project and collectively referred to as Sensu Core. Sensu Core provides multiple processes, including the Sensu server (sensu-server), Sensu API (sensu-api), and Sensu client (sensu-client).
IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>VictorOps</title>
      <link>/sensu-enterprise/latest/integrations/victorops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/victorops/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification victorops attributes Overview Create VictorOps messages for events.
Configuration Example(s) The following is an example global configuration for the victorops enterprise event handler (integration).
{ &amp;#34;victorops&amp;#34;: { &amp;#34;api_key&amp;#34;: &amp;#34;a53265cd-d2ef-fa32-fc54de52659a&amp;#34;, &amp;#34;routing_key&amp;#34;: &amp;#34;everyone&amp;#34;, &amp;#34;timeout&amp;#34;: 10, &amp;#34;filters&amp;#34;: [ &amp;#34;handle_when&amp;#34;, &amp;#34;check_dependencies&amp;#34; ], &amp;#34;severities&amp;#34;: [ &amp;#34;critical&amp;#34;, &amp;#34;unknown&amp;#34; ], &amp;#34;http_proxy&amp;#34;: &amp;#34;http://192.168.250.11:3128&amp;#34; } } Minimum required attributes { &amp;#34;victorops&amp;#34;: { &amp;#34;api_key&amp;#34;: &amp;#34;a53265cd-d2ef-fa32-fc54de52659a&amp;#34; } } Integration Specification victorops attributes The following attributes are configured within the {&amp;quot;victorops&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>Aggregates API</title>
      <link>/sensu-core/latest/api/aggregates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/aggregates/</guid>
      <description>Reference documentation The /aggregates API endpoint /aggregates (GET) The /aggregates/:name API endpoints /aggregates/:name (GET) /aggregates/:name (DELETE) The /aggregates/:name/clients API endpoint /aggregates/:name/clients (GET) The /aggregates/:name/checks API endpoint /aggregates/:name/checks (GET) The /aggregates/:name/results/:severity API endpoint /aggregates/:name/results/:severity (GET) The /aggregates API endpoint The /aggregates API endpoint provides HTTP GET access to named aggregate data.
/aggregates (GET) EXAMPLES The following example demonstrates a /aggregates API query which results in a JSON Array of JSON Hashes containing named check aggregates.</description>
    </item>
    
    <item>
      <title>Audit Logging</title>
      <link>/sensu-enterprise-dashboard/latest/rbac/audit-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/rbac/audit-logging/</guid>
      <description>As of Sensu Enterprise Dashboard version 1.3, Audit Logging is enabled by default. Audit Logging captures user events in the dashboard such as user login/logout, and any user &amp;ldquo;write&amp;rdquo; actions in the dashboard (i.e. silencing checks, deleting clients, deleting stashes). Optionally, it is also possible to log all HTTP GET requests (i.e. every view requested by the user, and every search query performed by the user).
NOTE: Audit Logging requires authentication to be enabled.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>/sensu-core/latest/reference/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/events/</guid>
      <description>Reference documentation What are Sensu events? How are Sensu events created? Event actions Event data Example event Event data specification EVENT attributes check attributes client attributes What are Sensu events? Sensu events are created to acknowledge that something potentially noteworthy has occurred, which events may then be processed by one or more event handlers to do things such as send an email, or invoke an automated action. Every Sensu event provides context, called &amp;ldquo;event data&amp;rdquo;, which contains information about the originating Sensu client and the corresponding check result.</description>
    </item>
    
    <item>
      <title>Install Redis on Ubuntu/Debian</title>
      <link>/sensu-core/latest/installation/install-redis-on-ubuntu-debian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-redis-on-ubuntu-debian/</guid>
      <description>Install Redis using APT Managing the Redis service/process Start/stop the Redis services Enable/disable Redis start on system boot Verify that Redis is working Set file descriptor limits Configure Sensu Example Standalone Configuration Example Distributed Configuration Using Redis as the Sensu Transport Install Redis using APT Install Redis (&amp;gt;= 1.3.14) from the distribution repository:
sudo apt-get update sudo apt-get -y install redis-server Managing the Redis service/process Start/stop the Redis services Start and stop the Redis service using the redis-server init scripts:</description>
    </item>
    
    <item>
      <title>Intro to Mutators</title>
      <link>/sensu-core/latest/guides/intro-to-mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/intro-to-mutators/</guid>
      <description>The purpose of this guide is to help Sensu users create event data mutators. At the conclusion of this guide, you - the user - should have several Sensu mutators in place to mutate (transform) event data for one or more event handlers. Each Sensu mutator in this guide demonstrates one or more mutator definition features, for more information please refer to the Sensu mutators reference documentation.
Objectives What will be covered in this guide:</description>
    </item>
    
    <item>
      <title>OpsGenie</title>
      <link>/sensu-enterprise/latest/integrations/opsgenie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/opsgenie/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification opsgenie attributes Overview Create and close OpsGenie alerts for events.
NOTE: As of Sensu Enterprise 3.0, the OpsGenie integration uses version 2 of the OpsGenie API. Visit the Sensu Enterprise 3.0 upgrade guide and the OpsGenie API docs for more information.
Configuration Example(s) The following is an example global configuration for the opsgenie enterprise event handler (integration).</description>
    </item>
    
    <item>
      <title>Solaris</title>
      <link>/sensu-core/latest/platforms/sensu-on-oracle-solaris/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-oracle-solaris/</guid>
      <description>Sensu on Solaris reference documentation Installing Sensu Core Download and install Sensu on Solaris 10 Download and install Sensu on Solaris 11 Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Operating Sensu Managing the Sensu client process Install Sensu IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.
This means the packages specified in the instructions below are no longer available.</description>
    </item>
    
    <item>
      <title>Contact Routing</title>
      <link>/sensu-enterprise/latest/contact-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/contact-routing/</guid>
      <description>Reference documentation What is contact routing? How does contact routing work? Contact Routing configuration Example Contact Routing definition Contact Routing definition specification CONTACT attributes Severities What is contact routing? Every incident or outage has an ideal first responder, a team or individual with the knowledge to triage and address the issue. Sensu Enterprise contact routing makes it possible to assign checks to specific teams and/or individuals, reducing mean time to response and recovery (MTTR).</description>
    </item>
    
    <item>
      <title>Events API</title>
      <link>/sensu-core/latest/api/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/events/</guid>
      <description>Reference documentation The /events API endpoint /events (GET) The /events/:client API endpoint /events/:client (GET) The /events/:client/:check API endpoints /events/:client/:check (GET) /events/:client/:check (DELETE) The /resolve API endpoint /resolve (POST) The /events API endpoint /events (GET) The /events API endpoint provide HTTP GET access to the Sensu event registry.
EXAMPLES The following example demonstrates a /events API query which returns a JSON Array of JSON Hashes containing event data.
$ curl -s http://localhost:4567/events | jq .</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/sensu-core/latest/reference/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/filters/</guid>
      <description>Reference documentation How do Sensu filters work? Inclusive and exclusive filtering Filter attribute comparison Filter attribute evaluation Filter attribute eval tokens Built-in Filters Filter configuration Filter definition specification Filter naming Filter attributes when attributes What are Sensu filters? Sensu Filters (also called Event Filters) allow you to filter events destined for one or more event Handlers. Sensu filters inspect event data and match its keys/values with filter definition attributes, to determine if the event should be passed to an event handler.</description>
    </item>
    
    <item>
      <title>Install Redis</title>
      <link>/sensu-core/latest/installation/install-redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-redis/</guid>
      <description>Redis is a key-value database, which describes itself as &amp;ldquo;an open source, BSD licensed, advanced key-value cache and store&amp;rdquo;. Sensu uses Redis for storing persistent data. Two Sensu services, the server and API, require access to the same instance of Redis to function. Although it is possible to install and run Redis on almost any modern operating system, all Sensu users are encouraged to install and run Redis on one of the following supported platforms:</description>
    </item>
    
    <item>
      <title>Install Redis on RHEL/CentOS</title>
      <link>/sensu-core/latest/installation/install-redis-on-rhel-centos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-redis-on-rhel-centos/</guid>
      <description>Install Redis from the EPEL repositories Managing the Redis service/process Start/stop the Redis services Enable/disable Redis start on system boot Verify that Redis is working Set file descriptor limits Configure Sensu Example Standalone Configuration Example Distributed Configuration Using Redis as the Sensu Transport Install Redis from the EPEL repositories Because Redis is not available by default in all RHEL and CentOS distribution repositories, you will need to install the corresponding EPEL repository for your CentOS/RHEL release (supported platforms are RHEL 5, RHEL 6, and RHEL 7).</description>
    </item>
    
    <item>
      <title>Intro to Handlers</title>
      <link>/sensu-core/latest/guides/intro-to-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/intro-to-handlers/</guid>
      <description>The purpose of this guide is to help Sensu users create event handlers. At the conclusion of this guide, you - the user - should have several Sensu handlers in place to handle events. Each Sensu event handler in this guide demonstrates one or more handler types and definition features, for more information please refer to the handlers reference documentation.
Objectives What will be covered in this guide:
Creation of a pipe handler Creation of a tcp handler Creation of a udp handler Creation of a transport handler Creation of a set handler What are Sensu event handlers?</description>
    </item>
    
    <item>
      <title>RHEL/CentOS</title>
      <link>/sensu-core/latest/platforms/sensu-on-rhel-centos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-rhel-centos/</guid>
      <description>Sensu on RHEL/CentOS reference documentation Installing Sensu Core Install Sensu using YUM Installing Sensu Enterprise Install the Sensu Enterprise repository Install the Sensu Enterprise Dashboard repository Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Example data store configuration Example API configurations Standalone configuration Distributed configuration Example Sensu Enterprise Dashboard configurations Standalone configuration Distributed configuration Enable the Sensu services to start on boot Disable the Sensu services on boot Operating Sensu Managing the Sensu services/processes Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>Silencing</title>
      <link>/sensu-core/latest/reference/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/silencing/</guid>
      <description>Reference documentation What is Sensu Silencing? How does silencing work? Silencing entry specification Examples Silence all checks on a specific client Silence a specific check on a specific client Silence all checks on clients with a specific subscription Silence a specific check on clients with a specific subscription Silence a specific check on every client regardless of subscriptions Deleting silencing entries Appendix: Deprecated stash-based silencing What is Sensu Silencing? As check results are processed by a Sensu server, the server executes event handlers to send alerts to personnel or otherwise relay event data to external services.</description>
    </item>
    
    <item>
      <title>Slack</title>
      <link>/sensu-enterprise/latest/integrations/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/slack/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification slack attributes Overview Send notifications to a Slack channel for events. After configuring an incoming webhook in Slack, configure the handler (integration) with the provided webhook url.
Configuration Example(s) The following is an example global configuration for the slack enterprise event handler (integration).
{ &amp;#34;slack&amp;#34;: { &amp;#34;webhook_url&amp;#34;: &amp;#34;https://hooks.slack.com/services/IB6JgRmRJ/eL7Hgo6kF/CckJm8E4Yt8X3i6QRKHWBekc&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;sensu&amp;#34;, &amp;#34;channel&amp;#34;: &amp;#34;#ops&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification slack attributes The following attributes are configured within the {&amp;quot;slack&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>Enterprise API</title>
      <link>/sensu-enterprise/latest/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/api/</guid>
      <description>Reference documentation What is the Sensu Enterprise API? Enterprise API Configuration Example(s) API specification api attributes ssl attributes Create an SSL keystore Configure the Enterprise API for SSL The /metrics API endpoints /metrics/check_requests (GET) /metrics/clients (GET) /metrics/events (GET) /metrics/keepalives (GET) /metrics/results (GET) What is the Sensu Enterprise API? Every instance of Sensu Enterprise provides the Sensu Enterprise API, built upon the Sensu Core API.
The Sensu Enterprise API has the functionality of the Core API with the addition of several endpoints to provide access to data for generating reports, visualizing internal metrics, and more.</description>
    </item>
    
    <item>
      <title>HipChat</title>
      <link>/sensu-enterprise/latest/integrations/hipchat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/hipchat/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification hipchat attributes Overview Send notifications to a HipChat room for events. After creating a HipChat API token, configure the handler (integration) with the provided API token.
Configuration Example(s) The following is an example global configuration for the hipchat enterprise event handler (integration).
{ &amp;#34;hipchat&amp;#34;: { &amp;#34;api_token&amp;#34;: &amp;#34;L7kVQzXF7c5eUMYUon6INaSVRDU8mP&amp;#34;, &amp;#34;api_version&amp;#34;: &amp;#34;v2&amp;#34;, &amp;#34;username&amp;#34;: &amp;#34;sensu&amp;#34;, &amp;#34;room&amp;#34;: &amp;#34;Operations&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification hipchat attributes The following attributes are configured within the {&amp;quot;hipchat&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>Install RabbitMQ</title>
      <link>/sensu-core/latest/installation/install-rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-rabbitmq/</guid>
      <description>RabbitMQ is a message bus that describes itself as &amp;ldquo;a messaging broker - an intermediary for messaging. It gives your applications a common platform to send and receive messages, and your messages a safe place to live until received&amp;rdquo;. RabbitMQ is also the default Sensu Transport. When using RabbitMQ as the Sensu Transport, all Sensu services require access to the same instance (or cluster) of RabbitMQ to function. All Sensu users are encouraged to install and run RabbitMQ on one of the following supported platforms:</description>
    </item>
    
    <item>
      <title>Mutators</title>
      <link>/sensu-core/latest/reference/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/mutators/</guid>
      <description>Reference documentation What is a Sensu mutator? The Sensu mutator specification When to use a mutator How do Sensu mutators work? Mutator commands What is a mutator command? Mutator command arguments How and where are mutator commands executed? Mutator configuration Example mutator definition Mutator definition specification Mutator name(s) Mutator attributes What are Sensu mutators? Sensu mutators are executable scripts or other programs that modify event data for Sensu event handlers which may expect additional or modified event data (e.</description>
    </item>
    
    <item>
      <title>Silenced API</title>
      <link>/sensu-core/latest/api/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/silenced/</guid>
      <description>Reference documentation The /silenced API endpoints /silenced (GET) /silenced (POST) /silenced/ids/:id (GET) /silenced/clear (POST) /silenced/subscriptions/:subscription (GET) /silenced/checks/:check (GET) The /silenced API endpoints The Silence API provides endpoint HTTP POST and GET access to create, query and clear (delete) a silence entry via the Sensu API.
/silenced (GET) Example: Querying for all silence entries $ curl -s -X GET http://localhost:4567/silenced |jq . [ { &amp;#34;expire&amp;#34;: 3530, &amp;#34;expire_on_resolve&amp;#34;: false, &amp;#34;begin&amp;#34;: null, &amp;#34;creator&amp;#34;: null, &amp;#34;reason&amp;#34;: null, &amp;#34;check&amp;#34;: &amp;#34;check_haproxy&amp;#34;, &amp;#34;subscription&amp;#34;: &amp;#34;load-balancer&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;load-balancer:check_haproxy&amp;#34; }, { &amp;#34;expire&amp;#34;: -1, &amp;#34;expire_on_resolve&amp;#34;: true, &amp;#34;begin&amp;#34;: null, &amp;#34;creator&amp;#34;: &amp;#34;sysop@example.</description>
    </item>
    
    <item>
      <title>Monitoring Devices With Sensu&#39;s SNMP Receiver Extension</title>
      <link>/sensu-core/latest/guides/snmp-sensu-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/snmp-sensu-guide/</guid>
      <description>Objectives Set up a Sensu client as an SNMP trap receiver Send a test SNMP trap to simulate a real world circumstance Demonstrate the results of the SNMP trap test in Uchiwa/Sensu Enterprise Dashboard Prerequisites A working Sensu deployment including sensu-server/sensu-api (or sensu-enterprise), sensu-client, and transport/datastore components Uchiwa, or Sensu Enterprise Dashboard installed and configured snmptrap command installed on a Linux device (we’ll use CentOS 7) If you don’t have Sensu spun up yet, we encourage you to go through our 5 minute install guide.</description>
    </item>
    
    <item>
      <title>Stashes API</title>
      <link>/sensu-core/latest/api/stashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/stashes/</guid>
      <description>Reference documentation The /stashes API endpoints /stashes (GET) /stashes (POST) The /stashes/:path API endpoints /stashes/:path (GET) /stashes/:path (POST) /stashes/:path (DELETE) The /stashes API endpoints The /stashes API endpoint provides HTTP GET and HTTP POST access to Sensu stash data via the Sensu key/value store.
/stashes (GET) EXAMPLES The following example demonstrates a /stashes query, which results in a JSON Array of JSON Hashes containing stash data.
$ curl -s http://localhost:4567/stashes | jq .</description>
    </item>
    
    <item>
      <title>Ubuntu/Debian</title>
      <link>/sensu-core/latest/platforms/sensu-on-ubuntu-debian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/platforms/sensu-on-ubuntu-debian/</guid>
      <description>Sensu on Ubuntu/Debian reference documentation Installing Sensu Core Install Sensu using APT Installing Sensu Enterprise Install the Sensu Enterprise repository Install the Sensu Enterprise Dashboard repository Configure Sensu Create the Sensu configuration directory Example client configuration Example transport configuration Example data store configuration Example API configurations Standalone configuration Distributed configuration Example Sensu Enterprise Dashboard configurations Standalone configuration Distributed configuration Enable the Sensu services to start on boot Disable the Sensu services on boot Operating Sensu Managing the Sensu services/processes Install Sensu Core IMPORTANT: Sensu Core reached end-of-life (EOL) on December 31, 2019, and we permanently removed the Sensu EOL repository on February 1, 2021.</description>
    </item>
    
    <item>
      <title>Using Contact Routing in Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/guides/using-contact-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/guides/using-contact-routing/</guid>
      <description>Prerequisites Overview Contact Routing Basics Contact Configuration Check Configuration Client Configuration Example Implementations Global Configuration Single Handler Multiple Handlers Contact Routing and Sensu Event Pipeline Resources Prerequisites Before diving into this guide, we recommend having the following components ready:
A working Sensu Enterprise deployment Two or more Sensu Enterprise integrations configured If you&amp;rsquo;ve not already signed up for Sensu Enterprise, you can do so via this link.
In this guide, we&amp;rsquo;ll be using Slack and Email handlers.</description>
    </item>
    
    <item>
      <title>Built-in Filters</title>
      <link>/sensu-enterprise/latest/built-in-filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/built-in-filters/</guid>
      <description>ENTERPRISE: Built-in filters are available for Sensu Enterprise users only.
Reference documentation What are built-in filters? Using built-in filters Using multiple built-in filters What are built-in filters? Sensu Enterprise has several built-in event filters, used by many of the third-party integrations, and made available to standard Sensu event handlers. These enterprise filters can be used to combat alert fatigue.
Built-in filters Please refer to the reference documentation for each of the following built-in filters for more information on how to use them:</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>/sensu-core/latest/reference/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/handlers/</guid>
      <description>Reference documentation What is a Sensu event handler? Handler types The default handler Pipe handlers Pipe handler commands What is a pipe handler command? Pipe handler command arguments How and where are pipe handler commands executed? TCP/UDP handlers Transport handlers Handler sets Handler configuration Example handler definition Handler definition specification Handler name(s) HANDLER attributes socket attributes (TCP/UDP handlers) pipe attributes (Transport handlers)s What is a Sensu event handler? Sensu event handlers are actions executed by the Sensu server on events, such as sending an email alert, creating or resolving an incident (e.</description>
    </item>
    
    <item>
      <title>Health &amp; Info APIs</title>
      <link>/sensu-core/latest/api/health-and-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/health-and-info/</guid>
      <description>Reference documentation How to obtain API status information The /health API endpoint /health (GET) The /info API endpoint /info (GET) How to obtain API status information The Sensu API provides two distinct endpoints for obtaining API status information: /health and /info. The Health API provides status information about the health of the API&amp;rsquo;s connections to the Sensu data store and transport. The Info API provides a report on the status of the API, including API version, the status of the API&amp;rsquo;s connections to the Sensu data store and transport, and the number of messages and consumers in various transport queues.</description>
    </item>
    
    <item>
      <title>Install RabbitMQ on Ubuntu/Debian</title>
      <link>/sensu-core/latest/installation/install-rabbitmq-on-ubuntu-debian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-rabbitmq-on-ubuntu-debian/</guid>
      <description>Install RabbitMQ Managing the RabbitMQ service/process Configure RabbitMQ access controls Configure system limits on Linux Configure Sensu Example standalone configuration Example distributed configuration Install RabbitMQ Although RabbitMQ packages are included in the distribution repositories, the included versions often lag behind the supported RabbitMQ release series.
Please see the official RabbitMQ installation guide for recommended installation strategies.
NOTE: It&amp;rsquo;s expected that if you install the rabbitmq-server package from the repository listed in the source above, that the requisite packages for Erlang will also be installed.</description>
    </item>
    
    <item>
      <title>IRC</title>
      <link>/sensu-enterprise/latest/integrations/irc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/irc/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification irc attributes Overview Send notifications to an Internet Relay Chat (IRC) channel for events.
Configuration Example(s) The following is an example global configuration for the irc enterprise event handler (integration).
{ &amp;#34;irc&amp;#34;: { &amp;#34;uri&amp;#34;: &amp;#34;irc://nick:pass@example.com:6697/#ops&amp;#34;, &amp;#34;ssl&amp;#34;: true, &amp;#34;nickserv_password&amp;#34;: &amp;#34;NICKSERV_PASSWORD&amp;#34;, &amp;#34;channel_password&amp;#34;: &amp;#34;CHANNEL_PASSWORD&amp;#34;, &amp;#34;join&amp;#34;: false, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification irc attributes The following attributes are configured within the {&amp;quot;irc&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>Securing Sensu</title>
      <link>/sensu-core/latest/guides/securing-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/securing-sensu/</guid>
      <description>Securing Sensu is a multifaceted process that requires several different components to be secured in order to properly harden your Sensu deployment. In this guide, we&amp;rsquo;ll walk you through the best practices and strategies for securing Sensu. By the end of the guide, you should have a thorough understanding of what goes into securing all of the pieces that make up a Sensu deployment, including:
How to secure your Sensu clients How to secure your Sensu Server/API/Enterprise instance(s) How to secure Uchiwa/the Sensu Enterprise Dashboard We&amp;rsquo;ll also walk through securing the additional components like RabbitMQ and Redis in the guides following this one.</description>
    </item>
    
    <item>
      <title>Built-in Mutators</title>
      <link>/sensu-enterprise/latest/built-in-mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/built-in-mutators/</guid>
      <description>ENTERPRISE: Built-in mutators are available for Sensu Enterprise users only.
Sensu Core ships with a set of built-in mutators for transforming event data into JSON, Ruby Hash, or extracting check output. Sensu Enterprise comes with additional mutators, enabling third-party integrations, and providing event handler authors with a set of supported tools with well defined specifications.
Enterprise mutators The output_format mutator Sensu Enterprise simplifies the process of gaining insightful metrics from complex distributed systems.</description>
    </item>
    
    <item>
      <title>Install RabbitMQ on RHEL/CentOS</title>
      <link>/sensu-core/latest/installation/install-rabbitmq-on-rhel-centos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/install-rabbitmq-on-rhel-centos/</guid>
      <description>Install Erlang (the RabbitMQ runtime) Install RabbitMQ Managing the RabbitMQ service/process Configure RabbitMQ access controls Configure system limits on Linux Configure Sensu Example standalone configuration Example distributed configuration NOTE: Sensu Support is available for RabbitMQ versions 3.6.4 and newer (on Erlang version 19.3 or newer).
Install Erlang (the RabbitMQ runtime) RabbitMQ runs on the Erlang runtime, so before you can install and run RabbitMQ, you&amp;rsquo;ll need to install Erlang.</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>/sensu-core/latest/reference/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/plugins/</guid>
      <description>What is a Sensu plugin? Sensu plugins provide executable scripts or other programs that can be used as Sensu checks (i.e. to monitor server resources, services, and application health, or collect &amp;amp; analyze metrics), Sensu handlers (i.e. to send notifications or perform other actions based on Sensu events), or Sensu mutators (i.e. to modify event data prior to handling).
For more about Sensu plugins, please refer to Installing &amp;amp; Managing Plugins.</description>
    </item>
    
    <item>
      <title>Securing RabbitMQ</title>
      <link>/sensu-core/latest/guides/securing-rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/securing-rabbitmq/</guid>
      <description>As the supported transport mechanism for any Sensu deployment, RabbitMQ has its own set of security concerns, from ensuring that VHOST permissions are set correctly, to adding SSL/TLS encryption between clients, consumers, and queues. This guide will discuss how to properly secure RabbitMQ as one of the core elements of a Sensu deployment.
Before we dive too deep in the article, you may want to familiarize yourself with RabbitMQ permissions. It&amp;rsquo;s important to note that RabbitMQ makes a distinction between configure, write, and read permissions.</description>
    </item>
    
    <item>
      <title>Securing Redis</title>
      <link>/sensu-core/latest/guides/securing-redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/securing-redis/</guid>
      <description>Redis is a key-value database, which describes itself as “an open source, BSD licensed, advanced key-value cache and store”. Sensu uses Redis for storing persistent data. Two Sensu services, the server and API, require access to the same instance of Redis to function.
This guide will discuss best practices to use with Redis for use with Sensu.
Objectives This guide will discuss the following:
Redis General Security Model Securing Redis with a Local Install Securing Redis via Localhost Security Redis General Security Model Redis was designed to be accessed by trusted clients inside a closed network environment.</description>
    </item>
    
    <item>
      <title>Settings API</title>
      <link>/sensu-core/latest/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/settings/</guid>
      <description>Reference documentation The /settings API endpoint /settings (GET) The /settings API endpoint /settings (GET) The /settings API provides HTTP GET access to the APIs running configuration settings. Sensitive setting values are redacted by default, unless the URL query parameter redacted is set to false, e.g. /settings?redacted=false.
EXAMPLE The following example demonstrates a request to the /settings API, resulting in a JSON Hash containing the APIs running configuration settings.
$ curl -s http://127.</description>
    </item>
    
    <item>
      <title>SNMP</title>
      <link>/sensu-enterprise/latest/integrations/snmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/snmp/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Sensu Enterprise MIBs Configuration Example(s) Integration Specification snmp attributes Overview Send SNMP traps to a SNMP manager. Sensu Enterprise provides two SNMP MIB (management information base) modules for this integration. The SNMP integration is capable of creating either SNMPv1 or SNMPv2 traps for Sensu events. By default, SNMPv2 traps are created unless the integration is configured for SNMPv1, e.g. &amp;quot;version&amp;quot;: 1.</description>
    </item>
    
    <item>
      <title>Agent reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/agent/</guid>
      <description>Example Sensu agent configuration file (download)
The Sensu agent is a lightweight client that runs on the infrastructure components you want to monitor. Agents register with the Sensu backend as entities with type: &amp;quot;agent&amp;quot;. Agent entities are responsible for creating check and metrics events to send to the backend event pipeline.
The Sensu agent is available for Linux, macOS, and Windows. For Windows operating systems, the Sensu agent uses cmd.exe for the execution environment.</description>
    </item>
    
    <item>
      <title>Agent reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/agent/</guid>
      <description>Example Sensu agent configuration file (download)
The Sensu agent is a lightweight client that runs on the infrastructure components you want to monitor. Agents register with the Sensu backend as entities with type: &amp;quot;agent&amp;quot;. Agent entities are responsible for creating check and metrics events to send to the backend event pipeline.
The Sensu agent is available for Linux, macOS, and Windows. For Windows operating systems, the Sensu agent uses cmd.exe for the execution environment.</description>
    </item>
    
    <item>
      <title>Agent reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/agent/</guid>
      <description>Example Sensu agent configuration file (download)
The Sensu agent is a lightweight client that runs on the infrastructure components you want to monitor. Agents register with the Sensu backend as entities with type: &amp;quot;agent&amp;quot;. Agent entities are responsible for creating check and metrics events to send to the backend event pipeline.
The Sensu agent is available for Linux, macOS, and Windows. For Windows operating systems, the Sensu agent uses cmd.exe for the execution environment.</description>
    </item>
    
    <item>
      <title>Agent reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/agent/</guid>
      <description>Example Sensu agent configuration file (download)
The Sensu agent is a lightweight client that runs on the infrastructure components you want to monitor. Agents register with the Sensu backend as entities with type: &amp;quot;agent&amp;quot;. Agent entities are responsible for creating check and metrics events to send to the backend event pipeline.
The Sensu agent is available for Linux, macOS, and Windows. For Windows operating systems, the Sensu agent uses cmd.exe for the execution environment.</description>
    </item>
    
    <item>
      <title>API Configuration</title>
      <link>/sensu-core/latest/api/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/api/configuration/</guid>
      <description>Reference documentation API configuration Example API definition API definition specification API configuration Example API definition The following is an example API definition at /etc/sensu/conf.d/api.json.
{ &amp;#34;api&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;57.43.53.22&amp;#34;, &amp;#34;bind&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;port&amp;#34;: 4567 } } API definition specification The API definition uses the &amp;quot;api&amp;quot;: {} definition scope.
api attributes host description The hostname or IP address that is used when querying the API.NOTE: this attribute does not configure the address that the API binds to (that&amp;rsquo;s bind).</description>
    </item>
    
    <item>
      <title>Built-in Handlers</title>
      <link>/sensu-enterprise/latest/built-in-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/built-in-handlers/</guid>
      <description>ENTERPRISE: Built-in handlers are available for Sensu Enterprise users only.
Reference documentation What are built-in handlers? How to use built-in handlers? Examples List of built-in handlers What are built-in Handlers? Sensu Enterprise ships with several built-in third-party integrations, which provide Sensu event handlers. These built-in handlers can be used to handle events for any check. The Enterprise integrations use their own global configuration namespaces in combination with enterprise contact routing to provide granular controls over how events should be handled in a variety of circumstances.</description>
    </item>
    
    <item>
      <title>Glossary of Sensu concepts and terminology</title>
      <link>/sensu-go/6.6/learn/concepts-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/learn/concepts-terminology/</guid>
      <description>Agent A lightweight client that runs on the infrastructure components you want to monitor. Agents self-register with the backend, send keepalive messages, and execute monitoring checks. Each agent belongs to one or more subscriptions that determine which checks the agent runs. An agent can run checks on the entity it’s installed on or connect to a remote proxy entity. Read more about the Sensu agent.
Asset An executable that a check, handler, or mutator can specify as a dependency.</description>
    </item>
    
    <item>
      <title>Glossary of Sensu concepts and terminology</title>
      <link>/sensu-go/6.7/learn/concepts-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/learn/concepts-terminology/</guid>
      <description>Agent A lightweight client that runs on the infrastructure components you want to monitor. Agents self-register with the backend, send keepalive messages, and execute monitoring checks. Each agent belongs to one or more subscriptions that determine which checks the agent runs. An agent can run checks on the entity it’s installed on or connect to a remote proxy entity. Read more about the Sensu agent.
Asset An executable that a check, handler, or mutator can specify as a dependency.</description>
    </item>
    
    <item>
      <title>Glossary of Sensu concepts and terminology</title>
      <link>/sensu-go/6.8/learn/concepts-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/learn/concepts-terminology/</guid>
      <description>Agent A lightweight client that runs on the infrastructure components you want to monitor. Agents self-register with the backend, send keepalive messages, and execute monitoring checks. Each agent belongs to one or more subscriptions that determine which checks the agent runs. An agent can run checks on the entity it’s installed on or connect to a remote proxy entity. Read more about the Sensu agent.
Asset An executable that a check, handler, or mutator can specify as a dependency.</description>
    </item>
    
    <item>
      <title>Glossary of Sensu concepts and terminology</title>
      <link>/sensu-go/latest/learn/concepts-terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/learn/concepts-terminology/</guid>
      <description>Agent A lightweight client that runs on the infrastructure components you want to monitor. Agents self-register with the backend, send keepalive messages, and execute monitoring checks. Each agent belongs to one or more subscriptions that determine which checks the agent runs. An agent can run checks on the entity it’s installed on or connect to a remote proxy entity. Read more about the Sensu agent.
Asset An executable that a check, handler, or mutator can specify as a dependency.</description>
    </item>
    
    <item>
      <title>Configure single sign-on (SSO) authentication</title>
      <link>/sensu-go/6.6/operations/control-access/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/sso/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC) for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Configure single sign-on (SSO) authentication</title>
      <link>/sensu-go/6.7/operations/control-access/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/sso/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC) for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Configure single sign-on (SSO) authentication</title>
      <link>/sensu-go/6.8/operations/control-access/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/sso/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC) for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Configure single sign-on (SSO) authentication</title>
      <link>/sensu-go/latest/operations/control-access/sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/sso/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC) for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Create and manage resources with sensuctl</title>
      <link>/sensu-go/6.6/sensuctl/create-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensuctl/create-manage-resources/</guid>
      <description>Use the sensuctl command line tool to create and manage resources within Sensu. Sensuctl works by calling Sensu’s underlying API to create, read, update, and delete resources, events, and entities.
Create resources The sensuctl create command allows you to create or update resources by reading from STDIN or a file.
The create command accepts Sensu resource definitions in yaml or wrapped-json formats, which wrap the contents of the resource in spec and identify the resource type and api_version.</description>
    </item>
    
    <item>
      <title>Create and manage resources with sensuctl</title>
      <link>/sensu-go/6.7/sensuctl/create-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensuctl/create-manage-resources/</guid>
      <description>Use the sensuctl command line tool to create and manage resources within Sensu. Sensuctl works by calling Sensu’s underlying API to create, read, update, and delete resources, events, and entities.
Create resources The sensuctl create command allows you to create or update resources by reading from STDIN or a file.
The create command accepts Sensu resource definitions in yaml or wrapped-json formats, which wrap the contents of the resource in spec and identify the resource type and api_version.</description>
    </item>
    
    <item>
      <title>Create and manage resources with sensuctl</title>
      <link>/sensu-go/6.8/sensuctl/create-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensuctl/create-manage-resources/</guid>
      <description>Use the sensuctl command line tool to create and manage resources within Sensu. Sensuctl works by calling Sensu’s underlying API to create, read, update, and delete resources, events, and entities.
Create resources The sensuctl create command allows you to create or update resources by reading from STDIN or a file.
The create command accepts Sensu resource definitions in yaml or wrapped-json formats, which wrap the contents of the resource in spec and identify the resource type and api_version.</description>
    </item>
    
    <item>
      <title>Create and manage resources with sensuctl</title>
      <link>/sensu-go/latest/sensuctl/create-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensuctl/create-manage-resources/</guid>
      <description>Use the sensuctl command line tool to create and manage resources within Sensu. Sensuctl works by calling Sensu’s underlying API to create, read, update, and delete resources, events, and entities.
Create resources The sensuctl create command allows you to create or update resources by reading from STDIN or a file.
The create command accepts Sensu resource definitions in yaml or wrapped-json formats, which wrap the contents of the resource in spec and identify the resource type and api_version.</description>
    </item>
    
    <item>
      <title>Entities reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-entities/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-entities/entities/</guid>
      <description>An entity represents anything that needs to be monitored, such as a server, container, or network switch, including the full range of infrastructure, runtime, and application types that compose a complete monitoring environment. Sensu uses agent entities, proxy entities, and service entities.
Sensu&amp;rsquo;s free entity limit is 100 entities. All commercial features are available for free in the packaged Sensu Go distribution for up to 100 entities. If your Sensu instance includes more than 100 entities, contact us to learn how to upgrade your installation and increase your limit.</description>
    </item>
    
    <item>
      <title>Entities reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-entities/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-entities/entities/</guid>
      <description>An entity represents anything that needs to be monitored, such as a server, container, or network switch, including the full range of infrastructure, runtime, and application types that compose a complete monitoring environment. Sensu uses agent entities, proxy entities, and service entities.
Sensu&amp;rsquo;s free entity limit is 100 entities. All commercial features are available for free in the packaged Sensu Go distribution for up to 100 entities. If your Sensu instance includes more than 100 entities, contact us to learn how to upgrade your installation and increase your limit.</description>
    </item>
    
    <item>
      <title>Entities reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-entities/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-entities/entities/</guid>
      <description>An entity represents anything that needs to be monitored, such as a server, container, or network switch, including the full range of infrastructure, runtime, and application types that compose a complete monitoring environment. Sensu uses agent entities, proxy entities, and service entities.
Sensu&amp;rsquo;s free entity limit is 100 entities. All commercial features are available for free in the packaged Sensu Go distribution for up to 100 entities. If your Sensu instance includes more than 100 entities, contact us to learn how to upgrade your installation and increase your limit.</description>
    </item>
    
    <item>
      <title>Entities reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-entities/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-entities/entities/</guid>
      <description>An entity represents anything that needs to be monitored, such as a server, container, or network switch, including the full range of infrastructure, runtime, and application types that compose a complete monitoring environment. Sensu uses agent entities, proxy entities, and service entities.
Sensu&amp;rsquo;s free entity limit is 100 entities. All commercial features are available for free in the packaged Sensu Go distribution for up to 100 entities. If your Sensu instance includes more than 100 entities, contact us to learn how to upgrade your installation and increase your limit.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>/sensu-core/latest/reference/extensions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/extensions/</guid>
      <description>Reference documentation What is a Sensu extension? Installing Sensu extensions Installing Sensu legacy extensions Configuring Sensu extensions The Sensu Extension gem The Sensu Extensions gem template What is a Sensu extension? Unlike Sensu plugins, which spawn a new child process at every execution, Sensu extensions execute directly inside the EventMachine reactor thread of a Sensu client or server process. Because they avoid the overhead of spawning a new process at every invocation, Sensu extensions can fulfill the same functions as plugins, acting as checks, filters, mutators or handlers, but with much greater efficiency.</description>
    </item>
    
    <item>
      <title>Graylog</title>
      <link>/sensu-enterprise/latest/integrations/graylog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/graylog/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification graylog attributes Overview The integration sends event data to a Graylog Raw/Plaintext TCP input. This integration requires a Graylog JSON extractor.
Configuration Example(s) The following is an example configuration for the graylog enterprise event handler (integration).
{ &amp;#34;graylog&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;port&amp;#34;: 5555, &amp;#34;timeout&amp;#34;: 10 } } Integration specification graylog attributes host description The Graylog Raw/Plaintext TCP input host address.</description>
    </item>
    
    <item>
      <title>Hardware requirements</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/hardware-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/hardware-requirements/</guid>
      <description>Sensu backend requirements Backend minimum requirements This configuration is the minimum required to run the Sensu backend (although it is insufficient for production use):
64-bit Intel or AMD CPU 4 GB RAM 4 GB free disk space 10 mbps network link Review the backend recommended configuration for production recommendations.
Backend recommended configuration This backend configuration is recommended as a baseline for production use to ensure a good user and operator experience:</description>
    </item>
    
    <item>
      <title>Hardware requirements</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/hardware-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/hardware-requirements/</guid>
      <description>Sensu backend requirements Backend minimum requirements This configuration is the minimum required to run the Sensu backend (although it is insufficient for production use):
64-bit Intel or AMD CPU 4 GB RAM 4 GB free disk space 10 mbps network link Review the backend recommended configuration for production recommendations.
Backend recommended configuration This backend configuration is recommended as a baseline for production use to ensure a good user and operator experience:</description>
    </item>
    
    <item>
      <title>Hardware requirements</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/hardware-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/hardware-requirements/</guid>
      <description>Sensu backend requirements Backend minimum requirements This configuration is the minimum required to run the Sensu backend (although it is insufficient for production use):
64-bit Intel or AMD CPU 4 GB RAM 4 GB free disk space 10 mbps network link Review the backend recommended configuration for production recommendations.
Backend recommended configuration This backend configuration is recommended as a baseline for production use to ensure a good user and operator experience:</description>
    </item>
    
    <item>
      <title>Hardware requirements</title>
      <link>/sensu-go/latest/operations/deploy-sensu/hardware-requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/hardware-requirements/</guid>
      <description>Sensu backend requirements Backend minimum requirements This configuration is the minimum required to run the Sensu backend (although it is insufficient for production use):
64-bit Intel or AMD CPU 4 GB RAM 4 GB free disk space 10 mbps network link Review the backend recommended configuration for production recommendations.
Backend recommended configuration This backend configuration is recommended as a baseline for production use to ensure a good user and operator experience:</description>
    </item>
    
    <item>
      <title>Log Sensu services with systemd</title>
      <link>/sensu-go/6.6/operations/monitor-sensu/log-sensu-systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/monitor-sensu/log-sensu-systemd/</guid>
      <description>By default, systems where systemd is the service manager do not write logs to /var/log/sensu/ for the sensu-agent and the sensu-backend services. This guide explains how to add log forwarding from journald to syslog, have rsyslog write logging data to disk, and set up log rotation of the newly created log files.
Requirements To follow this guide, install the Sensu backend and make sure at least one Sensu agent is running.</description>
    </item>
    
    <item>
      <title>Log Sensu services with systemd</title>
      <link>/sensu-go/6.7/operations/monitor-sensu/log-sensu-systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/monitor-sensu/log-sensu-systemd/</guid>
      <description>By default, systems where systemd is the service manager do not write logs to /var/log/sensu/ for the sensu-agent and the sensu-backend services. This guide explains how to add log forwarding from journald to syslog, have rsyslog write logging data to disk, and set up log rotation of the newly created log files.
Requirements To follow this guide, install the Sensu backend and make sure at least one Sensu agent is running.</description>
    </item>
    
    <item>
      <title>Log Sensu services with systemd</title>
      <link>/sensu-go/6.8/operations/monitor-sensu/log-sensu-systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/monitor-sensu/log-sensu-systemd/</guid>
      <description>By default, systems where systemd is the service manager do not write logs to /var/log/sensu/ for the sensu-agent and the sensu-backend services. This guide explains how to add log forwarding from journald to syslog, have rsyslog write logging data to disk, and set up log rotation of the newly created log files.
Requirements To follow this guide, install the Sensu backend and make sure at least one Sensu agent is running.</description>
    </item>
    
    <item>
      <title>Log Sensu services with systemd</title>
      <link>/sensu-go/latest/operations/monitor-sensu/log-sensu-systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/monitor-sensu/log-sensu-systemd/</guid>
      <description>By default, systems where systemd is the service manager do not write logs to /var/log/sensu/ for the sensu-agent and the sensu-backend services. This guide explains how to add log forwarding from journald to syslog, have rsyslog write logging data to disk, and set up log rotation of the newly created log files.
Requirements To follow this guide, install the Sensu backend and make sure at least one Sensu agent is running.</description>
    </item>
    
    <item>
      <title>Mutators reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-transform/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-transform/mutators/</guid>
      <description>Sensu executes mutators during the transform stage of the observability pipeline.
Pipelines can specify a mutator to execute and transform observability event data before any handlers are applied. When the Sensu backend processes an event, it checks the pipeline for the presence of a mutator and executes that mutator before executing the handler.
Mutators accept input/data via stdin and can parse JSON event data. They output JSON data (modified event data) to stdout or stderr.</description>
    </item>
    
    <item>
      <title>Mutators reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-transform/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-transform/mutators/</guid>
      <description>Sensu executes mutators during the transform stage of the observability pipeline.
Pipelines can specify a mutator to execute and transform observability event data before any handlers are applied. When the Sensu backend processes an event, it checks the pipeline for the presence of a mutator and executes that mutator before executing the handler.
Mutators accept input/data via stdin and can parse JSON event data. They output JSON data (modified event data) to stdout or stderr.</description>
    </item>
    
    <item>
      <title>Mutators reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-transform/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-transform/mutators/</guid>
      <description>Sensu executes mutators during the transform stage of the observability pipeline.
Pipelines can specify a mutator to execute and transform observability event data before any handlers are applied. When the Sensu backend processes an event, it checks the pipeline for the presence of a mutator and executes that mutator before executing the handler.
Mutators accept input/data via stdin and can parse JSON event data. They output JSON data (modified event data) to stdout or stderr.</description>
    </item>
    
    <item>
      <title>Mutators reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-transform/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-transform/mutators/</guid>
      <description>Sensu executes mutators during the transform stage of the observability pipeline.
Pipelines can specify a mutator to execute and transform observability event data before any handlers are applied. When the Sensu backend processes an event, it checks the pipeline for the presence of a mutator and executes that mutator before executing the handler.
Mutators accept input/data via stdin and can parse JSON event data. They output JSON data (modified event data) to stdout or stderr.</description>
    </item>
    
    <item>
      <title>Troubleshooting Sensu</title>
      <link>/sensu-core/latest/guides/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/troubleshooting/</guid>
      <description>In this guide, we&amp;rsquo;ll cover some of the more common issues to run into when deploying Sensu. For each section, we&amp;rsquo;ll start with the behavior that&amp;rsquo;s most commonly observed, and then walk through some possible solutions to solve that issue.
Setting Log Levels Printing Configurations Restarting Services Collecting Logs Local Client Socket RabbitMQ Authentication Failures RabbitMQ SSL Issues Have an issue that isn&amp;rsquo;t listed here? Open an issue with what you think should be added to this guide!</description>
    </item>
    
    <item>
      <title>Troubleshooting Sensu Enterprise</title>
      <link>/sensu-enterprise/latest/guides/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/guides/troubleshooting/</guid>
      <description>This guide provides an introduction to troubleshooting Sensu Enterprise. For information about troubleshooting the Sensu client and RabbitMQ connection, see the Sensu Core troubleshooting guide.
Reloading Configuration Collecting Logs Settings Log Levels Printing Configurations Resolving Private Key Errors Reloading Configuration Following any changes to the Sensu Enterprise configuration, you must reload Sensu Enterprise in order for the changes to take effect.
Reload Sensu Enterprise on Linux distributions using systemd:
sudo systemctl reload sensu-enterprise Reload Sensu Enterprise on Linux distributions using sysvinit:</description>
    </item>
    
    <item>
      <title>Upgrade Sensu</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/upgrade/</guid>
      <description>To upgrade to the latest version of Sensu Go:
Install or upgrade to the latest packages or Docker image.
NOTE: If you&amp;rsquo;re upgrading a Sensu cluster, upgrade all of your Sensu backends before you run the sensu-backend upgrade command in step 5.
For systems that use systemd, run: sudo systemctl daemon-reload Restart the Sensu agent: sudo systemctl restart sensu-agent Restart the Sensu backend: sudo systemctl restart sensu-backend Run a single upgrade command on one your Sensu backends to migrate the cluster: sensu-backend upgrade To skip confirmation and immediately run the upgrade command, add the --skip-confirm flag: sensu-backend upgrade --skip-confirm NOTE: If you are deploying a new Sensu cluster rather than upgrading from a previous version, you do not need to run the sensu-backend upgrade command.</description>
    </item>
    
    <item>
      <title>Upgrade Sensu</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/upgrade/</guid>
      <description>To upgrade to the latest version of Sensu Go:
Install or upgrade to the latest packages or Docker image.
NOTE: If you&amp;rsquo;re upgrading a Sensu cluster, upgrade all of your Sensu backends before you run the sensu-backend upgrade command in step 5.
For systems that use systemd, run: sudo systemctl daemon-reload Restart the Sensu agent: sudo systemctl restart sensu-agent Restart the Sensu backend: sudo systemctl restart sensu-backend Run a single upgrade command on one your Sensu backends to migrate the cluster: sensu-backend upgrade To skip confirmation and immediately run the upgrade command, add the --skip-confirm flag: sensu-backend upgrade --skip-confirm NOTE: If you are deploying a new Sensu cluster rather than upgrading from a previous version, you do not need to run the sensu-backend upgrade command.</description>
    </item>
    
    <item>
      <title>Upgrade Sensu</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/upgrade/</guid>
      <description>To upgrade to the latest version of Sensu Go:
Install or upgrade to the latest packages or Docker image.
NOTE: If you&amp;rsquo;re upgrading a Sensu cluster, upgrade all of your Sensu backends before you run the sensu-backend upgrade command in step 5.
For systems that use systemd, run: sudo systemctl daemon-reload Restart the Sensu agent: sudo systemctl restart sensu-agent Restart the Sensu backend: sudo systemctl restart sensu-backend Run a single upgrade command on one your Sensu backends to migrate the cluster: sensu-backend upgrade To skip confirmation and immediately run the upgrade command, add the --skip-confirm flag: sensu-backend upgrade --skip-confirm NOTE: If you are deploying a new Sensu cluster rather than upgrading from a previous version, you do not need to run the sensu-backend upgrade command.</description>
    </item>
    
    <item>
      <title>Upgrade Sensu</title>
      <link>/sensu-go/latest/operations/maintain-sensu/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/upgrade/</guid>
      <description>To upgrade to the latest version of Sensu Go:
Install or upgrade to the latest packages or Docker image.
NOTE: If you&amp;rsquo;re upgrading a Sensu cluster, upgrade all of your Sensu backends before you run the sensu-backend upgrade command in step 5.
For systems that use systemd, run: sudo systemctl daemon-reload Restart the Sensu agent: sudo systemctl restart sensu-agent Restart the Sensu backend: sudo systemctl restart sensu-backend Run a single upgrade command on one your Sensu backends to migrate the cluster: sensu-backend upgrade To skip confirmation and immediately run the upgrade command, add the --skip-confirm flag: sensu-backend upgrade --skip-confirm NOTE: If you are deploying a new Sensu cluster rather than upgrading from a previous version, you do not need to run the sensu-backend upgrade command.</description>
    </item>
    
    <item>
      <title>Use secrets management in Sensu</title>
      <link>/sensu-go/6.6/operations/manage-secrets/secrets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/manage-secrets/secrets-management/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management allows you to avoid exposing secrets like usernames, passwords, and access keys in your Sensu configuration. In this guide, you&amp;rsquo;ll learn how to use Sensu&amp;rsquo;s Env secrets provider or HashiCorp Vault as your external secrets provider and authenticate without exposing your secrets.</description>
    </item>
    
    <item>
      <title>Use secrets management in Sensu</title>
      <link>/sensu-go/6.7/operations/manage-secrets/secrets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/manage-secrets/secrets-management/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management allows you to avoid exposing secrets like usernames, passwords, and access keys in your Sensu configuration. In this guide, you&amp;rsquo;ll learn how to use Sensu&amp;rsquo;s Env secrets provider or HashiCorp Vault as your external secrets provider and authenticate without exposing your secrets.</description>
    </item>
    
    <item>
      <title>Use secrets management in Sensu</title>
      <link>/sensu-go/6.8/operations/manage-secrets/secrets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/manage-secrets/secrets-management/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management allows you to avoid exposing secrets like usernames, passwords, and access keys in your Sensu configuration. In this guide, you&amp;rsquo;ll learn how to use Sensu&amp;rsquo;s Env secrets provider or HashiCorp Vault as your external secrets provider and authenticate without exposing your secrets.</description>
    </item>
    
    <item>
      <title>Use secrets management in Sensu</title>
      <link>/sensu-go/latest/operations/manage-secrets/secrets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/manage-secrets/secrets-management/</guid>
      <description>COMMERCIAL FEATURE: Access the Env, CyberArkProvider, and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management allows you to avoid exposing secrets like usernames, passwords, and access keys in your Sensu configuration. In this guide, you&amp;rsquo;ll learn how to use Sensu&amp;rsquo;s Env secrets provider, CyberArk Conjur, or HashiCorp Vault as your external secrets provider and authenticate without exposing your secrets.</description>
    </item>
    
    <item>
      <title>View and manage resources in the web UI</title>
      <link>/sensu-go/6.6/web-ui/view-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/view-manage-resources/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
You can view and manage Sensu resources in the web UI, including events, entities, silences, checks, handlers, event filters, and mutators.
Use the namespace switcher Beyond the homepage, the web UI displays events, entities, and resources for a single namespace at a time. By default, the web UI displays the default namespace.</description>
    </item>
    
    <item>
      <title>View and manage resources in the web UI</title>
      <link>/sensu-go/6.7/web-ui/view-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/view-manage-resources/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
You can view and manage Sensu resources in the web UI, including events, entities, silences, checks, handlers, event filters, and mutators.
Use the namespace switcher Beyond the homepage, the web UI displays events, entities, and resources for a single namespace at a time. By default, the web UI displays the default namespace.</description>
    </item>
    
    <item>
      <title>View and manage resources in the web UI</title>
      <link>/sensu-go/6.8/web-ui/view-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/view-manage-resources/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
You can view and manage Sensu resources in the web UI, including events, entities, silences, checks, handlers, event filters, and mutators.
Use the namespace switcher Beyond the homepage, the web UI displays events, entities, and resources for a single namespace at a time. By default, the web UI displays the default namespace.</description>
    </item>
    
    <item>
      <title>View and manage resources in the web UI</title>
      <link>/sensu-go/latest/web-ui/view-manage-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/view-manage-resources/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
You can view and manage Sensu resources in the web UI, including events, entities, silences, checks, handlers, event filters, and mutators.
Use the namespace switcher Beyond the homepage, the web UI displays events, entities, and resources for a single namespace at a time. By default, the web UI displays the default namespace.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>/uchiwa/latest/getting-started/basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/getting-started/basic-concepts/</guid>
      <description>Datacenter A datacenter is a logical representation of a Sensu cluster. Datacenters can be used, for example, to organize physical datacenters or environments.
Sensu See Sensu documentation for more concepts.</description>
    </item>
    
    <item>
      <title>Flapjack</title>
      <link>/sensu-enterprise/latest/integrations/flapjack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/flapjack/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification flapjack attributes Overview Relay Sensu results to Flapjack, a monitoring notification routing and event processing system. Flapjack uses Redis for event queuing; this integration sends event data to Flapjack through Redis, using the Flapjack event format.
NOTE: checks DO NOT need to specify flapjack as an event handler, as every check result will be relayed to Flapjack if the integration is configured.</description>
    </item>
    
    <item>
      <title>Monitoring Sensu with Sensu</title>
      <link>/sensu-core/latest/guides/monitor-the-monitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/monitor-the-monitor/</guid>
      <description>In this guide, we&amp;rsquo;ll walk through best practices and strategies for monitoring Sensu with Sensu. By the end of the guide, you should have a thorough understanding of what is required to ensure your Sensu components are properly monitored, including:
How to monitor your Sensu Server instance(s) How to monitor your Sensu API instance(s) How to monitor your Uchiwa Dashboard instance(s) How to monitor your RabbitMQ instance(s) How to monitor your Redis instance(s) In order to completely monitor a Sensu stack (Sensu server, Sensu API, Redis, RabbitMQ), you will need to have at least one other independent Sensu.</description>
    </item>
    
    <item>
      <title>Scaling Sensu - Overview</title>
      <link>/sensu-core/latest/guides/scaling-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/scaling-overview/</guid>
      <description>In this article we&amp;rsquo;ll provide brief overviews of the various ways that you can scale your Sensu deployment, from scaling individual components, to scaling across regions.
Scaling Sensu at a Single Site Scaling Sensu Across Multiple Sites Strategy 1: Isolated Clusters Aggregated by Uchiwa Strategy 2: Centralized Sensu and Distributed RabbitMQ Strategy 3: Centralized Sensu and Directly Connected Clients Sensu Components A typical Sensu deployment consists of four pieces:
Sensu Server Sensu API Redis (data store) RabbitMQ (message bus) There can be variation when it comes to the message bus and data store components, but using Redis as the data store and RabbitMQ as the message bus is the most common (and supported) way of deploying those components.</description>
    </item>
    
    <item>
      <title>Stashes</title>
      <link>/sensu-core/latest/reference/stashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/stashes/</guid>
      <description>Reference documentation What is a Sensu stash? The Sensu key/value store The Sensu stash specification Example Sensu stash Stash definition specification Stash attributes content attributes Direct access to stash content data What is a Sensu stash? A Sensu stash is a JSON document containing arbitrary JSON Hash data which is accessible via the Stashes API. The most common use of the Sensu Stashes are via Sensu handlers, which may access the Stashes API to create and/or read &amp;ldquo;state&amp;rdquo; information that persists between handler executions.</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>/sensu-enterprise-dashboard/latest/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/collections/</guid>
      <description>Collections are a grouping of items returned by a collection query. This query acts like a global search and it persists between the different views. Collections can be easily shared and saved.
Collection Query The most basic query is composed of a field and its value, in the form of field:value. A query can use any field, visible or not, to match a value, such as:
dc:us-west-1 subscriber:rabbitmq subscription:linux team:webops Regular Expressions The match method of Javascript&amp;rsquo;s String object is used to retrieve the matches, thus the following special characters are available to use exclusively in the values of a query.</description>
    </item>
    
    <item>
      <title>Data Store</title>
      <link>/sensu-core/latest/reference/data-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/data-store/</guid>
      <description>Reference documentation What is the Sensu data store? What is the Sensu data store? Sensu services use a data store (Redis) to persist monitoring data, including the Sensu client registry, check results, check execution history, and current event data. All Sensu Core server and API processes (i.e. sensu-server and sensu-api), or the Sensu Enterprise process (i.e. sensu-enterprise) require access to the same instance of the defined data store (i.e. a Redis server or cluster).</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/uchiwa/latest/getting-started/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/getting-started/installation/</guid>
      <description>Manual Installation See the download page to download the packages.
Debian/Ubuntu Install the GPG public key: wget -q https://sensu.global.ssl.fastly.net/apt/pubkey.gpg -O- | sudo apt-key add - Determine the codename of the Ubuntu/Debian release on your system: . /etc/os-release &amp;amp;&amp;amp; echo $VERSION &amp;#34;14.04.4 LTS, Trusty Tahr&amp;#34; # codename for this system is &amp;#34;trusty&amp;#34; Create an APT configuration file at /etc/apt/sources.list.d/sensu.list: export CODENAME=your_release_codename_here # e.g. &amp;#34;trusty&amp;#34; echo &amp;#34;deb https://sensu.global.ssl.fastly.net/apt $CODENAME main&amp;#34; | sudo tee /etc/apt/sources.</description>
    </item>
    
    <item>
      <title>Pre-Compiling Plugins</title>
      <link>/sensu-core/latest/guides/pre-compile-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/guides/pre-compile-plugins/</guid>
      <description>This guide will walk you through an example on how to pre-compile Sensu Plugins for distribution among clients. The goal of this guide is to showcase how you can quickly install plugins on ephemeral instances where time to compile can affect time to production. We&amp;rsquo;ll be using sensu-plugins-aws as it requires nokogiri, usually requiring a longer build time.
Prerequisites Sources:
GitHub - luislavena/gem-compiler: A RubyGems plugin that generates binary gems This guide assumes the following:</description>
    </item>
    
    <item>
      <title>Puppet</title>
      <link>/sensu-enterprise/latest/integrations/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/puppet/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification puppet attributes ssl attributes Overview Deregister Sensu clients from the client registry if they no longer have an associated Puppet node. The puppet enterprise handler requires access to a SSL truststore and keystore, containing a valid (and whitelisted) Puppet certificate, private key, and CA. The local Puppet agent certificate, private key, and CA can be used.</description>
    </item>
    
    <item>
      <title>Chef</title>
      <link>/sensu-enterprise/latest/integrations/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/chef/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification chef attributes Overview Deregister Sensu clients from the client registry, if they no longer have associated Chef node data. This integration can only work if Sensu clients are named using the Chef node name, for the machine on which they reside. The chef enterprise handler requires Chef Server API credentials, the local chef-client configuration can be used as a reference.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/uchiwa/latest/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/getting-started/configuration/</guid>
      <description>Configuration Load Order Uchiwa loads configuration from these sources in the following order:
Uchiwa loads configuration from the configuration file (by default, this is located at /etc/sensu/uchiwa.json which is provided with the -c command line argument). Uchiwa loads configuration snippets from configuration files located in one or multiple Uchiwa configuration directories (by default, this is the /etc/sensu/dashboard.d/ directory which is provided with the -d command line argument). Minimal Configuration { &amp;#34;sensu&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Site 1&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;api1.</description>
    </item>
    
    <item>
      <title>Installation Guide Summary</title>
      <link>/sensu-core/latest/installation/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/summary/</guid>
      <description>Congratulations - you have successfully installed and configured the Sensu services, one or more Sensu clients, and a Sensu dashboard! With this basic implementation in place, you have the core Sensu platform available for development, testing and evaluation purposes. What&amp;rsquo;s next?
Next steps The installation guide provided manual, step-by-step instructions to help the user (that&amp;rsquo;s you) learn how Sensu is installed and configured. It would not be practical to manually install Sensu on every machine you wish to monitor.</description>
    </item>
    
    <item>
      <title>Transport</title>
      <link>/sensu-core/latest/reference/transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/transport/</guid>
      <description>Reference documentation What is the Sensu Transport? Selecting a transport Transport configuration Example transport definition Maximum transport message size Transport DNS resolution Transport definition specification Transport attributes What is the Sensu Transport? Sensu services use a message bus (e.g. RabbitMQ) for communication. This message bus communication is provided by the Sensu Transport, which is a library that makes it possible to leverage alternate transport solutions in place of RabbitMQ (the default transport).</description>
    </item>
    
    <item>
      <title>EC2</title>
      <link>/sensu-enterprise/latest/integrations/ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/ec2/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification ec2 attributes Cross-Account Access Client Configuration Integration Configuration Overview Deregister Sensu clients from the client registry, if they no longer have an associated Amazon Web Services (AWS) EC2 instance in the allowed state(s). This enterprise handler (integration) will only work if Sensu clients are named using the EC2 instance ID, for the instance on which they reside.</description>
    </item>
    
    <item>
      <title>Sensu Configuration</title>
      <link>/sensu-core/latest/reference/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/configuration/</guid>
      <description>Reference documentation How does Sensu load configuration? Sensu configuration sources Configuration load order Configuration merging Configuration logging Configuration scopes Configuration scopes are relative Configuration scope examples Sensu service init configuration Sensu service init configuration variables Sensu command line interfaces and arguments Sensu environment variables Sensu configuration specification Example sensu configuration Top-level configuration scopes Sensu definition specification How does Sensu load configuration? Sensu configuration sources By default, the main configuration file for the Sensu platform is located at /etc/sensu/config.</description>
    </item>
    
    <item>
      <title>Upgrading Sensu</title>
      <link>/sensu-core/latest/installation/upgrading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/upgrading/</guid>
      <description>WARNING: Note that the biggest change in this release that may affect your deployment deals with our internal update to a newer Ruby. This means that plugins will have to be re-installed - and any old plugins will continue to persist on your filesystem.
Upgrading Sensu is usually a straightforward process. In most cases, upgrading Sensu and/or Sensu Enterprise only requires upgrading to the latest package. Certain versions of Sensu may include changes that are not backwards compatible and require additional steps be taken when upgrading.</description>
    </item>
    
    <item>
      <title>Event Stream</title>
      <link>/sensu-enterprise/latest/integrations/event_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/event_stream/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification event_stream attributes Overview The event stream integrations sends all Sensu events to a remote TCP socket for complex event processing (or &amp;ldquo;stream processing&amp;rdquo;) and/or long-term storage.
Configuration Example(s) The following is an example configuration for the event_stream enterprise event handler (integration).
{ &amp;#34;event_stream&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;port&amp;#34;: 3000, &amp;#34;filter_metrics&amp;#34;: true, &amp;#34;filter_ok_keepalives&amp;#34;: true, &amp;#34;ring_buffer_size&amp;#34;: 1500 } } Integration specification event_stream attributes host description The remote host address.</description>
    </item>
    
    <item>
      <title>RabbitMQ Configuration</title>
      <link>/sensu-core/latest/reference/rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/rabbitmq/</guid>
      <description>Reference documentation What is RabbitMQ? How does Sensu use RabbitMQ? Install RabbitMQ Configure Sensu Example configuraitons RabbitMQ definition specificaiton rabbitmq attributes ssl attributes Configure RabbitMQ Standalone configuration Distributed configuration High-availability configuration What is a RabbitMQ cluster? High availability hardware requirements Install RabbitMQ Configure a RabbitMQ cluster Configure Sensu to use the RabbitMQ cluster Securing RabbitMQ RabbitMQ and SELinux RabbitMQ SSL RabbitMQ SSL and Erlang 18.3 What is RabbitMQ? RabbitMQ is a message bus, which describes itself as &amp;ldquo;a messaging broker - an intermediary for messaging.</description>
    </item>
    
    <item>
      <title>Testing Prereleases</title>
      <link>/sensu-core/latest/installation/testing-prereleases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/testing-prereleases/</guid>
      <description>WARNING: Sensu prereleases are your first chance to try out new features and bug fixes. Please be aware that you may be the first to discover an issue, you probably do not want to use a prerelease in production.
Testing and using a Sensu prerelease is straightforward, it simply involves using a different package repository. You should only be using prereleases if you already have experience installing and managing a Sensu installation.</description>
    </item>
    
    <item>
      <title>Testing Prereleases</title>
      <link>/sensu-enterprise/latest/installation/testing-prereleases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/installation/testing-prereleases/</guid>
      <description>WARNING: Sensu prereleases are your first chance to try out new features and bug fixes. Please be aware that you may be the first to discover an issue, you probably do not want to use a prerelease in production.
Testing and using a Sensu prerelease is straightforward, it simply involves using a different package repository. You should only be using prereleases if you already have experience installing and managing a Sensu installation.</description>
    </item>
    
    <item>
      <title>Configuration Management</title>
      <link>/sensu-core/latest/installation/configuration-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/configuration-management/</guid>
      <description>We highly recommend using configuration management tools to deploy Sensu in production and at scale.
Pin versions of Sensu-related software to ensure repeatable Sensu deployments. Scale Sensu horizontally with additional Sensu, RabbitMQ, and Redis servers. Ensure consistent configuration between Sensu Servers. The following configuration management tools have well-defined Sensu modules to help you get started.
Puppet The Puppet Sensu module can be found on the Puppet Forge. Sensu has partnered with Tailored Automation to enhance the Puppet module with new features, bug fixes, and ensure Sensu 2.</description>
    </item>
    
    <item>
      <title>InfluxDB</title>
      <link>/sensu-enterprise/latest/integrations/influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/influxdb/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification influxdb attributes Overview Send metrics to InfluxDB using the InfluxDB HTTP API.
When handling events with check type of metric this integration will attempt to translate measurements from the specified output_format to InfluxDB measurements.
When handling events without check type of metric specified, this integration will record annotations to a measurement named sensu_events. These annotations are time series data which describe the status of a given check at a specific point in time, using the following attributes from the event:</description>
    </item>
    
    <item>
      <title>Redis Configuration</title>
      <link>/sensu-core/latest/reference/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/redis/</guid>
      <description>Reference documentation What is Redis? How does Sensu use Redis? Install Redis Configure Sensu Example configurations Redis definition specification redis attributes sentinels attributes Configure Redis Standalone configuration Distributed configuration High Availability configuration What is Redis master-slave replication? What is Redis Sentinel? High availability hardware requirements Install Redis Redis master-slave configuration Configure the Redis master Configure the Redis slave Verify master-slave replication Redis Sentinel configuration Configure a Sentinel Verify Redis Sentinel operation Configure Sensu to use Redis Sentinel Securing Redis What is Redis?</description>
    </item>
    
    <item>
      <title>Graphite</title>
      <link>/sensu-enterprise/latest/integrations/graphite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/graphite/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification graphite attributes Overview Send metrics to Graphite, using the plaintext protocol over TCP. The graphite enterprise handler is also capable of sending metrics to Hosted Graphite, using the prefix attribute to prefix metric names with the Hosted Graphite API key. This handler uses the output_format mutator.
Configuration Example(s) The following is an example global configuration for the graphite enterprise handler (integration).</description>
    </item>
    
    <item>
      <title>Installing &amp; Managing Plugins</title>
      <link>/sensu-core/latest/installation/installing-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/installation/installing-plugins/</guid>
      <description>Sensu&amp;rsquo;s functionality can be extended through the use of plugins. Plugins can provide executables for performing status or metric checks, mutators for changing data to a desired format, or handlers for performing an action on a Sensu event. You can find a number of plugins in the Sensu Plugins repository.
NOTE: Plugins found in the Sensu Plugins GitHub organization are community-maintained, meaning that anyone can improve on a plugin found there.</description>
    </item>
    
    <item>
      <title>SSL Configuration</title>
      <link>/sensu-core/latest/reference/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/ssl/</guid>
      <description>Reference documentation How does Sensu use SSL? SSL-secured transports Configuring Sensu + RabbitMQ for SSL encryption Generate self-signed OpenSSL certificates &amp;amp; CA Enable RabbitMQ SSL support Configure Sensu Known limitations How does Sensu use SSL? All communication between Sensu services happens via the Sensu transport. As such, to secure a Sensu installation means to secure communication between all of the Sensu services and the Sensu transport via SSL encryption. Sensu can operate without the use of SSL encryption, however, this practice is heavily discouraged.</description>
    </item>
    
    <item>
      <title>Tessen</title>
      <link>/sensu-core/latest/reference/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/latest/reference/tessen/</guid>
      <description>What is Tessen? Tessen is a hosted Sensu call-home service hosted by Sensu Inc. The Tessen client, included in every sensu-server, is capable of sending anonymized data about the Sensu installation to the Tessen hosted service, on sensu-server startup and every 6 hours thereafter. All data submissions are logged for complete transparency and transmitted over HTTPS. The anonymized data currently includes the flavour of Sensu (Core or Enterprise), the Sensu version, and the Sensu client and server counts.</description>
    </item>
    
    <item>
      <title>Wavefront</title>
      <link>/sensu-enterprise/latest/integrations/wavefront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/wavefront/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuring a Wavefront Proxy Configuration Example(s) Integration Specification wavefront attributes Overview Send metrics to Wavefront using the Wavefront Data Format. This handler uses the output_format mutator.
Configuring a Wavefront Proxy To install and configure a Wavefront Proxy to receive metrics from Sensu Enterprise, please refer to the Wavefront Proxy setup documentation.
Configuration Example(s) The following is an example global configuration for the wavefront enterprise handler (integration).</description>
    </item>
    
    <item>
      <title>OpenTSDB</title>
      <link>/sensu-enterprise/latest/integrations/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/opentsdb/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification opentsdb attributes Overview Send metrics to OpenTSDB using the telnet protocol (over TCP). This handler uses the output_formatmutator.
Configuration Example(s) The following is an example global configuration for the opentsdb enterprise handler (integration).
{ &amp;#34;opentsdb&amp;#34;: { &amp;#34;host&amp;#34;: &amp;#34;opentsdb.example.com&amp;#34;, &amp;#34;port&amp;#34;: 4242, &amp;#34;tag_host&amp;#34;: true, &amp;#34;tags&amp;#34;: { &amp;#34;dc&amp;#34;: &amp;#34;us-central-1&amp;#34; } } } Integration Specification opentsdb attributes The following attributes are configured within the {&amp;quot;opentsdb&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>Assets reference</title>
      <link>/sensu-go/6.6/plugins/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/assets/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use dynamic runtime assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Sensu supports dynamic runtime assets for checks, filters, mutators, and handlers.
You can discover, download, and share dynamic runtime assets using Bonsai, the Sensu asset hub. Read Use assets to install plugins to get started.</description>
    </item>
    
    <item>
      <title>Assets reference</title>
      <link>/sensu-go/6.7/plugins/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/assets/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use dynamic runtime assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Sensu supports dynamic runtime assets for checks, filters, mutators, and handlers.
Use the Sensu Catalog to find, configure, and install many dynamic runtime assets directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Assets reference</title>
      <link>/sensu-go/6.8/plugins/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/assets/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use dynamic runtime assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Sensu supports dynamic runtime assets for checks, filters, mutators, and handlers.
Use the Sensu Catalog to find, configure, and install many dynamic runtime assets directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Assets reference</title>
      <link>/sensu-go/latest/plugins/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/assets/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use dynamic runtime assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Sensu supports dynamic runtime assets for checks, filters, mutators, and handlers.
Use the Sensu Catalog to find, configure, and install many dynamic runtime assets directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Automatically register and deregister entities</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-entities/auto-register-deregister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-entities/auto-register-deregister/</guid>
      <description>Sensu uses the publish/subscribe pattern of communication, which allows automated registration and deregistration of ephemeral systems. Sensu agents automatically discover and register infrastructure components and the services running on them. At the same time, when an agent process stops, the Sensu backend can automatically create and process a deregistration event.
Automatic registration and deregistration keeps your Sensu instance up-to-date and avoids unnecessary process load, especially in containerized environments where containers routinely come online and offline.</description>
    </item>
    
    <item>
      <title>Automatically register and deregister entities</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-entities/auto-register-deregister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-entities/auto-register-deregister/</guid>
      <description>Sensu uses the publish/subscribe pattern of communication, which allows automated registration and deregistration of ephemeral systems. Sensu agents automatically discover and register infrastructure components and the services running on them. At the same time, when an agent process stops, the Sensu backend can automatically create and process a deregistration event.
Automatic registration and deregistration keeps your Sensu instance up-to-date and avoids unnecessary process load, especially in containerized environments where containers routinely come online and offline.</description>
    </item>
    
    <item>
      <title>Automatically register and deregister entities</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-entities/auto-register-deregister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-entities/auto-register-deregister/</guid>
      <description>Sensu uses the publish/subscribe pattern of communication, which allows automated registration and deregistration of ephemeral systems. Sensu agents automatically discover and register infrastructure components and the services running on them. At the same time, when an agent process stops, the Sensu backend can automatically create and process a deregistration event.
Automatic registration and deregistration keeps your Sensu instance up-to-date and avoids unnecessary process load, especially in containerized environments where containers routinely come online and offline.</description>
    </item>
    
    <item>
      <title>Automatically register and deregister entities</title>
      <link>/sensu-go/latest/observability-pipeline/observe-entities/auto-register-deregister/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-entities/auto-register-deregister/</guid>
      <description>Sensu uses the publish/subscribe pattern of communication, which allows automated registration and deregistration of ephemeral systems. Sensu agents automatically discover and register infrastructure components and the services running on them. At the same time, when an agent process stops, the Sensu backend can automatically create and process a deregistration event.
Automatic registration and deregistration keeps your Sensu instance up-to-date and avoids unnecessary process load, especially in containerized environments where containers routinely come online and offline.</description>
    </item>
    
    <item>
      <title>Back up and recover resources with sensuctl</title>
      <link>/sensu-go/6.6/sensuctl/back-up-recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensuctl/back-up-recover/</guid>
      <description>PRO TIP: For disaster recovery instructions, read Restore your Sensu configuration for disaster recovery.
The sensuctl dump command allows you to export your resources to standard out (stdout) or to a file. You can export all resources or a subset of them based on a list of resource types. The dump command supports exporting in wrapped-json and yaml.
For example, to export all resources for the current namespace to a file named my-resources.</description>
    </item>
    
    <item>
      <title>Back up and recover resources with sensuctl</title>
      <link>/sensu-go/6.7/sensuctl/back-up-recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensuctl/back-up-recover/</guid>
      <description>PRO TIP: For disaster recovery instructions, read Restore your Sensu configuration for disaster recovery.
The sensuctl dump command allows you to export your resources to standard out (stdout) or to a file. You can export all resources or a subset of them based on a list of resource types. The dump command supports exporting in wrapped-json and yaml.
For example, to export all resources for the current namespace to a file named my-resources.</description>
    </item>
    
    <item>
      <title>Back up and recover resources with sensuctl</title>
      <link>/sensu-go/6.8/sensuctl/back-up-recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensuctl/back-up-recover/</guid>
      <description>PRO TIP: For disaster recovery instructions, read Restore your Sensu configuration for disaster recovery.
The sensuctl dump command allows you to export your resources to standard out (stdout) or to a file. You can export all resources or a subset of them based on a list of resource types. The dump command supports exporting in wrapped-json and yaml.
For example, to export all resources for the current namespace to a file named my-resources.</description>
    </item>
    
    <item>
      <title>Back up and recover resources with sensuctl</title>
      <link>/sensu-go/latest/sensuctl/back-up-recover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensuctl/back-up-recover/</guid>
      <description>PRO TIP: For disaster recovery instructions, read Restore your Sensu configuration for disaster recovery.
The sensuctl dump command allows you to export your resources to standard out (stdout) or to a file. You can export all resources or a subset of them based on a list of resource types. The dump command supports exporting in wrapped-json and yaml.
For example, to export all resources for the current namespace to a file named my-resources.</description>
    </item>
    
    <item>
      <title>Backend reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/backend/</guid>
      <description>Example Sensu backend configuration file (download)
The Sensu backend is a service that manages check requests and observability data. Every Sensu backend includes an integrated structure for scheduling checks using subscriptions, an event processing pipeline that applies event filters, mutators, handlers, and pipelines, an embedded etcd datastore for storing configuration and state, and the Sensu API, Sensu web UI, and sensuctl command line tool.
The Sensu backend is available for Debian- and RHEL-family distributions of Linux.</description>
    </item>
    
    <item>
      <title>Backend reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/backend/</guid>
      <description>Example Sensu backend configuration file (download)
The Sensu backend is a service that manages check requests and observability data. Every Sensu backend includes an integrated structure for scheduling checks using subscriptions, an event processing pipeline that applies event filters, mutators, handlers, and pipelines, an embedded etcd datastore for storing configuration and state, and the Sensu API, Sensu web UI, and sensuctl command line tool.
The Sensu backend is available for Debian- and RHEL-family distributions of Linux.</description>
    </item>
    
    <item>
      <title>Backend reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/backend/</guid>
      <description>Example Sensu backend configuration file (download)
The Sensu backend is a service that manages check requests and observability data. Every Sensu backend includes an integrated structure for scheduling checks using subscriptions, an event processing pipeline that applies event filters, mutators, handlers, and pipelines, an embedded etcd datastore for storing configuration and state, and the Sensu API, Sensu web UI, and sensuctl command line tool.
The Sensu backend is available for Debian- and RHEL-family distributions of Linux.</description>
    </item>
    
    <item>
      <title>Backend reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/backend/</guid>
      <description>Example Sensu backend configuration file (download)
The Sensu backend is a service that manages check requests and observability data. Every Sensu backend includes an integrated structure for scheduling checks using subscriptions, an event processing pipeline that applies event filters, mutators, handlers, and pipelines, an embedded etcd datastore for storing configuration and state, and the Sensu API, Sensu web UI, and sensuctl command line tool.
The Sensu backend is available for Debian- and RHEL-family distributions of Linux.</description>
    </item>
    
    <item>
      <title>Configure integrations in the Sensu Catalog</title>
      <link>/sensu-go/6.7/catalog/sensu-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/catalog/sensu-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and the Sensu Catalog in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is an online marketplace for monitoring and observability integrations, from standard system checks and metrics collection to pipelines for sending Sensu data to third-party logging, remediation, and incident management services.</description>
    </item>
    
    <item>
      <title>Configure integrations in the Sensu Catalog</title>
      <link>/sensu-go/6.8/catalog/sensu-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/catalog/sensu-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and the Sensu Catalog in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is an online marketplace for monitoring and observability integrations, from standard system checks and metrics collection to pipelines for sending Sensu data to third-party logging, remediation, and incident management services.</description>
    </item>
    
    <item>
      <title>Configure integrations in the Sensu Catalog</title>
      <link>/sensu-go/latest/catalog/sensu-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/catalog/sensu-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and the Sensu Catalog in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is an online marketplace for monitoring and observability integrations, from standard system checks and metrics collection to pipelines for sending Sensu data to third-party logging, remediation, and incident management services.</description>
    </item>
    
    <item>
      <title>Event filters reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-filter/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-filter/filters/</guid>
      <description>Sensu executes event filters during the filter stage of the observability pipeline.
Sensu event filters are applied when you configure a pipeline with a workflow that uses one or more filters. Before executing the handler in a pipeline workflow, the Sensu backend will apply any event filters listed in the same pipeline workflow to the observation data in events. If the filters do not remove the event, the handler will be executed.</description>
    </item>
    
    <item>
      <title>Event filters reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-filter/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-filter/filters/</guid>
      <description>Sensu executes event filters during the filter stage of the observability pipeline.
Sensu event filters are applied when you configure a pipeline with a workflow that uses one or more filters. Before executing the handler in a pipeline workflow, the Sensu backend will apply any event filters listed in the same pipeline workflow to the observation data in events. If the filters do not remove the event, the handler will be executed.</description>
    </item>
    
    <item>
      <title>Event filters reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-filter/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-filter/filters/</guid>
      <description>Sensu executes event filters during the filter stage of the observability pipeline.
Sensu event filters are applied when you configure a pipeline with a workflow that uses one or more filters. Before executing the handler in a pipeline workflow, the Sensu backend will apply any event filters listed in the same pipeline workflow to the observation data in events. If the filters do not remove the event, the handler will be executed.</description>
    </item>
    
    <item>
      <title>Event filters reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-filter/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-filter/filters/</guid>
      <description>Sensu executes event filters during the filter stage of the observability pipeline.
Sensu event filters are applied when you configure a pipeline with a workflow that uses one or more filters. Before executing the handler in a pipeline workflow, the Sensu backend will apply any event filters listed in the same pipeline workflow to the observation data in events. If the filters do not remove the event, the handler will be executed.</description>
    </item>
    
    <item>
      <title>Events reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-events/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-events/events/</guid>
      <description>An event is a generic container used by Sensu to provide context to checks and metrics. The context, called observation data or event data, contains information about the originating entity and the corresponding check or metric result. An event must contain a status or metrics. In certain cases, an event can contain both a status and metrics. These generic containers allow Sensu to handle different types of events in the observability pipeline.</description>
    </item>
    
    <item>
      <title>Events reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-events/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-events/events/</guid>
      <description>An event is a generic container used by Sensu to provide context to checks and metrics. The context, called observation data or event data, contains information about the originating entity and the corresponding check or metric result. An event must contain a status or metrics. In certain cases, an event can contain both a status and metrics. These generic containers allow Sensu to handle different types of events in the observability pipeline.</description>
    </item>
    
    <item>
      <title>Events reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-events/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-events/events/</guid>
      <description>An event is a generic container used by Sensu to provide context to checks and metrics. The context, called observation data or event data, contains information about the originating entity and the corresponding check or metric result. An event must contain a status or metrics. In certain cases, an event can contain both a status and metrics. These generic containers allow Sensu to handle different types of events in the observability pipeline.</description>
    </item>
    
    <item>
      <title>Events reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-events/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-events/events/</guid>
      <description>An event is a generic container used by Sensu to provide context to checks and metrics. The context, called observation data or event data, contains information about the originating entity and the corresponding check or metric result. An event must contain a status or metrics. In certain cases, an event can contain both a status and metrics. These generic containers allow Sensu to handle different types of events in the observability pipeline.</description>
    </item>
    
    <item>
      <title>Handlers reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/handlers/</guid>
      <description>Sensu executes handlers during the process stage of the observability pipeline.
Handlers are actions the Sensu backend executes on events. Several types of handlers are available. The most common are pipe handlers, which work similarly to checks and enable Sensu to interact with almost any computer program via standard streams.
Pipe handlers send observation data (events) into arbitrary commands via stdin TCP/UDP handlers send observation data (events) to a remote socket Handler sets group event handlers and streamline groups of actions to execute for certain types of events (also called &amp;ldquo;set handlers&amp;rdquo;) The handler stack concept describes a group of handlers or a handler set that escalates events through a series of different handlers.</description>
    </item>
    
    <item>
      <title>Handlers reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/handlers/</guid>
      <description>Sensu executes handlers during the process stage of the observability pipeline.
Handlers are actions the Sensu backend executes on events. Several types of handlers are available. The most common are pipe handlers, which work similarly to checks and enable Sensu to interact with almost any computer program via standard streams.
Pipe handlers send observation data (events) into arbitrary commands via stdin TCP/UDP handlers send observation data (events) to a remote socket Handler sets group event handlers and streamline groups of actions to execute for certain types of events (also called &amp;ldquo;set handlers&amp;rdquo;) The handler stack concept describes a group of handlers or a handler set that escalates events through a series of different handlers.</description>
    </item>
    
    <item>
      <title>Handlers reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/handlers/</guid>
      <description>Sensu executes handlers during the process stage of the observability pipeline.
Handlers are actions the Sensu backend executes on events. Several types of handlers are available. The most common are pipe handlers, which work similarly to checks and enable Sensu to interact with almost any computer program via standard streams.
Pipe handlers send observation data (events) into arbitrary commands via stdin TCP/UDP handlers send observation data (events) to a remote socket Handler sets group event handlers and streamline groups of actions to execute for certain types of events (also called &amp;ldquo;set handlers&amp;rdquo;) The handler stack concept describes a group of handlers or a handler set that escalates events through a series of different handlers.</description>
    </item>
    
    <item>
      <title>Handlers reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/handlers/</guid>
      <description>Sensu executes handlers during the process stage of the observability pipeline.
Handlers are actions the Sensu backend executes on events. Several types of handlers are available. The most common are pipe handlers, which work similarly to checks and enable Sensu to interact with almost any computer program via standard streams.
Pipe handlers send observation data (events) into arbitrary commands via stdin TCP/UDP handlers send observation data (events) to a remote socket Handler sets group event handlers and streamline groups of actions to execute for certain types of events (also called &amp;ldquo;set handlers&amp;rdquo;) The handler stack concept describes a group of handlers or a handler set that escalates events through a series of different handlers.</description>
    </item>
    
    <item>
      <title>Install Sensu</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/install-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/install-sensu/</guid>
      <description>This installation guide describes how to install the Sensu backend, Sensu agent, and sensuctl command line tool.
These instructions explain how to install Sensu for proof-of-concept purposes or testing in a development environment. We recommend using a supported package to follow this guide.
To build Sensu Go from source (OSS), follow the Sensu Go installation instructions on GitHub.
NOTE: If you’re trying Sensu for the first time, consider following the the Sensu Go workshop instead.</description>
    </item>
    
    <item>
      <title>Install Sensu</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/install-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/install-sensu/</guid>
      <description>This installation guide describes how to install the Sensu backend, Sensu agent, and sensuctl command line tool.
These instructions explain how to install Sensu for proof-of-concept purposes or testing in a development environment. We recommend using a supported package to follow this guide.
To build Sensu Go from source (OSS), follow the Sensu Go installation instructions on GitHub.
NOTE: If you’re trying Sensu for the first time, consider following the the Sensu Go workshop instead.</description>
    </item>
    
    <item>
      <title>Install Sensu</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/install-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/install-sensu/</guid>
      <description>This installation guide describes how to install the Sensu backend, Sensu agent, and sensuctl command line tool.
These instructions explain how to install Sensu for proof-of-concept purposes or testing in a development environment. We recommend using a supported package to follow this guide.
To build Sensu Go from source (OSS), follow the Sensu Go installation instructions on GitHub.
NOTE: If you’re trying Sensu for the first time, consider following the the Sensu Go workshop instead.</description>
    </item>
    
    <item>
      <title>Install Sensu</title>
      <link>/sensu-go/latest/operations/deploy-sensu/install-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/install-sensu/</guid>
      <description>This installation guide describes how to install the Sensu backend, Sensu agent, and sensuctl command line tool.
These instructions explain how to install Sensu for proof-of-concept purposes or testing in a development environment. We recommend using a supported package to follow this guide.
To build Sensu Go from source (OSS), follow the Sensu Go installation instructions on GitHub.
NOTE: If you’re trying Sensu for the first time, consider following the the Sensu Go workshop instead.</description>
    </item>
    
    <item>
      <title>Librato</title>
      <link>/sensu-enterprise/latest/integrations/librato/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/librato/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification librato attributes Overview Send metrics to Librato Metrics using the HTTP API.
Configuration Example(s) The following is an example global configuration for the librato enterprise handler (integration).
{ &amp;#34;librato&amp;#34;: { &amp;#34;email&amp;#34;: &amp;#34;support@example.com&amp;#34;, &amp;#34;api_key&amp;#34;: &amp;#34;90SHpjPOFqd2YJFIX9rzDq7ik6CiDmqu2AvqcXJAX3buIwcOGqIOgNilwKMjpStO&amp;#34; } } Integration Specification librato attributes The following attributes are configured within the {&amp;quot;librato&amp;quot;: {} } configuration scope.
email description The Librato account email.</description>
    </item>
    
    <item>
      <title>Migrate from Sensu Core and Sensu Enterprise to Sensu Go</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/migrate/</guid>
      <description>This guide includes general information for migrating your Sensu instance from Sensu Core and Sensu Enterprise to Sensu Go. For instructions and tools to help you translate your Sensu configuration from Sensu Core and Enterprise to Sensu Go, review the Sensu Translator project.
NOTE: The information in this guide applies to Sensu Enterprise as well as Sensu Core, although we refer to &amp;ldquo;Sensu Core&amp;rdquo; for brevity.
The step for translating integrations, contact routing, and LDAP authentication applies to Sensu Enterprise (but not Sensu Core), and it is designated as Sensu Enterprise-only.</description>
    </item>
    
    <item>
      <title>Migrate from Sensu Core and Sensu Enterprise to Sensu Go</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/migrate/</guid>
      <description>This guide includes general information for migrating your Sensu instance from Sensu Core and Sensu Enterprise to Sensu Go. For instructions and tools to help you translate your Sensu configuration from Sensu Core and Enterprise to Sensu Go, review the Sensu Translator project.
NOTE: The information in this guide applies to Sensu Enterprise as well as Sensu Core, although we refer to &amp;ldquo;Sensu Core&amp;rdquo; for brevity.
The step for translating integrations, contact routing, and LDAP authentication applies to Sensu Enterprise (but not Sensu Core), and it is designated as Sensu Enterprise-only.</description>
    </item>
    
    <item>
      <title>Migrate from Sensu Core and Sensu Enterprise to Sensu Go</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/migrate/</guid>
      <description>This guide includes general information for migrating your Sensu instance from Sensu Core and Sensu Enterprise to Sensu Go. For instructions and tools to help you translate your Sensu configuration from Sensu Core and Enterprise to Sensu Go, review the Sensu Translator project.
NOTE: The information in this guide applies to Sensu Enterprise as well as Sensu Core, although we refer to &amp;ldquo;Sensu Core&amp;rdquo; for brevity.
The step for translating integrations, contact routing, and LDAP authentication applies to Sensu Enterprise (but not Sensu Core), and it is designated as Sensu Enterprise-only.</description>
    </item>
    
    <item>
      <title>Migrate from Sensu Core and Sensu Enterprise to Sensu Go</title>
      <link>/sensu-go/latest/operations/maintain-sensu/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/migrate/</guid>
      <description>This guide includes general information for migrating your Sensu instance from Sensu Core and Sensu Enterprise to Sensu Go. For instructions and tools to help you translate your Sensu configuration from Sensu Core and Enterprise to Sensu Go, review the Sensu Translator project.
NOTE: The information in this guide applies to Sensu Enterprise as well as Sensu Core, although we refer to &amp;ldquo;Sensu Core&amp;rdquo; for brevity.
The step for translating integrations, contact routing, and LDAP authentication applies to Sensu Enterprise (but not Sensu Core), and it is designated as Sensu Enterprise-only.</description>
    </item>
    
    <item>
      <title>Monitor Sensu with Sensu</title>
      <link>/sensu-go/6.6/operations/monitor-sensu/monitor-sensu-with-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/monitor-sensu/monitor-sensu-with-sensu/</guid>
      <description>This guide describes best practices and strategies for monitoring the Sensu backend with another Sensu backend or cluster.
To completely monitor Sensu (a Sensu backend with internal etcd and an agent), you will need at least one independent Sensu instance in addition to the primary instance you want to monitor. The second Sensu instance will ensure that you are notified when the primary is down and vice versa.
This guide requires Sensu plugins using dynamic runtime assets.</description>
    </item>
    
    <item>
      <title>Monitor Sensu with Sensu</title>
      <link>/sensu-go/6.7/operations/monitor-sensu/monitor-sensu-with-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/monitor-sensu/monitor-sensu-with-sensu/</guid>
      <description>This guide describes best practices and strategies for monitoring the Sensu backend with another Sensu backend or cluster.
To completely monitor Sensu (a Sensu backend with internal etcd and an agent), you will need at least one independent Sensu instance in addition to the primary instance you want to monitor. The second Sensu instance will ensure that you are notified when the primary is down and vice versa.
This guide requires Sensu plugins using dynamic runtime assets.</description>
    </item>
    
    <item>
      <title>Monitor Sensu with Sensu</title>
      <link>/sensu-go/6.8/operations/monitor-sensu/monitor-sensu-with-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/monitor-sensu/monitor-sensu-with-sensu/</guid>
      <description>This guide describes best practices and strategies for monitoring the Sensu backend with another Sensu backend or cluster.
To completely monitor Sensu (a Sensu backend with internal etcd and an agent), you will need at least one independent Sensu instance in addition to the primary instance you want to monitor. The second Sensu instance will ensure that you are notified when the primary is down and vice versa.
This guide requires Sensu plugins using dynamic runtime assets.</description>
    </item>
    
    <item>
      <title>Monitor Sensu with Sensu</title>
      <link>/sensu-go/latest/operations/monitor-sensu/monitor-sensu-with-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/monitor-sensu/monitor-sensu-with-sensu/</guid>
      <description>This guide describes best practices and strategies for monitoring the Sensu backend with another Sensu backend or cluster.
To completely monitor Sensu (a Sensu backend with internal etcd and an agent), you will need at least one independent Sensu instance in addition to the primary instance you want to monitor. The second Sensu instance will ensure that you are notified when the primary is down and vice versa.
This guide requires Sensu plugins using dynamic runtime assets.</description>
    </item>
    
    <item>
      <title>Secrets reference</title>
      <link>/sensu-go/6.6/operations/manage-secrets/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/manage-secrets/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access the Secret datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets in your Sensu configuration. When a Sensu resource definition requires a secret (for example, a username or password), Sensu allows you to obtain secrets from one or more external secrets providers, so you can both refer to external secrets and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets reference</title>
      <link>/sensu-go/6.7/operations/manage-secrets/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/manage-secrets/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access the Secret datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets in your Sensu configuration. When a Sensu resource definition requires a secret (for example, a username or password), Sensu allows you to obtain secrets from one or more external secrets providers, so you can both refer to external secrets and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets reference</title>
      <link>/sensu-go/6.8/operations/manage-secrets/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/manage-secrets/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access the Secret datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets in your Sensu configuration. When a Sensu resource definition requires a secret (for example, a username or password), Sensu allows you to obtain secrets from one or more external secrets providers, so you can both refer to external secrets and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets reference</title>
      <link>/sensu-go/latest/operations/manage-secrets/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/manage-secrets/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access the Secret datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets in your Sensu configuration. When a Sensu resource definition requires a secret (for example, a username or password), Sensu allows you to obtain secrets from one or more external secrets providers, so you can both refer to external secrets and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Use API keys to authenticate to Sensu</title>
      <link>/sensu-go/6.6/operations/control-access/use-apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/use-apikeys/</guid>
      <description>The Sensu API key feature (core/v2.APIKey) is a persistent universally unique identifier (UUID) that maps to a stored Sensu username. The advantages of authenticating with API keys rather than access tokens include:
More efficient integration: Check and handler plugins and other code can integrate with the Sensu API without implementing the logic required to authenticate via the /auth API endpoint to periodically refresh the access token Improved security: API keys do not require providing a username and password in check or handler definitions Better admin control: API keys can be created and revoked without changing the underlying user&amp;rsquo;s password&amp;hellip;but keep in mind that API keys will continue to work even if the user&amp;rsquo;s password changes API keys are cluster-wide resources, so only cluster admins can grant, view, and revoke them.</description>
    </item>
    
    <item>
      <title>Use API keys to authenticate to Sensu</title>
      <link>/sensu-go/6.7/operations/control-access/use-apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/use-apikeys/</guid>
      <description>The Sensu API key feature (core/v2.APIKey) is a persistent universally unique identifier (UUID) that maps to a stored Sensu username. The advantages of authenticating with API keys rather than access tokens include:
More efficient integration: Check and handler plugins and other code can integrate with the Sensu API without implementing the logic required to authenticate via the /auth API endpoint to periodically refresh the access token Improved security: API keys do not require providing a username and password in check or handler definitions Better admin control: API keys can be created and revoked without changing the underlying user&amp;rsquo;s password&amp;hellip;but keep in mind that API keys will continue to work even if the user&amp;rsquo;s password changes API keys are cluster-wide resources, so only cluster admins can grant, view, and revoke them.</description>
    </item>
    
    <item>
      <title>Use API keys to authenticate to Sensu</title>
      <link>/sensu-go/6.8/operations/control-access/use-apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/use-apikeys/</guid>
      <description>The Sensu API key feature (core/v2.APIKey) is a persistent universally unique identifier (UUID) that maps to a stored Sensu username. The advantages of authenticating with API keys rather than access tokens include:
More efficient integration: Check and handler plugins and other code can integrate with the Sensu API without implementing the logic required to authenticate via the /auth API endpoint to periodically refresh the access token Improved security: API keys do not require providing a username and password in check or handler definitions Better admin control: API keys can be created and revoked without changing the underlying user&amp;rsquo;s password&amp;hellip;but keep in mind that API keys will continue to work even if the user&amp;rsquo;s password changes API keys are cluster-wide resources, so only cluster admins can grant, view, and revoke them.</description>
    </item>
    
    <item>
      <title>Use API keys to authenticate to Sensu</title>
      <link>/sensu-go/latest/operations/control-access/use-apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/use-apikeys/</guid>
      <description>The Sensu API key feature (core/v2.APIKey) is a persistent universally unique identifier (UUID) that maps to a stored Sensu username. The advantages of authenticating with API keys rather than access tokens include:
More efficient integration: Check and handler plugins and other code can integrate with the Sensu API without implementing the logic required to authenticate via the /auth API endpoint to periodically refresh the access token Improved security: API keys do not require providing a username and password in check or handler definitions Better admin control: API keys can be created and revoked without changing the underlying user&amp;rsquo;s password&amp;hellip;but keep in mind that API keys will continue to work even if the user&amp;rsquo;s password changes API keys are cluster-wide resources, so only cluster admins can grant, view, and revoke them.</description>
    </item>
    
    <item>
      <title>DataDog</title>
      <link>/sensu-enterprise/latest/integrations/datadog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/datadog/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Example(s) Integration Specification datadog attributes Overview Create Datadog events for Sensu events. After managing your Datadog account API key, configure the handler (integration) with your API key.
Configuration Example(s) The following is an example global configuration for the datadog enterprise event handler (integration).
{ &amp;#34;datadog&amp;#34;: { &amp;#34;api_key&amp;#34;: &amp;#34;9775a026f1ca7d1c6c5af9d94d9595a4&amp;#34;, &amp;#34;timeout&amp;#34;: 10 } } Integration Specification datadog attributes The following attributes are configured within the {&amp;quot;datadog&amp;quot;: {} } configuration scope.</description>
    </item>
    
    <item>
      <title>High Availability</title>
      <link>/uchiwa/latest/guides/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/guides/high-availability/</guid>
      <description>Datacenters High Availability You can define multiple Sensu APIs by datacenter in order to provide failover and rudimentary load balancing between these APIs.
To get started with this feature, you&amp;rsquo;ll simply need to define at least two Sensu objects with the same name. Here&amp;rsquo;s a basic example:
{ &amp;#34;sensu&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;us-east-1&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;10.0.0.1&amp;#34;, &amp;#34;port&amp;#34;: 4567 }, { &amp;#34;name&amp;#34;: &amp;#34;us-east-1&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;10.0.0.2&amp;#34;, &amp;#34;port&amp;#34;: 4567 } ] } With this configuration, the datacenter us-east-1 now has two APIs (10.</description>
    </item>
    
    <item>
      <title>Search Queries</title>
      <link>/uchiwa/latest/guides/search-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/guides/search-queries/</guid>
      <description>Queries The most basic query is composed of a value but can also contains a field and its value, in the form of field:value. When only specifying the value, all fields are tested against it.
A query can use any field, visible or not, to match a value, such as:
us-west-1 dc:us-west-1 subscriber:rabbitmq subscription:linux team:webops Regular Expressions Javascript&amp;rsquo;s RegExp object is used to retrieve the matches, thus the following special characters are available to use exclusively with field:value queries.</description>
    </item>
    
    <item>
      <title>TimescaleDB</title>
      <link>/sensu-enterprise/latest/integrations/timescaledb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/latest/integrations/timescaledb/</guid>
      <description>ENTERPRISE: Built-in integrations are available for Sensu Enterprise users only.
Overview Configuration Examples Integration Specification timescaledb attributes Overview TimescaleDB is an open source time series database powered by PostgreSQL. This integration allows Sensu Enterprise to send metrics directly to TimescaleDB using the PostgreSQL protocol.
Configuration The TimescaleDB integration requires a TimescaleDB table with following columns and types.
column type reference time timestamptz Date/Time Types name text Character Types value double precision Numeric Types source text Character Types tags jsonb JSON Types For example, the following commands create a sensu database, a metrics table with the required table structure, and a sensu user with access privileges for the metrics table:</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/uchiwa/latest/guides/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/guides/security/</guid>
      <description>Encrypted Passwords You can place hashed passwords in the password attributes, but only within the uchiwa object, in order to obfuscate users passwords in your configuration files.
Please note that you must absolutely use the {crypt} prefix when using an encrypted password. For example: &amp;#34;password&amp;#34;: &amp;#34;{crypt}$1$MteWnoFT$yhEi8KMxO794K0TIriZcI0&amp;#34; The following algorithms are supported (along the commands to create the hashes):
Algorithm Command APR1 openssl passwd -apr1 MY_PASSWORD MD5 mkpasswd --method=MD5 MY_PASSWORD SHA-256 mkpasswd --method=SHA-256 MY_PASSWORD SHA-512 mkpasswd --method=SHA-512 MY_PASSWORD Alternatively, you could use the [Passlib hashing library for Python 2 &amp;amp; 3] (https://passlib.</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>/uchiwa/latest/guides/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/guides/troubleshooting/</guid>
      <description>Authentication How do I disable Uchiwa built-in authentication? In order to remove Uchiwa authentication, you simply need to remove or leave empty the user, pass and users attributes from the Uchiwa Configurationon your configuration file.
Checks My standalone check does not appear in the checks view Uchiwa uses the /checks Sensu API endpoint to build the checks list. This endpoint only provides the checks that are defined and known by the Sensu server itself, therefore standalone checks that are only defined on some particular clients can&amp;rsquo;t be shown.</description>
    </item>
    
    <item>
      <title>Tune Sensu</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/tune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/tune/</guid>
      <description>This page describes tuning options that may help restore proper operation if you experience performance issues with your Sensu installation.
NOTE: Before you tune your Sensu installation, read Troubleshoot Sensu, Hardware requirements, and Deployment architecture for Sensu. These pages describe common problems and solutions, planning and optimization considerations, and other recommendations that may resolve your issue without tuning adjustments.
Latency tolerances for etcd If you use embedded etcd for storage, you might notice high network or storage latency.</description>
    </item>
    
    <item>
      <title>Tune Sensu</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/tune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/tune/</guid>
      <description>This page describes tuning options that may help restore proper operation if you experience performance issues with your Sensu installation.
NOTE: Before you tune your Sensu installation, read Troubleshoot Sensu, Hardware requirements, and Deployment architecture for Sensu. These pages describe common problems and solutions, planning and optimization considerations, and other recommendations that may resolve your issue without tuning adjustments.
Latency tolerances for etcd If you use embedded etcd for storage, you might notice high network or storage latency.</description>
    </item>
    
    <item>
      <title>Tune Sensu</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/tune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/tune/</guid>
      <description>This page describes tuning options that may help restore proper operation if you experience performance issues with your Sensu installation.
NOTE: Before you tune your Sensu installation, read Troubleshoot Sensu, Hardware requirements, and Deployment architecture for Sensu. These pages describe common problems and solutions, planning and optimization considerations, and other recommendations that may resolve your issue without tuning adjustments.
Latency tolerances for etcd If you use embedded etcd for storage, you might notice high network or storage latency.</description>
    </item>
    
    <item>
      <title>Tune Sensu</title>
      <link>/sensu-go/latest/operations/maintain-sensu/tune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/tune/</guid>
      <description>This page describes tuning options that may help restore proper operation if you experience performance issues with your Sensu installation.
NOTE: Before you tune your Sensu installation, read Troubleshoot Sensu, Hardware requirements, and Deployment architecture for Sensu. These pages describe common problems and solutions, planning and optimization considerations, and other recommendations that may resolve your issue without tuning adjustments.
Latency tolerances for etcd If you use embedded etcd for storage, you might notice high network or storage latency.</description>
    </item>
    
    <item>
      <title>Checks reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/checks/</guid>
      <description>Checks work with Sensu agents to produce observability events automatically. You can use checks to monitor server resources, services, and application health as well as collect and analyze metrics. Read Monitor server resources to get started. Use Bonsai, the Sensu asset hub, to discover, download, and share Sensu check dynamic runtime assets.
Check example (minimum recommended attributes) This example shows a check resource definition that includes the minimum recommended attributes.</description>
    </item>
    
    <item>
      <title>Checks reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/checks/</guid>
      <description>Checks work with Sensu agents to produce observability events automatically. You can use checks to monitor server resources, services, and application health as well as collect and analyze metrics. Read Monitor server resources to get started. Use Bonsai, the Sensu asset hub, to discover, download, and share Sensu check dynamic runtime assets.
Check example (minimum recommended attributes) This example shows a check resource definition that includes the minimum recommended attributes.</description>
    </item>
    
    <item>
      <title>Checks reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/checks/</guid>
      <description>Checks work with Sensu agents to produce observability events automatically. You can use checks to monitor server resources, services, and application health as well as collect and analyze metrics. Read Monitor server resources to get started. Use Bonsai, the Sensu asset hub, to discover, download, and share Sensu check dynamic runtime assets.
Check example (minimum recommended attributes) This example shows a check resource definition that includes the minimum recommended attributes.</description>
    </item>
    
    <item>
      <title>Checks reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/checks/</guid>
      <description>Checks work with Sensu agents to produce observability events automatically. You can use checks to monitor server resources, services, and application health as well as collect and analyze metrics. Read Monitor server resources to get started. Use Bonsai, the Sensu asset hub, to discover, download, and share Sensu check dynamic runtime assets.
Check example (minimum recommended attributes) This example shows a check resource definition that includes the minimum recommended attributes.</description>
    </item>
    
    <item>
      <title>Create a read-only user with role-based access control</title>
      <link>/sensu-go/6.6/operations/control-access/create-read-only-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/create-read-only-user/</guid>
      <description>Role-based access control (RBAC) allows you to exercise fine-grained control over how Sensu users interact with Sensu resources. Use RBAC rules to achieve multitenancy so different projects and teams can share a Sensu instance.
Sensu RBAC helps different teams and projects share a Sensu instance. RBAC allows you to manage users and their access to resources based on namespaces, groups, roles, and bindings.
By default, Sensu includes a default namespace and an admin user with full permissions to create, modify, and delete resources within Sensu, including RBAC resources like users and roles.</description>
    </item>
    
    <item>
      <title>Create a read-only user with role-based access control</title>
      <link>/sensu-go/6.7/operations/control-access/create-read-only-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/create-read-only-user/</guid>
      <description>Role-based access control (RBAC) allows you to exercise fine-grained control over how Sensu users interact with Sensu resources. Use RBAC rules to achieve multitenancy so different projects and teams can share a Sensu instance.
Sensu RBAC helps different teams and projects share a Sensu instance. RBAC allows you to manage users and their access to resources based on namespaces, groups, roles, and bindings.
By default, Sensu includes a default namespace and an admin user with full permissions to create, modify, and delete resources within Sensu, including RBAC resources like users and roles.</description>
    </item>
    
    <item>
      <title>Create a read-only user with role-based access control</title>
      <link>/sensu-go/6.8/operations/control-access/create-read-only-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/create-read-only-user/</guid>
      <description>Role-based access control (RBAC) allows you to exercise fine-grained control over how Sensu users interact with Sensu resources. Use RBAC rules to achieve multitenancy so different projects and teams can share a Sensu instance.
Sensu RBAC helps different teams and projects share a Sensu instance. RBAC allows you to manage users and their access to resources based on namespaces, groups, roles, and bindings.
By default, Sensu includes a default namespace and an admin user with full permissions to create, modify, and delete resources within Sensu, including RBAC resources like users and roles.</description>
    </item>
    
    <item>
      <title>Create a read-only user with role-based access control</title>
      <link>/sensu-go/latest/operations/control-access/create-read-only-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/create-read-only-user/</guid>
      <description>Role-based access control (RBAC) allows you to exercise fine-grained control over how Sensu users interact with Sensu resources. Use RBAC rules to achieve multitenancy so different projects and teams can share a Sensu instance.
Sensu RBAC helps different teams and projects share a Sensu instance. RBAC allows you to manage users and their access to resources based on namespaces, groups, roles, and bindings.
By default, Sensu includes a default namespace and an admin user with full permissions to create, modify, and delete resources within Sensu, including RBAC resources like users and roles.</description>
    </item>
    
    <item>
      <title>Deployment architecture for Sensu</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/deployment-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/deployment-architecture/</guid>
      <description>This guide describes various planning considerations and recommendations for a production-ready Sensu deployment, including details related to communication security and common deployment architectures.
etcd is a key-value store that is used by applications of varying complexity, from simple web apps to Kubernetes. The Sensu backend uses an embedded etcd instance for storing both configuration and observability event data, so you can get Sensu up and running without external dependencies.
By building atop etcd, Sensu&amp;rsquo;s backend inherits a number of characteristics to consider when you&amp;rsquo;re planning for a Sensu deployment.</description>
    </item>
    
    <item>
      <title>Deployment architecture for Sensu</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/deployment-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/deployment-architecture/</guid>
      <description>This guide describes various planning considerations and recommendations for a production-ready Sensu deployment, including details related to communication security and common deployment architectures.
etcd is a key-value store that is used by applications of varying complexity, from simple web apps to Kubernetes. The Sensu backend uses an embedded etcd instance for storing both configuration and observability event data, so you can get Sensu up and running without external dependencies.
By building atop etcd, Sensu&amp;rsquo;s backend inherits a number of characteristics to consider when you&amp;rsquo;re planning for a Sensu deployment.</description>
    </item>
    
    <item>
      <title>Deployment architecture for Sensu</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/deployment-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/deployment-architecture/</guid>
      <description>This guide describes various planning considerations and recommendations for a production-ready Sensu deployment, including details related to communication security and common deployment architectures.
etcd is a key-value store that is used by applications of varying complexity, from simple web apps to Kubernetes. The Sensu backend uses an embedded etcd instance for storing both configuration and observability event data, so you can get Sensu up and running without external dependencies.
By building atop etcd, Sensu&amp;rsquo;s backend inherits a number of characteristics to consider when you&amp;rsquo;re planning for a Sensu deployment.</description>
    </item>
    
    <item>
      <title>Deployment architecture for Sensu</title>
      <link>/sensu-go/latest/operations/deploy-sensu/deployment-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/deployment-architecture/</guid>
      <description>This guide describes various planning considerations and recommendations for a production-ready Sensu deployment, including details related to communication security and common deployment architectures.
etcd is a key-value store that is used by applications of varying complexity, from simple web apps to Kubernetes. The Sensu backend uses an embedded etcd instance for storing both configuration and observability event data, so you can get Sensu up and running without external dependencies.
By building atop etcd, Sensu&amp;rsquo;s backend inherits a number of characteristics to consider when you&amp;rsquo;re planning for a Sensu deployment.</description>
    </item>
    
    <item>
      <title>Filter responses with sensuctl</title>
      <link>/sensu-go/6.6/sensuctl/filter-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensuctl/filter-responses/</guid>
      <description>COMMERCIAL FEATURE: Access sensuctl response filtering in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensuctl supports response filtering for all commands using the list verb. For information about response filtering methods and available label and field selectors, read API response filtering.
Sensuctl-specific syntax You can use the same methods, selectors, and examples for sensuctl response filtering as for API response filtering, except you&amp;rsquo;ll format your requests with the --label-selector and --field-selector flags instead of cURL.</description>
    </item>
    
    <item>
      <title>Filter responses with sensuctl</title>
      <link>/sensu-go/6.7/sensuctl/filter-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensuctl/filter-responses/</guid>
      <description>COMMERCIAL FEATURE: Access sensuctl response filtering in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensuctl supports response filtering for all commands using the list verb. For information about response filtering methods and available label and field selectors, read API response filtering.
Sensuctl-specific syntax You can use the same methods, selectors, and examples for sensuctl response filtering as for API response filtering, except you&amp;rsquo;ll format your requests with the --label-selector and --field-selector flags instead of cURL.</description>
    </item>
    
    <item>
      <title>Filter responses with sensuctl</title>
      <link>/sensu-go/6.8/sensuctl/filter-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensuctl/filter-responses/</guid>
      <description>COMMERCIAL FEATURE: Access sensuctl response filtering in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensuctl supports response filtering for all commands using the list verb. For information about response filtering methods and available label and field selectors, read API response filtering.
Sensuctl-specific syntax You can use the same methods, selectors, and examples for sensuctl response filtering as for API response filtering, except you&amp;rsquo;ll format your requests with the --label-selector and --field-selector flags instead of cURL.</description>
    </item>
    
    <item>
      <title>Filter responses with sensuctl</title>
      <link>/sensu-go/latest/sensuctl/filter-responses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensuctl/filter-responses/</guid>
      <description>COMMERCIAL FEATURE: Access sensuctl response filtering in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensuctl supports response filtering for all commands using the list verb. For information about response filtering methods and available label and field selectors, read API response filtering.
Sensuctl-specific syntax You can use the same methods, selectors, and examples for sensuctl response filtering as for API response filtering, except you&amp;rsquo;ll format your requests with the --label-selector and --field-selector flags instead of cURL.</description>
    </item>
    
    <item>
      <title>Health reference</title>
      <link>/sensu-go/6.6/operations/monitor-sensu/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/monitor-sensu/health/</guid>
      <description>Use Sensu&amp;rsquo;s /health API to make sure your backend is up and running and check the health of your etcd cluster members and PostgreSQL datastore resources.
A request to the /health API endpoint retrieves a JSON map with health data for your Sensu instance. Here&amp;rsquo;s an example request to the health endpoint:
curl -X GET \ http://127.0.0.1:8080/health Healthy cluster example In this example, all cluster members are healthy.
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 9861478486968594000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;88db026f7feb72b4&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend01&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 16828500076473182000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;e98ad7a888d16bd6&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend02&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 848052855499371400, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;bc4e39432cbb36d&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend03&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 17701109828877156000, &amp;#34;member_id&amp;#34;: 16828500076473182000, &amp;#34;raft_term&amp;#34;: 42 } }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-first-postgres&amp;#34;, &amp;#34;Active&amp;#34;: true, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;Name&amp;#34;: &amp;#34;my-other-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } Unhealthy cluster member example In this example, one cluster member is unhealthy: it cannot communicate with the other cluster members.</description>
    </item>
    
    <item>
      <title>Health reference</title>
      <link>/sensu-go/6.7/operations/monitor-sensu/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/monitor-sensu/health/</guid>
      <description>Use Sensu&amp;rsquo;s /health API to make sure your backend is up and running and check the health of your etcd cluster members and PostgreSQL datastore resources.
A request to the /health API endpoint retrieves a JSON map with health data for your Sensu instance. Here&amp;rsquo;s an example request to the health endpoint:
curl -X GET \ http://127.0.0.1:8080/health Healthy cluster example In this example, all cluster members are healthy.
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 9861478486968594000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;88db026f7feb72b4&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend01&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 16828500076473182000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;e98ad7a888d16bd6&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend02&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 848052855499371400, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;bc4e39432cbb36d&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend03&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 17701109828877156000, &amp;#34;member_id&amp;#34;: 16828500076473182000, &amp;#34;raft_term&amp;#34;: 42 } }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-first-postgres&amp;#34;, &amp;#34;Active&amp;#34;: true, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;Name&amp;#34;: &amp;#34;my-other-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } Unhealthy cluster member example In this example, one cluster member is unhealthy: it cannot communicate with the other cluster members.</description>
    </item>
    
    <item>
      <title>Health reference</title>
      <link>/sensu-go/6.8/operations/monitor-sensu/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/monitor-sensu/health/</guid>
      <description>Use Sensu&amp;rsquo;s /health API to make sure your backend is up and running and check the health of your etcd cluster members and PostgreSQL datastore resources.
A request to the /health API endpoint retrieves a JSON map with health data for your Sensu instance. Here&amp;rsquo;s an example request to the health endpoint:
curl -X GET \ http://127.0.0.1:8080/health Healthy cluster example In this example, all cluster members are healthy.
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 9861478486968594000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;88db026f7feb72b4&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend01&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 16828500076473182000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;e98ad7a888d16bd6&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend02&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 848052855499371400, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;bc4e39432cbb36d&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend03&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 17701109828877156000, &amp;#34;member_id&amp;#34;: 16828500076473182000, &amp;#34;raft_term&amp;#34;: 42 } }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-first-postgres&amp;#34;, &amp;#34;Active&amp;#34;: true, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;Name&amp;#34;: &amp;#34;my-other-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } Unhealthy cluster member example In this example, one cluster member is unhealthy: it cannot communicate with the other cluster members.</description>
    </item>
    
    <item>
      <title>Health reference</title>
      <link>/sensu-go/latest/operations/monitor-sensu/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/monitor-sensu/health/</guid>
      <description>Use Sensu&amp;rsquo;s /health API to make sure your backend is up and running and check the health of your etcd cluster members and PostgreSQL datastore resources.
A request to the /health API endpoint retrieves a JSON map with health data for your Sensu instance. Here&amp;rsquo;s an example request to the health endpoint:
curl -X GET \ http://127.0.0.1:8080/health Healthy cluster example In this example, all cluster members are healthy.
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 9861478486968594000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;88db026f7feb72b4&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend01&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 16828500076473182000, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;e98ad7a888d16bd6&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend02&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;MemberID&amp;#34;: 848052855499371400, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;bc4e39432cbb36d&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;backend03&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 17701109828877156000, &amp;#34;member_id&amp;#34;: 16828500076473182000, &amp;#34;raft_term&amp;#34;: 42 } }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-first-postgres&amp;#34;, &amp;#34;Active&amp;#34;: true, &amp;#34;Healthy&amp;#34;: true }, { &amp;#34;Name&amp;#34;: &amp;#34;my-other-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } Unhealthy cluster member example In this example, one cluster member is unhealthy: it cannot communicate with the other cluster members.</description>
    </item>
    
    <item>
      <title>Live demonstration of Sensu</title>
      <link>/sensu-go/6.6/learn/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/learn/demo/</guid>
      <description>Try a live demo of the Sensu web UI. Log in with username guest and password i&amp;lt;3sensu.
Explore the Entities page to learn what Sensu is monitoring, the Events page for the latest observability events, and the Checks page for active service and metric checks.
You can also use the demo to try out sensuctl, the Sensu command line tool. First, install sensuctl on your workstation. Then, configure sensuctl to connect to the demo.</description>
    </item>
    
    <item>
      <title>Live demonstration of Sensu</title>
      <link>/sensu-go/6.7/learn/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/learn/demo/</guid>
      <description>Try a live demo of the Sensu web UI. Log in with username guest and password i&amp;lt;3sensu.
Explore the Entities page to learn what Sensu is monitoring, the Events page for the latest observability events, and the Checks page for active service and metric checks.
You can also use the demo to try out sensuctl, the Sensu command line tool. First, install sensuctl on your workstation. Then, configure sensuctl to connect to the demo.</description>
    </item>
    
    <item>
      <title>Live demonstration of Sensu</title>
      <link>/sensu-go/6.8/learn/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/learn/demo/</guid>
      <description>Try a live demo of the Sensu web UI. Log in with username guest and password i&amp;lt;3sensu.
Explore the Entities page to learn what Sensu is monitoring, the Events page for the latest observability events, and the Checks page for active service and metric checks.
You can also use the demo to try out sensuctl, the Sensu command line tool. First, install sensuctl on your workstation. Then, configure sensuctl to connect to the demo.</description>
    </item>
    
    <item>
      <title>Live demonstration of Sensu</title>
      <link>/sensu-go/latest/learn/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/learn/demo/</guid>
      <description>Try a live demo of the Sensu web UI. Log in with username guest and password i&amp;lt;3sensu.
Explore the Entities page to learn what Sensu is monitoring, the Events page for the latest observability events, and the Checks page for active service and metric checks.
You can also use the demo to try out sensuctl, the Sensu command line tool. First, install sensuctl on your workstation. Then, configure sensuctl to connect to the demo.</description>
    </item>
    
    <item>
      <title>Monitor external resources with proxy entities</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-entities/monitor-external-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-entities/monitor-external-resources/</guid>
      <description>Proxy entities allow Sensu to monitor external resources on systems and devices where a Sensu agent cannot be installed, like a network switch or a website. You can create proxy entities with sensuctl, the Sensu API, and the proxy_entity_name check attribute. When executing checks that include a proxy_entity_name or proxy_requests attribute, Sensu agents report the resulting event under the proxy entity instead of the agent entity.
This guide explains how to use a proxy entity to monitor website status, as well as how to use the proxy checks to monitor a group of websites.</description>
    </item>
    
    <item>
      <title>Monitor external resources with proxy entities</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-entities/monitor-external-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-entities/monitor-external-resources/</guid>
      <description>Proxy entities allow Sensu to monitor external resources on systems and devices where a Sensu agent cannot be installed, like a network switch or a website. You can create proxy entities with sensuctl, the Sensu API, and the proxy_entity_name check attribute. When executing checks that include a proxy_entity_name or proxy_requests attribute, Sensu agents report the resulting event under the proxy entity instead of the agent entity.
This guide explains how to use a proxy entity to monitor website status and includes two methods for configuring the required Sensu resources:</description>
    </item>
    
    <item>
      <title>Monitor external resources with proxy entities</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-entities/monitor-external-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-entities/monitor-external-resources/</guid>
      <description>Proxy entities allow Sensu to monitor external resources on systems and devices where a Sensu agent cannot be installed, like a network switch or a website. You can create proxy entities with sensuctl, the Sensu API, and the proxy_entity_name check attribute. When executing checks that include a proxy_entity_name or proxy_requests attribute, Sensu agents report the resulting event under the proxy entity instead of the agent entity.
This guide explains how to use a proxy entity to monitor website status and includes two methods for configuring the required Sensu resources:</description>
    </item>
    
    <item>
      <title>Monitor external resources with proxy entities</title>
      <link>/sensu-go/latest/observability-pipeline/observe-entities/monitor-external-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-entities/monitor-external-resources/</guid>
      <description>Proxy entities allow Sensu to monitor external resources on systems and devices where a Sensu agent cannot be installed, like a network switch or a website. You can create proxy entities with sensuctl, the Sensu API, and the proxy_entity_name check attribute. When executing checks that include a proxy_entity_name or proxy_requests attribute, Sensu agents report the resulting event under the proxy entity instead of the agent entity.
This guide explains how to use a proxy entity to monitor website status and includes two methods for configuring the required Sensu resources:</description>
    </item>
    
    <item>
      <title>Secrets providers reference</title>
      <link>/sensu-go/6.6/operations/manage-secrets/secrets-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/manage-secrets/secrets-providers/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets like usernames, passwords, and access keys in your Sensu configuration. With Sensu&amp;rsquo;s secrets management, you can obtain secrets from one or more external secrets providers, refer to external secrets, and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets providers reference</title>
      <link>/sensu-go/6.7/operations/manage-secrets/secrets-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/manage-secrets/secrets-providers/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets like usernames, passwords, and access keys in your Sensu configuration. With Sensu&amp;rsquo;s secrets management, you can obtain secrets from one or more external secrets providers, refer to external secrets, and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets providers reference</title>
      <link>/sensu-go/6.8/operations/manage-secrets/secrets-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/manage-secrets/secrets-providers/</guid>
      <description>COMMERCIAL FEATURE: Access the Env and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets like usernames, passwords, and access keys in your Sensu configuration. With Sensu&amp;rsquo;s secrets management, you can obtain secrets from one or more external secrets providers, refer to external secrets, and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Secrets providers reference</title>
      <link>/sensu-go/latest/operations/manage-secrets/secrets-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/manage-secrets/secrets-providers/</guid>
      <description>COMMERCIAL FEATURE: Access the Env, CyberArkProvider, and VaultProvider secrets provider datatypes in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s secrets management eliminates the need to expose secrets like usernames, passwords, and access keys in your Sensu configuration. With Sensu&amp;rsquo;s secrets management, you can obtain secrets from one or more external secrets providers, refer to external secrets, and consume secrets via backend environment variables.</description>
    </item>
    
    <item>
      <title>Troubleshoot Sensu</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/troubleshoot/</guid>
      <description>Service logging Logs produced by Sensu services (sensu-backend and sensu-agent) are often the best place to start when troubleshooting a variety of issues.
Log file locations Linux Sensu services print structured log messages to standard output. To capture these log messages to disk or another logging facility, Sensu services use capabilities provided by the underlying operating system&amp;rsquo;s service management. For example, logs are sent to the journald when systemd is the service manager, whereas log messages are redirected to /var/log/sensu when running under sysv init schemes.</description>
    </item>
    
    <item>
      <title>Troubleshoot Sensu</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/troubleshoot/</guid>
      <description>Service logging Logs produced by Sensu services (sensu-backend and sensu-agent) are often the best place to start when troubleshooting a variety of issues.
Log file locations Linux Sensu services print structured log messages to standard output. To capture these log messages to disk or another logging facility, Sensu services use capabilities provided by the underlying operating system&amp;rsquo;s service management. For example, logs are sent to the journald when systemd is the service manager, whereas log messages are redirected to /var/log/sensu when running under sysv init schemes.</description>
    </item>
    
    <item>
      <title>Troubleshoot Sensu</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/troubleshoot/</guid>
      <description>Service logging Logs produced by Sensu services (sensu-backend and sensu-agent) are often the best place to start when troubleshooting a variety of issues.
Log file locations Linux Sensu services print structured log messages to standard output. To capture these log messages to disk or another logging facility, Sensu services use capabilities provided by the underlying operating system&amp;rsquo;s service management. For example, logs are sent to the journald when systemd is the service manager, whereas log messages are redirected to /var/log/sensu when running under sysv init schemes.</description>
    </item>
    
    <item>
      <title>Troubleshoot Sensu</title>
      <link>/sensu-go/latest/operations/maintain-sensu/troubleshoot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/troubleshoot/</guid>
      <description>Service logging Logs produced by Sensu services (sensu-backend and sensu-agent) are often the best place to start when troubleshooting a variety of issues.
Log file locations Linux Sensu services print structured log messages to standard output. To capture these log messages to disk or another logging facility, Sensu services use capabilities provided by the underlying operating system&amp;rsquo;s service management. For example, logs are sent to the journald when systemd is the service manager, whereas log messages are redirected to /var/log/sensu when running under sysv init schemes.</description>
    </item>
    
    <item>
      <title>Aggregates</title>
      <link>/uchiwa/latest/reference/aggregates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/reference/aggregates/</guid>
      <description>To understand aggregates in Sensu, please refer yourself to the Sensu documentation.
List All Aggregates To view all aggregates, head over to the aggregates view.
View An Aggregate To see the detail of a specific aggregate, click on it from the aggregates view. From there, you can see the check and client members, in addition to the results of every check members.
Delete An Aggregate It&amp;rsquo;s currently impossible to delete an aggregate from Uchiwa, but we would love to have you contribute to Uchiwa by implementing this feature!</description>
    </item>
    
    <item>
      <title>Checks</title>
      <link>/uchiwa/latest/reference/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/reference/checks/</guid>
      <description>To understand checks in Sensu, please refer yourself to the Sensu documentation.
List All Checks To view all checks, head over to the checks view. Please note that standalone checks that are not installed on the Sensu Server will not be displayed.
Issue A Check Request You can force a check request across a datacenter by selecting one or multiple checks on the checks view and clicking on the Issue Check Request action within the Bulk Actions dropdown menu.</description>
    </item>
    
    <item>
      <title>Clients</title>
      <link>/uchiwa/latest/reference/clients/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/reference/clients/</guid>
      <description>To understand clients in Sensu, please refer yourself to the Sensu documentation.
List All Clients To view all clients, including Sensu proxy clients (formerly known as &amp;ldquo;Just-in-time&amp;rdquo; or &amp;ldquo;JIT&amp;rdquo; clients), head over to the clients view.
View A Client To see the detail of a specific client, click on it from the clients view. From there, you can see the client data of the left panel and the check results data on the right one.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>/uchiwa/latest/reference/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/reference/events/</guid>
      <description>To understand events in Sensu, please refer yourself to the Sensu documentation.
List All Events To view all events, head over to the events view.
View An Event To see the detail of a specific event, click on it from the events view.
Resolve An Event You can resolve an event by selecting one or multiple events on the events view and clicking on the Resolve action within the Bulk Actions dropdown menu.</description>
    </item>
    
    <item>
      <title>Ready reference</title>
      <link>/sensu-go/6.8/operations/monitor-sensu/ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/monitor-sensu/ready/</guid>
      <description>Use Sensu&amp;rsquo;s /ready API endpoint to confirm whether a Sensu instance is ready to serve API requests and accept agent connections.
A request to the /ready backend API endpoint retrieves a text response with information about whether your Sensu instance is ready to serve API requests. Here&amp;rsquo;s an example request to the /ready API endpoint:
curl -X GET \ http://127.0.0.1:8080/ready A request to the /ready agent transport API endpoint via the backend WebSocket retrieves information about whether your Sensu instance is ready to accept agent connections.</description>
    </item>
    
    <item>
      <title>Ready reference</title>
      <link>/sensu-go/latest/operations/monitor-sensu/ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/monitor-sensu/ready/</guid>
      <description>Use Sensu&amp;rsquo;s /ready API endpoint to confirm whether a Sensu instance is ready to serve API requests and accept agent connections.
A request to the /ready backend API endpoint retrieves a text response with information about whether your Sensu instance is ready to serve API requests. Here&amp;rsquo;s an example request to the /ready API endpoint:
curl -X GET \ http://127.0.0.1:8080/ready A request to the /ready agent transport API endpoint via the backend WebSocket retrieves information about whether your Sensu instance is ready to accept agent connections.</description>
    </item>
    
    <item>
      <title>Restore your Sensu configuration for disaster recovery</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/disaster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/disaster-recovery/</guid>
      <description>This page explains how to restore your Sensu configuration for disaster recovery. The disaster recovery processes include steps for creating backups of your Sensu configuration, but you must make backups before you need to use them. Read best practices for backups for more information.
The instructions for restoring Sensu assume that your primary Sensu deployment is down and you need to bring up a new one to take its place.</description>
    </item>
    
    <item>
      <title>Restore your Sensu configuration for disaster recovery</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/disaster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/disaster-recovery/</guid>
      <description>This page explains how to restore your Sensu configuration for disaster recovery. The disaster recovery processes include steps for creating backups of your Sensu configuration, but you must make backups before you need to use them. Read best practices for backups for more information.
The instructions for restoring Sensu assume that your primary Sensu deployment is down and you need to bring up a new one to take its place.</description>
    </item>
    
    <item>
      <title>Restore your Sensu configuration for disaster recovery</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/disaster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/disaster-recovery/</guid>
      <description>This page explains how to restore your Sensu configuration for disaster recovery. The disaster recovery processes include steps for creating backups of your Sensu configuration, but you must make backups before you need to use them. Read best practices for backups for more information.
The instructions for restoring Sensu assume that your primary Sensu deployment is down and you need to bring up a new one to take its place.</description>
    </item>
    
    <item>
      <title>Restore your Sensu configuration for disaster recovery</title>
      <link>/sensu-go/latest/operations/maintain-sensu/disaster-recovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/disaster-recovery/</guid>
      <description>This page explains how to restore your Sensu configuration for disaster recovery. The disaster recovery processes include steps for creating backups of your Sensu configuration, but you must make backups before you need to use them. Read best practices for backups for more information.
The instructions for restoring Sensu assume that your primary Sensu deployment is down and you need to bring up a new one to take its place.</description>
    </item>
    
    <item>
      <title>Silencing</title>
      <link>/uchiwa/latest/reference/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/reference/silencing/</guid>
      <description>Follow these instructions to silence or unsilence an element.
Silence a check Across a datacenter You can silence a check for a given datacenter by selecting one or multiple checks on the checks view and clicking on the Silence/Unsilence action within the Bulk Actions dropdown menu.
For a particular client Access the client view for this client and click on the silence icon corresponding to the check on the right panel.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/uchiwa/latest/api/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/api/authentication/</guid>
      <description>In order to use the Uchiwa API when authentication is enabled, you must provide an access token with every request.
Remember to keep your access tokens secret and use HTTPS wherever possible.
Configuring an access token Set the accessToken attribute in the appropriate role; see the documentation. Restart Uchiwa to apply this change. Providing the access token In a header
curl -H &amp;#34;Authorization: token TOKEN&amp;#34; https://localhost:3000/events As a parameter
curl https://localhost:3000/events?</description>
    </item>
    
    <item>
      <title>Build a private catalog of Sensu integrations</title>
      <link>/sensu-go/6.7/catalog/build-private-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/catalog/build-private-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective monitoring and observability. The official Sensu Catalog is available in the web UI, but you can also create a private catalog of custom integrations and make it available to users in place of the official Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Build a private catalog of Sensu integrations</title>
      <link>/sensu-go/6.8/catalog/build-private-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/catalog/build-private-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective monitoring and observability. The official Sensu Catalog is available in the web UI, but you can also create a private catalog of custom integrations and make it available to users in place of the official Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Build a private catalog of Sensu integrations</title>
      <link>/sensu-go/latest/catalog/build-private-catalog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/catalog/build-private-catalog/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective monitoring and observability. The official Sensu Catalog is available in the web UI, but you can also create a private catalog of custom integrations and make it available to users in place of the official Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Configuration management</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/configuration-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/configuration-management/</guid>
      <description>We recommend using configuration management tools to deploy Sensu in production and at scale.
Pin versions of Sensu-related software to ensure repeatable Sensu deployments. Ensure consistent configuration between Sensu backends. The configuration management tools listed here have well-defined Sensu modules to help you get started.
Ansible The Ansible role to deploy and manage Sensu Go is available in the Sensu Go Ansible Collection.
The Sensu Go Ansible Collection documentation site includes installation instructions, example playbooks, and module references.</description>
    </item>
    
    <item>
      <title>Configuration management</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/configuration-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/configuration-management/</guid>
      <description>We recommend using configuration management tools to deploy Sensu in production and at scale.
Pin versions of Sensu-related software to ensure repeatable Sensu deployments. Ensure consistent configuration between Sensu backends. The configuration management tools listed here have well-defined Sensu modules to help you get started.
Ansible The Ansible role to deploy and manage Sensu Go is available in the Sensu Go Ansible Collection.
The Sensu Go Ansible Collection documentation site includes installation instructions, example playbooks, and module references.</description>
    </item>
    
    <item>
      <title>Configuration management</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/configuration-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/configuration-management/</guid>
      <description>We recommend using configuration management tools to deploy Sensu in production and at scale.
Pin versions of Sensu-related software to ensure repeatable Sensu deployments. Ensure consistent configuration between Sensu backends. The configuration management tools listed here have well-defined Sensu modules to help you get started.
Ansible The Ansible role to deploy and manage Sensu Go is available in the Sensu Go Ansible Collection.
The Sensu Go Ansible Collection documentation site includes installation instructions, example playbooks, and module references.</description>
    </item>
    
    <item>
      <title>Configuration management</title>
      <link>/sensu-go/latest/operations/deploy-sensu/configuration-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/configuration-management/</guid>
      <description>We recommend using configuration management tools to deploy Sensu in production and at scale.
Pin versions of Sensu-related software to ensure repeatable Sensu deployments. Ensure consistent configuration between Sensu backends. The configuration management tools listed here have well-defined Sensu modules to help you get started.
Ansible The Ansible role to deploy and manage Sensu Go is available in the Sensu Go Ansible Collection.
The Sensu Go Ansible Collection documentation site includes installation instructions, example playbooks, and module references.</description>
    </item>
    
    <item>
      <title>Create limited service accounts</title>
      <link>/sensu-go/6.6/operations/control-access/create-limited-service-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/create-limited-service-accounts/</guid>
      <description>In some cases, you may want to allow an application or service to interact with Sensu resources. Use Sensu&amp;rsquo;s role-based access control (RBAC) to create and configure accounts that represent applications or services rather than individual human users. These limited service accounts give you fine-grained control of the access and permissions the application or service needs.
For example, you might develop a service that displays a high-level view of your webserver statuses based on an aggregate check.</description>
    </item>
    
    <item>
      <title>Create limited service accounts</title>
      <link>/sensu-go/6.7/operations/control-access/create-limited-service-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/create-limited-service-accounts/</guid>
      <description>In some cases, you may want to allow an application or service to interact with Sensu resources. Use Sensu&amp;rsquo;s role-based access control (RBAC) to create and configure accounts that represent applications or services rather than individual human users. These limited service accounts give you fine-grained control of the access and permissions the application or service needs.
For example, you might develop a service that displays a high-level view of your webserver statuses based on an aggregate check.</description>
    </item>
    
    <item>
      <title>Create limited service accounts</title>
      <link>/sensu-go/6.8/operations/control-access/create-limited-service-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/create-limited-service-accounts/</guid>
      <description>In some cases, you may want to allow an application or service to interact with Sensu resources. Use Sensu&amp;rsquo;s role-based access control (RBAC) to create and configure accounts that represent applications or services rather than individual human users. These limited service accounts give you fine-grained control of the access and permissions the application or service needs.
For example, you might develop a service that displays a high-level view of your webserver statuses based on an aggregate check.</description>
    </item>
    
    <item>
      <title>Create limited service accounts</title>
      <link>/sensu-go/latest/operations/control-access/create-limited-service-accounts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/create-limited-service-accounts/</guid>
      <description>In some cases, you may want to allow an application or service to interact with Sensu resources. Use Sensu&amp;rsquo;s role-based access control (RBAC) to create and configure accounts that represent applications or services rather than individual human users. These limited service accounts give you fine-grained control of the access and permissions the application or service needs.
For example, you might develop a service that displays a high-level view of your webserver statuses based on an aggregate check.</description>
    </item>
    
    <item>
      <title>Hooks reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/hooks/</guid>
      <description>Hooks are reusable commands the agent executes in response to a check result before creating an observability event. You can create, manage, and reuse hooks independently of checks. Hooks enrich observability event context by gathering relevant information based on the exit status code of a check (ex: 1). Hook commands can also receive JSON serialized Sensu client data via stdin.
Hook example You can use hooks to automate data gathering for incident triage.</description>
    </item>
    
    <item>
      <title>Hooks reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/hooks/</guid>
      <description>Hooks are reusable commands the agent executes in response to a check result before creating an observability event. You can create, manage, and reuse hooks independently of checks. Hooks enrich observability event context by gathering relevant information based on the exit status code of a check (ex: 1). Hook commands can also receive JSON serialized Sensu client data via stdin.
Hook example You can use hooks to automate data gathering for incident triage.</description>
    </item>
    
    <item>
      <title>Hooks reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/hooks/</guid>
      <description>Hooks are reusable commands the agent executes in response to a check result before creating an observability event. You can create, manage, and reuse hooks independently of checks. Hooks enrich observability event context by gathering relevant information based on the exit status code of a check (ex: 1). Hook commands can also receive JSON serialized Sensu client data via stdin.
Hook example You can use hooks to automate data gathering for incident triage.</description>
    </item>
    
    <item>
      <title>Hooks reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/hooks/</guid>
      <description>Hooks are reusable commands the agent executes in response to a check result before creating an observability event. You can create, manage, and reuse hooks independently of checks. Hooks enrich observability event context by gathering relevant information based on the exit status code of a check (ex: 1). Hook commands can also receive JSON serialized Sensu client data via stdin.
Hook example You can use hooks to automate data gathering for incident triage.</description>
    </item>
    
    <item>
      <title>License reference</title>
      <link>/sensu-go/6.6/operations/maintain-sensu/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/maintain-sensu/license/</guid>
      <description>Activate your commercial license If you haven&amp;rsquo;t already, install the backend, agent, and sensuctl and configure sensuctl.
Log in to your Sensu account at account.sensu.io and click Download license to download your license file.
Save your license to a file such as sensu_license.yml or sensu_license.json. With the license file downloaded and saved to a file, you can activate your license with sensuctl or the /license API.
NOTE: For clustered configurations, you only need to activate your license for one of the backends within the cluster.</description>
    </item>
    
    <item>
      <title>License reference</title>
      <link>/sensu-go/6.7/operations/maintain-sensu/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/maintain-sensu/license/</guid>
      <description>Activate your commercial license If you haven&amp;rsquo;t already, install the backend, agent, and sensuctl and configure sensuctl.
Log in to your Sensu account at account.sensu.io and click Download license to download your license file.
Save your license to a file such as sensu_license.yml or sensu_license.json. With the license file downloaded and saved to a file, you can activate your license with sensuctl or the /license API.
NOTE: For clustered configurations, you only need to activate your license for one of the backends within the cluster.</description>
    </item>
    
    <item>
      <title>License reference</title>
      <link>/sensu-go/6.8/operations/maintain-sensu/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/maintain-sensu/license/</guid>
      <description>Activate your commercial license If you haven&amp;rsquo;t already, install the backend, agent, and sensuctl and configure sensuctl.
Log in to your Sensu account at account.sensu.io and click Download license to download your license file.
Save your license to a file such as sensu_license.yml or sensu_license.json. With the license file downloaded and saved to a file, you can activate your license with sensuctl or the /license API.
NOTE: For clustered configurations, you only need to activate your license for one of the backends within the cluster.</description>
    </item>
    
    <item>
      <title>License reference</title>
      <link>/sensu-go/latest/operations/maintain-sensu/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/maintain-sensu/license/</guid>
      <description>Activate your commercial license If you haven&amp;rsquo;t already, install the backend, agent, and sensuctl and configure sensuctl.
Log in to your Sensu account at account.sensu.io and click Download license to download your license file.
Save your license to a file such as sensu_license.yml or sensu_license.json. With the license file downloaded and saved to a file, you can activate your license with sensuctl or the /license API.
NOTE: For clustered configurations, you only need to activate your license for one of the backends within the cluster.</description>
    </item>
    
    <item>
      <title>Pipelines reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/pipelines/</guid>
      <description>IMPORTANT: The pipelines described on this page are different from the resources you can create and manage with the enterprise/pipeline/v1 API. The enterprise/pipeline/v1 API allows you to create and manage resources that can only be used in pipelines rather than pipelines themselves.
Read the Sumo Logic metrics handlers reference and TCP stream handlers reference for more information about enterprise pipeline resources.
Sensu executes pipelines during the process stage of the observability pipeline.</description>
    </item>
    
    <item>
      <title>Pipelines reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/pipelines/</guid>
      <description>IMPORTANT: The pipelines described on this page are different from the resources you can create and manage with the enterprise/pipeline/v1 API. The enterprise/pipeline/v1 API allows you to create and manage resources that can only be used in pipelines rather than pipelines themselves.
Read the Sumo Logic metrics handlers reference and TCP stream handlers reference for more information about enterprise pipeline resources.
Sensu executes pipelines during the process stage of the observability pipeline.</description>
    </item>
    
    <item>
      <title>Pipelines reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/pipelines/</guid>
      <description>IMPORTANT: The pipelines described on this page are different from the resources you can create and manage with the enterprise/pipeline/v1 API. The enterprise/pipeline/v1 API allows you to create and manage resources that can only be used in pipelines rather than pipelines themselves.
Read the Sumo Logic metrics handlers reference and TCP stream handlers reference for more information about enterprise pipeline resources.
Sensu executes pipelines during the process stage of the observability pipeline.</description>
    </item>
    
    <item>
      <title>Pipelines reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/pipelines/</guid>
      <description>IMPORTANT: The pipelines described on this page are different from the resources you can create and manage with the enterprise/pipeline/v1 API. The enterprise/pipeline/v1 API allows you to create and manage resources that can only be used in pipelines rather than pipelines themselves.
Read the Sumo Logic metrics handlers reference and TCP stream handlers reference for more information about enterprise pipeline resources.
Sensu executes pipelines during the process stage of the observability pipeline.</description>
    </item>
    
    <item>
      <title>Plugins reference</title>
      <link>/sensu-go/6.6/plugins/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/plugins/</guid>
      <description>Sensu plugins provide executable scripts or other programs that you can use as Sensu checks, handlers, and mutators. Sensu plugins must comply with the following specification:
Accept input/data via stdin (handler and mutator plugins only) Optionally able to parse a JSON data payload (that is, observation data in an event) Output data to stdout or stderr Produce an exit status code to indicate state: 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0, 1, or 2 indicate an unknown or custom status Optionally able to parse command line arguments to modify plugin behavior Supported programming languages You can use any programming language that can satisfy the Sensu plugin specification requirements — which is nearly any programming language in the world — to write Sensu plugins.</description>
    </item>
    
    <item>
      <title>Plugins reference</title>
      <link>/sensu-go/6.7/plugins/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/plugins/</guid>
      <description>Sensu plugins provide executable scripts or other programs that you can use as Sensu checks, handlers, and mutators. Sensu plugins must comply with the following specification:
Accept input/data via stdin (handler and mutator plugins only) Optionally able to parse a JSON data payload (that is, observation data in an event) Output data to stdout or stderr Produce an exit status code to indicate state: 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0, 1, or 2 indicate an unknown or custom status Optionally able to parse command line arguments to modify plugin behavior Supported programming languages You can use any programming language that can satisfy the Sensu plugin specification requirements — which is nearly any programming language in the world — to write Sensu plugins.</description>
    </item>
    
    <item>
      <title>Plugins reference</title>
      <link>/sensu-go/6.8/plugins/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/plugins/</guid>
      <description>Sensu plugins provide executable scripts or other programs that you can use as Sensu checks, handlers, and mutators. Sensu plugins must comply with the following specification:
Accept input/data via stdin (handler and mutator plugins only) Optionally able to parse a JSON data payload (that is, observation data in an event) Output data to stdout or stderr Produce an exit status code to indicate state: 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0, 1, or 2 indicate an unknown or custom status Optionally able to parse command line arguments to modify plugin behavior Supported programming languages You can use any programming language that can satisfy the Sensu plugin specification requirements — which is nearly any programming language in the world — to write Sensu plugins.</description>
    </item>
    
    <item>
      <title>Plugins reference</title>
      <link>/sensu-go/latest/plugins/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/plugins/</guid>
      <description>Sensu plugins provide executable scripts or other programs that you can use as Sensu checks, handlers, and mutators. Sensu plugins must comply with the following specification:
Accept input/data via stdin (handler and mutator plugins only) Optionally able to parse a JSON data payload (that is, observation data in an event) Output data to stdout or stderr Produce an exit status code to indicate state: 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0, 1, or 2 indicate an unknown or custom status Optionally able to parse command line arguments to modify plugin behavior Supported programming languages You can use any programming language that can satisfy the Sensu plugin specification requirements — which is nearly any programming language in the world — to write Sensu plugins.</description>
    </item>
    
    <item>
      <title>Sensu query expressions reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-filter/sensu-query-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-filter/sensu-query-expressions/</guid>
      <description>Sensu query expressions (SQEs) are JavaScript-based expressions that provide additional functionality for using Sensu, like nested parameters and custom functions.
SQEs are defined in event filters, so they act in the context of determining whether a given event should be passed to the handler. SQEs always receive a single event and some information about that event, like event.timestamp or event.check.interval.
SQEs always return either true or false. They are evaluated by the Otto JavaScript VM as JavaScript programs.</description>
    </item>
    
    <item>
      <title>Sensu query expressions reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-filter/sensu-query-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-filter/sensu-query-expressions/</guid>
      <description>Sensu query expressions (SQEs) are JavaScript-based expressions that provide additional functionality for using Sensu, like nested parameters and custom functions.
SQEs are defined in event filters, so they act in the context of determining whether a given event should be passed to the handler. SQEs always receive a single event and some information about that event, like event.timestamp or event.check.interval.
SQEs always return either true or false. They are evaluated by the Otto JavaScript VM as JavaScript programs.</description>
    </item>
    
    <item>
      <title>Sensu query expressions reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-filter/sensu-query-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-filter/sensu-query-expressions/</guid>
      <description>Sensu query expressions (SQEs) are JavaScript-based expressions that provide additional functionality for using Sensu, like nested parameters and custom functions.
SQEs are defined in event filters, so they act in the context of determining whether a given event should be passed to the handler. SQEs always receive a single event and some information about that event, like event.timestamp or event.check.interval.
SQEs always return either true or false. They are evaluated by the Otto JavaScript VM as JavaScript programs.</description>
    </item>
    
    <item>
      <title>Sensu query expressions reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-filter/sensu-query-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-filter/sensu-query-expressions/</guid>
      <description>Sensu query expressions (SQEs) are JavaScript-based expressions that provide additional functionality for using Sensu, like nested parameters and custom functions.
SQEs are defined in event filters, so they act in the context of determining whether a given event should be passed to the handler. SQEs always receive a single event and some information about that event, like event.timestamp or event.check.interval.
SQEs always return either true or false. They are evaluated by the Otto JavaScript VM as JavaScript programs.</description>
    </item>
    
    <item>
      <title>Set environment variables with sensuctl</title>
      <link>/sensu-go/6.6/sensuctl/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensuctl/environment-variables/</guid>
      <description>Sensu allows you to set sensuctl environment variables for a single sensuctl command or with sensuctl configure. You can also export and set environment variables on your system with sensuctl env.
These environment variables are alternatives to configuration flags like the sensuctl global flags and sensuctl configure flags.
Setting sensuctl options as environment variables instead of using flags offers the following advantages:
Use environment variables to avoid exposing sensitive information like your API key and other security credentials.</description>
    </item>
    
    <item>
      <title>Set environment variables with sensuctl</title>
      <link>/sensu-go/6.7/sensuctl/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensuctl/environment-variables/</guid>
      <description>Sensu allows you to set sensuctl environment variables for a single sensuctl command or with sensuctl configure. You can also export and set environment variables on your system with sensuctl env.
These environment variables are alternatives to configuration flags like the sensuctl global flags and sensuctl configure flags.
Setting sensuctl options as environment variables instead of using flags offers the following advantages:
Use environment variables to avoid exposing sensitive information like your API key and other security credentials.</description>
    </item>
    
    <item>
      <title>Set environment variables with sensuctl</title>
      <link>/sensu-go/6.8/sensuctl/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensuctl/environment-variables/</guid>
      <description>Sensu allows you to set sensuctl environment variables for a single sensuctl command or with sensuctl configure. You can also export and set environment variables on your system with sensuctl env.
These environment variables are alternatives to configuration flags like the sensuctl global flags and sensuctl configure flags.
Setting sensuctl options as environment variables instead of using flags offers the following advantages:
Use environment variables to avoid exposing sensitive information like your API key and other security credentials.</description>
    </item>
    
    <item>
      <title>Set environment variables with sensuctl</title>
      <link>/sensu-go/latest/sensuctl/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensuctl/environment-variables/</guid>
      <description>Sensu allows you to set sensuctl environment variables for a single sensuctl command or with sensuctl configure. You can also export and set environment variables on your system with sensuctl env.
These environment variables are alternatives to configuration flags like the sensuctl global flags and sensuctl configure flags.
Setting sensuctl options as environment variables instead of using flags offers the following advantages:
Use environment variables to avoid exposing sensitive information like your API key and other security credentials.</description>
    </item>
    
    <item>
      <title>Tessen reference</title>
      <link>/sensu-go/6.6/operations/monitor-sensu/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/monitor-sensu/tessen/</guid>
      <description>Tessen is the Sensu call-home service. It is enabled by default on Sensu backends. Tessen sends anonymized data about Sensu instances to Sensu Inc., including the version, cluster size, number of events processed, and number of resources created (like checks and handlers). We rely on Tessen data to understand how Sensu is being used and make informed decisions about product improvements. Read Announcing Tessen, the Sensu call-home service to learn more about Tessen.</description>
    </item>
    
    <item>
      <title>Tessen reference</title>
      <link>/sensu-go/6.7/operations/monitor-sensu/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/monitor-sensu/tessen/</guid>
      <description>Tessen is the Sensu call-home service. It is enabled by default on Sensu backends. Tessen sends anonymized data about Sensu instances to Sensu Inc., including the version, cluster size, number of events processed, and number of resources created (like checks and handlers). We rely on Tessen data to understand how Sensu is being used and make informed decisions about product improvements. Read Announcing Tessen, the Sensu call-home service to learn more about Tessen.</description>
    </item>
    
    <item>
      <title>Tessen reference</title>
      <link>/sensu-go/6.8/operations/monitor-sensu/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/monitor-sensu/tessen/</guid>
      <description>Tessen is the Sensu call-home service. It is enabled by default on Sensu backends. Tessen sends anonymized data about Sensu instances to Sensu Inc., including the version, cluster size, number of events processed, and number of resources created (like checks and handlers). We rely on Tessen data to understand how Sensu is being used and make informed decisions about product improvements. Read Announcing Tessen, the Sensu call-home service to learn more about Tessen.</description>
    </item>
    
    <item>
      <title>Tessen reference</title>
      <link>/sensu-go/latest/operations/monitor-sensu/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/monitor-sensu/tessen/</guid>
      <description>Tessen is the Sensu call-home service. It is enabled by default on Sensu backends. Tessen sends anonymized data about Sensu instances to Sensu Inc., including the version, cluster size, number of events processed, and number of resources created (like checks and handlers). We rely on Tessen data to understand how Sensu is being used and make informed decisions about product improvements. Read Announcing Tessen, the Sensu call-home service to learn more about Tessen.</description>
    </item>
    
    <item>
      <title>Health API</title>
      <link>/uchiwa/latest/api/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/api/health/</guid>
      <description>/health (GET) Returns both Uchiwa and Sensu API status
Response Example (Status 200) { &amp;#34;uchiwa&amp;#34;: &amp;#34;ok&amp;#34;, &amp;#34;sensu&amp;#34;: { &amp;#34;us-east-1&amp;#34;: { &amp;#34;output&amp;#34;: &amp;#34;ok&amp;#34; }, &amp;#34;us-west-1&amp;#34;:{ &amp;#34;output&amp;#34;: &amp;#34;ok&amp;#34; } } } Response Codes HTTP Status Code Reason 200 All the services are working 503 One of the service is unavailable /health/{service} Returns status of Sensu API or Uchiwa service.
Response Example (Status 200) { &amp;#34;us-east-1&amp;#34;: { &amp;#34;output&amp;#34;: &amp;#34;ok&amp;#34; }, &amp;#34;us-west-1&amp;#34;: { &amp;#34;output&amp;#34;: &amp;#34;ok&amp;#34; } } Parameters Parameter Description service name of the service; either sensu or uchiwa Response Codes HTTP Status Code Reason 200 The service is working 503 The service is unavailable </description>
    </item>
    
    <item>
      <title>Active Directory (AD) reference</title>
      <link>/sensu-go/6.6/operations/control-access/ad-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/ad-auth/</guid>
      <description>COMMERCIAL FEATURE: Access active directory (AD) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Microsoft Active Directory (AD) for single sign-on (SSO) authentication. The AD authentication provider is based on the LDAP authentication provider.</description>
    </item>
    
    <item>
      <title>Active Directory (AD) reference</title>
      <link>/sensu-go/6.7/operations/control-access/ad-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/ad-auth/</guid>
      <description>COMMERCIAL FEATURE: Access active directory (AD) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Microsoft Active Directory (AD) for single sign-on (SSO) authentication. The AD authentication provider is based on the LDAP authentication provider.</description>
    </item>
    
    <item>
      <title>Active Directory (AD) reference</title>
      <link>/sensu-go/6.8/operations/control-access/ad-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/ad-auth/</guid>
      <description>COMMERCIAL FEATURE: Access active directory (AD) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Microsoft Active Directory (AD) for single sign-on (SSO) authentication. The AD authentication provider is based on the LDAP authentication provider.</description>
    </item>
    
    <item>
      <title>Active Directory (AD) reference</title>
      <link>/sensu-go/latest/operations/control-access/ad-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/ad-auth/</guid>
      <description>COMMERCIAL FEATURE: Access active directory (AD) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for using Microsoft Active Directory (AD) for single sign-on (SSO) authentication. The AD authentication provider is based on the LDAP authentication provider.</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>/uchiwa/latest/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/uchiwa/latest/contributing/</guid>
      <description>Installation Backend Follow these instructions for the Go backend.
Frontend Optional. If you wish to modify the frontend components, you&amp;rsquo;ll need to follow these additional instructions:
Clone the uchiwa-web repository: git clone git@github.com:sensu/uchiwa-web.git &amp;amp;&amp;amp; cd uchiwa-web Install third-party libraries: npm install # Standard user npm install --unsafe-perm # Root user Create a global link for uchiwa-web: bower link Move to your uchiwa repository directory: cd $GOPATH/src/github.com/sensu/uchiwa Uninstall the uchiwa-web bower component if previously installed: bower uninstall uchiwa-web Point the bower component uchiwa-web to the previously created link bower link uchiwa-web Development Backend Run the program: go run uchiwa.</description>
    </item>
    
    <item>
      <title>Generate certificates for your Sensu installation</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/generate-certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/generate-certificates/</guid>
      <description>This guide explains how to generate the certificates you need to secure a Sensu cluster and its agents.
When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS). TLS uses encryption to provide security for communication between Sensu backends and agents as well as communication between human operators and the Sensu backend, such as web UI or sensuctl access.
Because reconfiguring an existing Sensu deployment from cleartext to TLS can be time-consuming, we recommend that you configure TLS for your backend from the very beginning.</description>
    </item>
    
    <item>
      <title>Generate certificates for your Sensu installation</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/generate-certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/generate-certificates/</guid>
      <description>This guide explains how to generate the certificates you need to secure a Sensu cluster and its agents.
When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS). TLS uses encryption to provide security for communication between Sensu backends and agents as well as communication between human operators and the Sensu backend, such as web UI or sensuctl access.
Because reconfiguring an existing Sensu deployment from cleartext to TLS can be time-consuming, we recommend that you configure TLS for your backend from the very beginning.</description>
    </item>
    
    <item>
      <title>Generate certificates for your Sensu installation</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/generate-certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/generate-certificates/</guid>
      <description>This guide explains how to generate the certificates you need to secure a Sensu cluster and its agents.
When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS). TLS uses encryption to provide security for communication between Sensu backends and agents as well as communication between human operators and the Sensu backend, such as web UI or sensuctl access.
Because reconfiguring an existing Sensu deployment from cleartext to TLS can be time-consuming, we recommend that you configure TLS for your backend from the very beginning.</description>
    </item>
    
    <item>
      <title>Generate certificates for your Sensu installation</title>
      <link>/sensu-go/latest/operations/deploy-sensu/generate-certificates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/generate-certificates/</guid>
      <description>This guide explains how to generate the certificates you need to secure a Sensu cluster and its agents.
When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS). TLS uses encryption to provide security for communication between Sensu backends and agents as well as communication between human operators and the Sensu backend, such as web UI or sensuctl access.
Because reconfiguring an existing Sensu deployment from cleartext to TLS can be time-consuming, we recommend that you configure TLS for your backend from the very beginning.</description>
    </item>
    
    <item>
      <title>Metrics reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/metrics/</guid>
      <description>Sensu Go offers built-in support for collecting and processing service and time-series metrics for your entire infrastructure.
In Sensu, metrics are an optional component of observation data in events. Sensu events may contain check execution results, metrics, or both. Certain inputs like the Sensu StatsD listener or patterns like the Prometheus collector pattern will create metrics-only events. Events can also include metrics from check output metric extraction.
Use Sensu handlers to process extracted metrics and route them to databases like Elasticsearch, InfluxDB, Grafana, and Graphite.</description>
    </item>
    
    <item>
      <title>Metrics reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/metrics/</guid>
      <description>Sensu Go offers built-in support for collecting and processing service and time-series metrics for your entire infrastructure.
In Sensu, metrics are an optional component of observation data in events. Sensu events may contain check execution results, metrics, or both. Certain inputs like the Sensu StatsD listener or patterns like the Prometheus collector pattern will create metrics-only events. Events can also include metrics from check output metric extraction.
Use Sensu handlers to process extracted metrics and route them to databases like Elasticsearch, InfluxDB, Grafana, and Graphite.</description>
    </item>
    
    <item>
      <title>Metrics reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/metrics/</guid>
      <description>Sensu Go offers built-in support for collecting and processing service and time-series metrics for your entire infrastructure.
In Sensu, metrics are an optional component of observation data in events. Sensu events may contain check execution results, metrics, or both. Certain inputs like the Sensu StatsD listener or patterns like the Prometheus collector pattern will create metrics-only events. Events can also include metrics from check output metric extraction.
Use Sensu handlers to process extracted metrics and route them to databases like Elasticsearch, InfluxDB, Grafana, and Graphite.</description>
    </item>
    
    <item>
      <title>Metrics reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/metrics/</guid>
      <description>Sensu Go offers built-in support for collecting and processing service and time-series metrics for your entire infrastructure.
In Sensu, metrics are an optional component of observation data in events. Sensu events may contain check execution results, metrics, or both. Certain inputs like the Sensu StatsD listener or patterns like the Prometheus collector pattern will create metrics-only events. Events can also include metrics from check output metric extraction.
Use Sensu handlers to process extracted metrics and route them to databases like Elasticsearch, InfluxDB, Grafana, and Graphite.</description>
    </item>
    
    <item>
      <title>Use sensuctl with Bonsai</title>
      <link>/sensu-go/6.6/sensuctl/sensuctl-bonsai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/sensuctl/sensuctl-bonsai/</guid>
      <description>Sensuctl supports installing dynamic runtime asset definitions directly from Bonsai, the Sensu asset hub, and checking your Sensu backend for outdated dynamic runtime assets. You can also use sensuctl command to install, execute, list, and delete commands from Bonsai or a URL.
Install dynamic runtime asset definitions To install a dynamic runtime asset definition directly from Bonsai, use sensuctl asset add &amp;lt;ASSET_NAME&amp;gt;:&amp;lt;ASSET_VERSION&amp;gt;. Replace &amp;lt;ASSET_NAME&amp;gt; with the complete name of the dynamic runtime asset from Bonsai.</description>
    </item>
    
    <item>
      <title>Use sensuctl with Bonsai</title>
      <link>/sensu-go/6.7/sensuctl/sensuctl-bonsai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/sensuctl/sensuctl-bonsai/</guid>
      <description>Sensuctl supports installing dynamic runtime asset definitions directly from Bonsai, the Sensu asset hub, and checking your Sensu backend for outdated dynamic runtime assets. You can also use sensuctl command to install, execute, list, and delete commands from Bonsai or a URL.
Install dynamic runtime asset definitions To install a dynamic runtime asset definition directly from Bonsai, use sensuctl asset add &amp;lt;ASSET_NAME&amp;gt;:&amp;lt;ASSET_VERSION&amp;gt;. Replace &amp;lt;ASSET_NAME&amp;gt; with the complete name of the dynamic runtime asset from Bonsai.</description>
    </item>
    
    <item>
      <title>Use sensuctl with Bonsai</title>
      <link>/sensu-go/6.8/sensuctl/sensuctl-bonsai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/sensuctl/sensuctl-bonsai/</guid>
      <description>Sensuctl supports installing dynamic runtime asset definitions directly from Bonsai, the Sensu asset hub, and checking your Sensu backend for outdated dynamic runtime assets. You can also use sensuctl command to install, execute, list, and delete commands from Bonsai or a URL.
Install dynamic runtime asset definitions To install a dynamic runtime asset definition directly from Bonsai, use sensuctl asset add &amp;lt;ASSET_NAME&amp;gt;:&amp;lt;ASSET_VERSION&amp;gt;. Replace &amp;lt;ASSET_NAME&amp;gt; with the complete name of the dynamic runtime asset from Bonsai.</description>
    </item>
    
    <item>
      <title>Use sensuctl with Bonsai</title>
      <link>/sensu-go/latest/sensuctl/sensuctl-bonsai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/sensuctl/sensuctl-bonsai/</guid>
      <description>Sensuctl supports installing dynamic runtime asset definitions directly from Bonsai, the Sensu asset hub, and checking your Sensu backend for outdated dynamic runtime assets. You can also use sensuctl command to install, execute, list, and delete commands from Bonsai or a URL.
Install dynamic runtime asset definitions To install a dynamic runtime asset definition directly from Bonsai, use sensuctl asset add &amp;lt;ASSET_NAME&amp;gt;:&amp;lt;ASSET_VERSION&amp;gt;. Replace &amp;lt;ASSET_NAME&amp;gt; with the complete name of the dynamic runtime asset from Bonsai.</description>
    </item>
    
    <item>
      <title>Lightweight Directory Access Protocol (LDAP) reference</title>
      <link>/sensu-go/6.6/operations/control-access/ldap-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/ldap-auth/</guid>
      <description>COMMERCIAL FEATURE: Access Lightweight Directory Access Protocol (LDAP) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for a standards-compliant Lightweight Directory Access Protocol (LDAP) tool for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Lightweight Directory Access Protocol (LDAP) reference</title>
      <link>/sensu-go/6.7/operations/control-access/ldap-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/ldap-auth/</guid>
      <description>COMMERCIAL FEATURE: Access Lightweight Directory Access Protocol (LDAP) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for a standards-compliant Lightweight Directory Access Protocol (LDAP) tool for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Lightweight Directory Access Protocol (LDAP) reference</title>
      <link>/sensu-go/6.8/operations/control-access/ldap-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/ldap-auth/</guid>
      <description>COMMERCIAL FEATURE: Access Lightweight Directory Access Protocol (LDAP) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for a standards-compliant Lightweight Directory Access Protocol (LDAP) tool for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Lightweight Directory Access Protocol (LDAP) reference</title>
      <link>/sensu-go/latest/operations/control-access/ldap-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/ldap-auth/</guid>
      <description>COMMERCIAL FEATURE: Access Lightweight Directory Access Protocol (LDAP) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for a standards-compliant Lightweight Directory Access Protocol (LDAP) tool for single sign-on (SSO) authentication.</description>
    </item>
    
    <item>
      <title>Catalog integrations reference</title>
      <link>/sensu-go/6.7/catalog/catalog-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/catalog/catalog-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective observability. The contents of the official Sensu Catalog are periodically published with the Sensu Catalog API, which is hosted at https://catalog.</description>
    </item>
    
    <item>
      <title>Catalog integrations reference</title>
      <link>/sensu-go/6.8/catalog/catalog-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/catalog/catalog-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective observability. The contents of the official Sensu Catalog are periodically published with the Sensu Catalog API, which is hosted at https://catalog.</description>
    </item>
    
    <item>
      <title>Catalog integrations reference</title>
      <link>/sensu-go/latest/catalog/catalog-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/catalog/catalog-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Catalog and integrations in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Sensu Catalog is a collection of Sensu integrations that provide reference implementations for effective observability. The contents of the official Sensu Catalog are periodically published with the Sensu Catalog API, which is hosted at https://catalog.</description>
    </item>
    
    <item>
      <title>Install Sensu plugins</title>
      <link>/sensu-go/6.6/plugins/install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/install-plugins/</guid>
      <description>Extend Sensu&amp;rsquo;s functionality with plugins, which provide executables for performing status or metric checks, mutators for changing data to a desired format, and handlers for performing an action on a Sensu event.
Install plugins with dynamic runtime assets Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. To start using and deploying assets, read Use dynamic runtime assets to install plugins to become familiar with workflows that involve assets.</description>
    </item>
    
    <item>
      <title>Install Sensu plugins</title>
      <link>/sensu-go/6.7/plugins/install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/install-plugins/</guid>
      <description>Extend Sensu&amp;rsquo;s functionality with plugins, which provide executables for performing status or metric checks, mutators for changing data to a desired format, and handlers for performing an action on a Sensu event.
Install plugins with dynamic runtime assets Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. Read Use dynamic runtime assets to install plugins to become familiar with workflows that involve assets.
NOTE: Dynamic runtime assets are not required to use Sensu Go.</description>
    </item>
    
    <item>
      <title>Install Sensu plugins</title>
      <link>/sensu-go/6.8/plugins/install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/install-plugins/</guid>
      <description>Extend Sensu&amp;rsquo;s functionality with plugins, which provide executables for performing status or metric checks, mutators for changing data to a desired format, and handlers for performing an action on a Sensu event.
Install plugins with dynamic runtime assets Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. Read Use dynamic runtime assets to install plugins to become familiar with workflows that involve assets.
NOTE: Dynamic runtime assets are not required to use Sensu Go.</description>
    </item>
    
    <item>
      <title>Install Sensu plugins</title>
      <link>/sensu-go/latest/plugins/install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/install-plugins/</guid>
      <description>Extend Sensu&amp;rsquo;s functionality with plugins, which provide executables for performing status or metric checks, mutators for changing data to a desired format, and handlers for performing an action on a Sensu event.
Install plugins with dynamic runtime assets Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. Read Use dynamic runtime assets to install plugins to become familiar with workflows that involve assets.
NOTE: Dynamic runtime assets are not required to use Sensu Go.</description>
    </item>
    
    <item>
      <title>OpenID Connect 1.0 protocol (OIDC) reference</title>
      <link>/sensu-go/6.6/operations/control-access/oidc-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/oidc-auth/</guid>
      <description>COMMERCIAL FEATURE: Access OpenID Connect 1.0 protocol (OIDC) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for single sign-on (SSO) authentication using the OpenID Connect 1.0 protocol (OIDC) on top of the OAuth 2.</description>
    </item>
    
    <item>
      <title>OpenID Connect 1.0 protocol (OIDC) reference</title>
      <link>/sensu-go/6.7/operations/control-access/oidc-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/oidc-auth/</guid>
      <description>COMMERCIAL FEATURE: Access OpenID Connect 1.0 protocol (OIDC) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for single sign-on (SSO) authentication using the OpenID Connect 1.0 protocol (OIDC) on top of the OAuth 2.</description>
    </item>
    
    <item>
      <title>OpenID Connect 1.0 protocol (OIDC) reference</title>
      <link>/sensu-go/6.8/operations/control-access/oidc-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/oidc-auth/</guid>
      <description>COMMERCIAL FEATURE: Access OpenID Connect 1.0 protocol (OIDC) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for single sign-on (SSO) authentication using the OpenID Connect 1.0 protocol (OIDC) on top of the OAuth 2.</description>
    </item>
    
    <item>
      <title>OpenID Connect 1.0 protocol (OIDC) reference</title>
      <link>/sensu-go/latest/operations/control-access/oidc-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/oidc-auth/</guid>
      <description>COMMERCIAL FEATURE: Access OpenID Connect 1.0 protocol (OIDC) authentication for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu requires username and password authentication to access the web UI, API, and sensuctl command line tool.
In addition to the built-in basic authentication, Sensu offers commercial support for single sign-on (SSO) authentication using the OpenID Connect 1.0 protocol (OIDC) on top of the OAuth 2.</description>
    </item>
    
    <item>
      <title>Reduce alert fatigue with event filters</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-filter/reduce-alert-fatigue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-filter/reduce-alert-fatigue/</guid>
      <description>Sensu event filters allow you to filter events destined for one or more event handlers. Filters evaluate their expressions against the observation data in events to determine whether the event should be passed to an event handler.
Use event filters to customize alert policies, improve contact routing, eliminate notification noise from recurring events, and filter events from systems in pre-production environments.
In this guide, you&amp;rsquo;ll learn how to reduce alert fatigue by configuring an event filter named hourly.</description>
    </item>
    
    <item>
      <title>Reduce alert fatigue with event filters</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-filter/reduce-alert-fatigue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-filter/reduce-alert-fatigue/</guid>
      <description>Sensu event filters allow you to filter events destined for one or more event handlers. Filters evaluate their expressions against the observation data in events to determine whether the event should be passed to an event handler.
Use event filters to customize alert policies, improve contact routing, eliminate notification noise from recurring events, and filter events from systems in pre-production environments.
In this guide, you&amp;rsquo;ll learn how to reduce alert fatigue by configuring an event filter named hourly.</description>
    </item>
    
    <item>
      <title>Reduce alert fatigue with event filters</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-filter/reduce-alert-fatigue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-filter/reduce-alert-fatigue/</guid>
      <description>Sensu event filters allow you to filter events destined for one or more event handlers. Filters evaluate their expressions against the observation data in events to determine whether the event should be passed to an event handler.
Use event filters to customize alert policies, improve contact routing, eliminate notification noise from recurring events, and filter events from systems in pre-production environments.
In this guide, you&amp;rsquo;ll learn how to reduce alert fatigue by configuring an event filter named hourly.</description>
    </item>
    
    <item>
      <title>Reduce alert fatigue with event filters</title>
      <link>/sensu-go/latest/observability-pipeline/observe-filter/reduce-alert-fatigue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-filter/reduce-alert-fatigue/</guid>
      <description>Sensu event filters allow you to filter events destined for one or more event handlers. Filters evaluate their expressions against the observation data in events to determine whether the event should be passed to an event handler.
Use event filters to customize alert policies, improve contact routing, eliminate notification noise from recurring events, and filter events from systems in pre-production environments.
In this guide, you&amp;rsquo;ll learn how to reduce alert fatigue by configuring an event filter named hourly.</description>
    </item>
    
    <item>
      <title>Rule templates reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/rule-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/rule-templates/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including rule templates, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Rule templates are the resources that Sensu applies to service components for business service monitoring (BSM). A rule template applies to selections of events defined by a service component&amp;rsquo;s query. This selection of events is the rule&amp;rsquo;s input.</description>
    </item>
    
    <item>
      <title>Rule templates reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/rule-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/rule-templates/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including rule templates, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Rule templates are the resources that Sensu applies to service components for business service monitoring (BSM). A rule template applies to selections of events defined by a service component&amp;rsquo;s query. This selection of events is the rule&amp;rsquo;s input.</description>
    </item>
    
    <item>
      <title>Rule templates reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/rule-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/rule-templates/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including rule templates, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Rule templates are the resources that Sensu applies to service components for business service monitoring (BSM). A rule template applies to selections of events defined by a service component&amp;rsquo;s query. This selection of events is the rule&amp;rsquo;s input.</description>
    </item>
    
    <item>
      <title>Rule templates reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/rule-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/rule-templates/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including rule templates, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Rule templates are the resources that Sensu applies to service components for business service monitoring (BSM). A rule template applies to selections of events defined by a service component&amp;rsquo;s query. This selection of events is the rule&amp;rsquo;s input.</description>
    </item>
    
    <item>
      <title>Secure Sensu</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/secure-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/secure-sensu/</guid>
      <description>As with any piece of software, it is critical to minimize any attack surface the software exposes. Sensu is no different.
This reference describes the components you need to secure to make Sensu production-ready, including etcd peer communication, the Sensu API and web UI, and Sensu agent-to-server communication. It also describes agent mutual transport layer security (mTLS) authentication, which is required for secrets management.
Before you can secure Sensu, you must generate the certificates you will need.</description>
    </item>
    
    <item>
      <title>Secure Sensu</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/secure-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/secure-sensu/</guid>
      <description>As with any piece of software, it is critical to minimize any attack surface the software exposes. Sensu is no different.
This reference describes the components you need to secure to make Sensu production-ready, including etcd peer communication, the Sensu API and web UI, and Sensu agent-to-server communication. It also describes agent mutual transport layer security (mTLS) authentication, which is required for secrets management.
Before you can secure Sensu, you must generate the certificates you will need.</description>
    </item>
    
    <item>
      <title>Secure Sensu</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/secure-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/secure-sensu/</guid>
      <description>As with any piece of software, it is critical to minimize any attack surface the software exposes. Sensu is no different.
This reference describes the components you need to secure to make Sensu production-ready, including etcd peer communication, the Sensu API and web UI, and Sensu agent-to-server communication. It also describes agent mutual transport layer security (mTLS) authentication, which is required for secrets management.
Before you can secure Sensu, you must generate the certificates you will need.</description>
    </item>
    
    <item>
      <title>Secure Sensu</title>
      <link>/sensu-go/latest/operations/deploy-sensu/secure-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/secure-sensu/</guid>
      <description>As with any piece of software, it is critical to minimize any attack surface the software exposes. Sensu is no different.
This reference describes the components you need to secure to make Sensu production-ready, including etcd peer communication, the Sensu API and web UI, and Sensu agent-to-server communication. It also describes agent mutual transport layer security (mTLS) authentication, which is required for secrets management.
Before you can secure Sensu, you must generate the certificates you will need.</description>
    </item>
    
    <item>
      <title>Silencing reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/silencing/</guid>
      <description>Sensu&amp;rsquo;s silencing capability allows you to suppress event handler execution on an ad hoc basis so you can plan maintenance and reduce alert fatigue. Silences are created on an ad hoc basis using sensuctl, the web UI, and the core/v2/silenced API endpoints.
Successfully created silencing entries are assigned a name in the format $SUBSCRIPTION:$CHECK, where $SUBSCRIPTION is the name of a Sensu entity subscription and $CHECK is the name of a Sensu check.</description>
    </item>
    
    <item>
      <title>Silencing reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/silencing/</guid>
      <description>Sensu&amp;rsquo;s silencing capability allows you to suppress event handler execution on an ad hoc basis so you can plan maintenance and reduce alert fatigue. Silences are created on an ad hoc basis using sensuctl, the web UI, and the core/v2/silenced API endpoints.
Successfully created silencing entries are assigned a name in the format $SUBSCRIPTION:$CHECK, where $SUBSCRIPTION is the name of a Sensu entity subscription and $CHECK is the name of a Sensu check.</description>
    </item>
    
    <item>
      <title>Silencing reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/silencing/</guid>
      <description>Sensu&amp;rsquo;s silencing capability allows you to suppress event handler execution on an ad hoc basis so you can plan maintenance and reduce alert fatigue. Silences are created on an ad hoc basis using sensuctl, the web UI, and the core/v2/silenced API endpoints.
Successfully created silencing entries are assigned a name in the format $SUBSCRIPTION:$CHECK, where $SUBSCRIPTION is the name of a Sensu entity subscription and $CHECK is the name of a Sensu check.</description>
    </item>
    
    <item>
      <title>Silencing reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/silencing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/silencing/</guid>
      <description>Sensu&amp;rsquo;s silencing capability allows you to suppress event handler execution on an ad hoc basis so you can plan maintenance and reduce alert fatigue. Silences are created on an ad hoc basis using sensuctl, the web UI, and the core/v2/silenced API endpoints.
Successfully created silencing entries are assigned a name in the format $SUBSCRIPTION:$CHECK, where $SUBSCRIPTION is the name of a Sensu entity subscription and $CHECK is the name of a Sensu check.</description>
    </item>
    
    <item>
      <title>Secure PostgreSQL</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/secure-postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/secure-postgres/</guid>
      <description>This guide describes how to secure communication between Sensu and the PostgreSQL event store using certificate authentication. When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS).
To learn how to secure communications between Sensu and its agents, read Generate certificates for your Sensu installation and Secure Sensu.
NOTE: This guide describes one option for securing communication between Sensu and PostgreSQL and is intended as a starting point.</description>
    </item>
    
    <item>
      <title>Secure PostgreSQL</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/secure-postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/secure-postgres/</guid>
      <description>This guide describes how to secure communication between Sensu and the PostgreSQL event store using certificate authentication. When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS).
To learn how to secure communications between Sensu and its agents, read Generate certificates for your Sensu installation and Secure Sensu.
NOTE: This guide describes one option for securing communication between Sensu and PostgreSQL and is intended as a starting point.</description>
    </item>
    
    <item>
      <title>Secure PostgreSQL</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/secure-postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/secure-postgres/</guid>
      <description>This guide describes how to secure communication between Sensu and the PostgreSQL event store using certificate authentication. When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS).
To learn how to secure communications between Sensu and its agents, read Generate certificates for your Sensu installation and Secure Sensu.
NOTE: This guide describes one option for securing communication between Sensu and PostgreSQL and is intended as a starting point.</description>
    </item>
    
    <item>
      <title>Secure PostgreSQL</title>
      <link>/sensu-go/latest/operations/deploy-sensu/secure-postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/secure-postgres/</guid>
      <description>This guide describes how to secure communication between Sensu and the PostgreSQL event store using certificate authentication. When deploying Sensu for use outside of a local development environment, you should secure it using transport layer security (TLS).
To learn how to secure communications between Sensu and its agents, read Generate certificates for your Sensu installation and Secure Sensu.
NOTE: This guide describes one option for securing communication between Sensu and PostgreSQL and is intended as a starting point.</description>
    </item>
    
    <item>
      <title>API keys reference</title>
      <link>/sensu-go/6.6/operations/control-access/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/apikeys/</guid>
      <description>API keys are long-lived authentication tokens that make it more convenient for Sensu plugins and other Sensu-adjacent applications to authenticate with the Sensu API. Unlike authentication tokens, API keys are persistent and do not need to be refreshed every 15 minutes.
The Sensu backend generates API keys, and you can provide them to applications that want to interact with the Sensu API.
Use the core/v2/apikeys API endpoints to create, retrieve, and delete API keys.</description>
    </item>
    
    <item>
      <title>API keys reference</title>
      <link>/sensu-go/6.7/operations/control-access/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/apikeys/</guid>
      <description>API keys are long-lived authentication tokens that make it more convenient for Sensu plugins and other Sensu-adjacent applications to authenticate with the Sensu API. Unlike authentication tokens, API keys are persistent and do not need to be refreshed every 15 minutes.
The Sensu backend generates API keys, and you can provide them to applications that want to interact with the Sensu API.
Use the core/v2/apikeys API endpoints to create, retrieve, and delete API keys.</description>
    </item>
    
    <item>
      <title>API keys reference</title>
      <link>/sensu-go/6.8/operations/control-access/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/apikeys/</guid>
      <description>API keys are long-lived authentication tokens that make it more convenient for Sensu plugins and other Sensu-adjacent applications to authenticate with the Sensu API. Unlike authentication tokens, API keys are persistent and do not need to be refreshed every 15 minutes.
The Sensu backend generates API keys, and you can provide them to applications that want to interact with the Sensu API.
Use the core/v2/apikeys API endpoints to create, retrieve, and delete API keys.</description>
    </item>
    
    <item>
      <title>API keys reference</title>
      <link>/sensu-go/latest/operations/control-access/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/apikeys/</guid>
      <description>API keys are long-lived authentication tokens that make it more convenient for Sensu plugins and other Sensu-adjacent applications to authenticate with the Sensu API. Unlike authentication tokens, API keys are persistent and do not need to be refreshed every 15 minutes.
The Sensu backend generates API keys, and you can provide them to applications that want to interact with the Sensu API.
Use the core/v2/apikeys API endpoints to create, retrieve, and delete API keys.</description>
    </item>
    
    <item>
      <title>Run a Sensu cluster</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/cluster-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/cluster-sensu/</guid>
      <description>To deploy Sensu for use outside of a local development environment, first decide whether you want to run a Sensu cluster.
A Sensu cluster is a group of at least three sensu-backend nodes, each connected to a shared database provided either by Sensu’s embedded etcd or an external etcd cluster. Creating a Sensu cluster ultimately configures an etcd cluster.
Clustering improves Sensu&amp;rsquo;s availability, reliability, and durability. It allows you to absorb the loss of a backend node, prevent data loss, and distribute the network load of agents.</description>
    </item>
    
    <item>
      <title>Run a Sensu cluster</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/cluster-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/cluster-sensu/</guid>
      <description>To deploy Sensu for use outside of a local development environment, first decide whether you want to run a Sensu cluster.
A Sensu cluster is a group of at least three sensu-backend nodes, each connected to a shared database provided either by Sensu’s embedded etcd or an external etcd cluster. Creating a Sensu cluster ultimately configures an etcd cluster.
Clustering improves Sensu&amp;rsquo;s availability, reliability, and durability. It allows you to absorb the loss of a backend node, prevent data loss, and distribute the network load of agents.</description>
    </item>
    
    <item>
      <title>Run a Sensu cluster</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/cluster-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/cluster-sensu/</guid>
      <description>To deploy Sensu for use outside of a local development environment, first decide whether you want to run a Sensu cluster.
A Sensu cluster is a group of at least three sensu-backend nodes, each connected to a shared database provided either by Sensu’s embedded etcd or an external etcd cluster. Creating a Sensu cluster ultimately configures an etcd cluster.
Clustering improves Sensu&amp;rsquo;s availability, reliability, and durability. It allows you to absorb the loss of a backend node, prevent data loss, and distribute the network load of agents.</description>
    </item>
    
    <item>
      <title>Run a Sensu cluster</title>
      <link>/sensu-go/latest/operations/deploy-sensu/cluster-sensu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/cluster-sensu/</guid>
      <description>To deploy Sensu for use outside of a local development environment, first decide whether you want to run a Sensu cluster.
A Sensu cluster is a group of at least three sensu-backend nodes, each connected to a shared database provided either by Sensu’s embedded etcd or an external etcd cluster. Creating a Sensu cluster ultimately configures an etcd cluster.
Clustering improves Sensu&amp;rsquo;s availability, reliability, and durability. It allows you to absorb the loss of a backend node, prevent data loss, and distribute the network load of agents.</description>
    </item>
    
    <item>
      <title>Search in the web UI</title>
      <link>/sensu-go/6.6/web-ui/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/search/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI, basic and advanced web UI searching, and saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu web UI includes basic search and filtering functions you can use to build customized views of your Sensu resources. Sensu also supports advanced web UI searches based on a wider range of resource attributes and custom labels as a commercial feature.</description>
    </item>
    
    <item>
      <title>Search in the web UI</title>
      <link>/sensu-go/6.7/web-ui/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/search/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI, basic and advanced web UI searching, and saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu web UI includes basic search and filtering functions you can use to build customized views of your Sensu resources. Sensu also supports advanced web UI searches based on a wider range of resource attributes and custom labels as a commercial feature.</description>
    </item>
    
    <item>
      <title>Search in the web UI</title>
      <link>/sensu-go/6.8/web-ui/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/search/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI, basic and advanced web UI searching, and saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu web UI includes basic search and filtering functions you can use to build customized views of your Sensu resources. Sensu also supports advanced web UI searches based on a wider range of resource attributes and custom labels as a commercial feature.</description>
    </item>
    
    <item>
      <title>Search in the web UI</title>
      <link>/sensu-go/latest/web-ui/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/search/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI, basic and advanced web UI searching, and saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu web UI includes basic search and filtering functions you can use to build customized views of your Sensu resources. Sensu also supports advanced web UI searches based on a wider range of resource attributes and custom labels as a commercial feature.</description>
    </item>
    
    <item>
      <title>Namespaces reference</title>
      <link>/sensu-go/6.6/operations/control-access/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/namespaces/</guid>
      <description>Namespaces partition resources within Sensu. Sensu entities, checks, handlers, and other namespaced resources belong to a single namespace.
Namespaces help teams use different resources (like entities, checks, and handlers) within Sensu and impose their own controls on those resources. A Sensu instance can have multiple namespaces, each with their own set of managed resources. Resource names must be unique within a namespace but do not need to be unique across namespaces.</description>
    </item>
    
    <item>
      <title>Namespaces reference</title>
      <link>/sensu-go/6.7/operations/control-access/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/namespaces/</guid>
      <description>Namespaces partition resources within Sensu. Sensu entities, checks, handlers, and other namespaced resources belong to a single namespace.
Namespaces help teams use different resources (like entities, checks, and handlers) within Sensu and impose their own controls on those resources. A Sensu instance can have multiple namespaces, each with their own set of managed resources. Resource names must be unique within a namespace but do not need to be unique across namespaces.</description>
    </item>
    
    <item>
      <title>Namespaces reference</title>
      <link>/sensu-go/6.8/operations/control-access/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/namespaces/</guid>
      <description>Namespaces partition resources within Sensu. Sensu entities, checks, handlers, and other namespaced resources belong to a single namespace.
Namespaces help teams use different resources (like entities, checks, and handlers) within Sensu and impose their own controls on those resources. A Sensu instance can have multiple namespaces, each with their own set of managed resources. Resource names must be unique within a namespace but do not need to be unique across namespaces.</description>
    </item>
    
    <item>
      <title>Namespaces reference</title>
      <link>/sensu-go/latest/operations/control-access/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/namespaces/</guid>
      <description>Namespaces partition resources within Sensu. Sensu entities, checks, handlers, and other namespaced resources belong to a single namespace.
Namespaces help teams use different resources (like entities, checks, and handlers) within Sensu and impose their own controls on those resources. A Sensu instance can have multiple namespaces, each with their own set of managed resources. Resource names must be unique within a namespace but do not need to be unique across namespaces.</description>
    </item>
    
    <item>
      <title>Catalog API</title>
      <link>/sensu-go/6.7/catalog/catalog-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/catalog/catalog-api/</guid>
      <description>COMMERCIAL FEATURE: Access the Catalog API in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Catalog API is a static API that the catalog-api command line tool generates from a repository of integrations, such as https://github.com/sensu/catalog. The Sensu web UI uses the generated API files to determine which integrations to display in the Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Catalog API</title>
      <link>/sensu-go/6.8/catalog/catalog-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/catalog/catalog-api/</guid>
      <description>COMMERCIAL FEATURE: Access the Catalog API in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Catalog API is a static API that the catalog-api command line tool generates from a repository of integrations, such as https://github.com/sensu/catalog. The Sensu web UI uses the generated API files to determine which integrations to display in the Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Catalog API</title>
      <link>/sensu-go/latest/catalog/catalog-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/catalog/catalog-api/</guid>
      <description>COMMERCIAL FEATURE: Access the Catalog API in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The Sensu Catalog is in public preview and is subject to change.
The Catalog API is a static API that the catalog-api command line tool generates from a repository of integrations, such as https://github.com/sensu/catalog. The Sensu web UI uses the generated API files to determine which integrations to display in the Sensu Catalog.</description>
    </item>
    
    <item>
      <title>Role-based access control (RBAC) reference</title>
      <link>/sensu-go/6.6/operations/control-access/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/control-access/rbac/</guid>
      <description>Sensu&amp;rsquo;s role-based access control (RBAC) helps different teams and projects share a Sensu instance. Use RBAC to specify the actions users are allowed to take against specific Sensu resources, within namespaces or across all namespaces, based on roles bound to the user or to one or more groups the user is a member of.
Roles create sets of permissions (for example, get and delete) tied to resource types. Cluster roles apply permissions across namespaces and include access to cluster-wide resources like users and namespaces.</description>
    </item>
    
    <item>
      <title>Role-based access control (RBAC) reference</title>
      <link>/sensu-go/6.7/operations/control-access/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/control-access/rbac/</guid>
      <description>Sensu&amp;rsquo;s role-based access control (RBAC) helps different teams and projects share a Sensu instance. Use RBAC to specify the actions users are allowed to take against specific Sensu resources, within namespaces or across all namespaces, based on roles bound to the user or to one or more groups the user is a member of.
Roles create sets of permissions (for example, get and delete) tied to resource types. Cluster roles apply permissions across namespaces and include access to cluster-wide resources like users and namespaces.</description>
    </item>
    
    <item>
      <title>Role-based access control (RBAC) reference</title>
      <link>/sensu-go/6.8/operations/control-access/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/control-access/rbac/</guid>
      <description>Sensu&amp;rsquo;s role-based access control (RBAC) helps different teams and projects share a Sensu instance. Use RBAC to specify the actions users are allowed to take against specific Sensu resources, within namespaces or across all namespaces, based on roles bound to the user or to one or more groups the user is a member of.
Roles create sets of permissions (for example, get and delete) tied to resource types. Cluster roles apply permissions across namespaces and include access to cluster-wide resources like users and namespaces.</description>
    </item>
    
    <item>
      <title>Role-based access control (RBAC) reference</title>
      <link>/sensu-go/latest/operations/control-access/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/control-access/rbac/</guid>
      <description>Sensu&amp;rsquo;s role-based access control (RBAC) helps different teams and projects share a Sensu instance. Use RBAC to specify the actions users are allowed to take against specific Sensu resources, within namespaces or across all namespaces, based on roles bound to the user or to one or more groups the user is a member of.
Roles create sets of permissions (for example, get and delete) tied to resource types. Cluster roles apply permissions across namespaces and include access to cluster-wide resources like users and namespaces.</description>
    </item>
    
    <item>
      <title>Multi-cluster visibility with federation</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/use-federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/use-federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s enterprise/federation/v1 API endpoints allow you to register external clusters, gain single-pane-of-glass visibility into the health of your infrastructure and services across multiple distinct Sensu instances within the web UI, and mirror your changes in one cluster to follower clusters. This is useful when you want to provide a single entry point for Sensu users who need to manage monitoring across multiple distinct physical data centers, cloud regions, or providers.</description>
    </item>
    
    <item>
      <title>Multi-cluster visibility with federation</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/use-federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/use-federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s enterprise/federation/v1 API endpoints allow you to register external clusters, gain single-pane-of-glass visibility into the health of your infrastructure and services across multiple distinct Sensu instances within the web UI, and mirror your changes in one cluster to follower clusters. This is useful when you want to provide a single entry point for Sensu users who need to manage monitoring across multiple distinct physical data centers, cloud regions, or providers.</description>
    </item>
    
    <item>
      <title>Multi-cluster visibility with federation</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/use-federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/use-federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s enterprise/federation/v1 API endpoints allow you to register external clusters, gain single-pane-of-glass visibility into the health of your infrastructure and services across multiple distinct Sensu instances within the web UI, and mirror your changes in one cluster to follower clusters. This is useful when you want to provide a single entry point for Sensu users who need to manage monitoring across multiple distinct physical data centers, cloud regions, or providers.</description>
    </item>
    
    <item>
      <title>Multi-cluster visibility with federation</title>
      <link>/sensu-go/latest/operations/deploy-sensu/use-federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/use-federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu&amp;rsquo;s enterprise/federation/v1 API endpoints allow you to register external clusters, gain single-pane-of-glass visibility into the health of your infrastructure and services across multiple distinct Sensu instances within the web UI, and mirror your changes in one cluster to follower clusters. This is useful when you want to provide a single entry point for Sensu users who need to manage monitoring across multiple distinct physical data centers, cloud regions, or providers.</description>
    </item>
    
    <item>
      <title>Route alerts with event filters</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-filter/route-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-filter/route-alerts/</guid>
      <description>Every alert has an ideal first responder: a team or person who knows how to triage and address the issue. Sensu contact routing lets you alert the right people using their preferred contact methods and reduce mean time to response and recovery.
In this guide, you&amp;rsquo;ll set up alerts for two teams (dev and ops) with separate Slack channels. Each team wants to be alerted only for the things they care about, using their team&amp;rsquo;s Slack channel.</description>
    </item>
    
    <item>
      <title>Route alerts with event filters</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-filter/route-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-filter/route-alerts/</guid>
      <description>Every alert has an ideal first responder: a team or person who knows how to triage and address the issue. Sensu contact routing lets you alert the right people using their preferred contact methods and reduce mean time to response and recovery.
In this guide, you&amp;rsquo;ll set up alerts for two teams (dev and ops) with separate Slack channels. Each team wants to be alerted only for the things they care about, using their team&amp;rsquo;s Slack channel.</description>
    </item>
    
    <item>
      <title>Route alerts with event filters</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-filter/route-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-filter/route-alerts/</guid>
      <description>Every alert has an ideal first responder: a team or person who knows how to triage and address the issue. Sensu contact routing lets you alert the right people using their preferred contact methods and reduce mean time to response and recovery.
In this guide, you&amp;rsquo;ll set up alerts for two teams (dev and ops) with separate Slack channels. Each team wants to be alerted only for the things they care about, using their team&amp;rsquo;s Slack channel.</description>
    </item>
    
    <item>
      <title>Route alerts with event filters</title>
      <link>/sensu-go/latest/observability-pipeline/observe-filter/route-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-filter/route-alerts/</guid>
      <description>Every alert has an ideal first responder: a team or person who knows how to triage and address the issue. Sensu contact routing lets you alert the right people using their preferred contact methods and reduce mean time to response and recovery.
In this guide, you&amp;rsquo;ll set up alerts for two teams (dev and ops) with separate Slack channels. Each team wants to be alerted only for the things they care about, using their team&amp;rsquo;s Slack channel.</description>
    </item>
    
    <item>
      <title>Service components reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/service-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/service-components/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including service components, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Service components are resources for defining and managing elements of a business service in business service monitoring. A service entity consists of a number of underlying service components. A service component is a meaningful selection of Sensu events for a business service, such as database monitoring events.</description>
    </item>
    
    <item>
      <title>Service components reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/service-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/service-components/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including service components, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Service components are resources for defining and managing elements of a business service in business service monitoring. A service entity consists of a number of underlying service components. A service component is a meaningful selection of Sensu events for a business service, such as database monitoring events.</description>
    </item>
    
    <item>
      <title>Service components reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/service-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/service-components/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including service components, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Service components are resources for defining and managing elements of a business service in business service monitoring. A service entity consists of a number of underlying service components. A service component is a meaningful selection of Sensu events for a business service, such as database monitoring events.</description>
    </item>
    
    <item>
      <title>Service components reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/service-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/service-components/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including service components, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Service components are resources for defining and managing elements of a business service in business service monitoring. A service entity consists of a number of underlying service components. A service component is a meaningful selection of Sensu events for a business service, such as database monitoring events.</description>
    </item>
    
    <item>
      <title>Sumo Logic metrics handlers reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access Sumo Logic metrics handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes Sumo Logic metrics handlers during the process stage of the observability pipeline.
Sumo Logic metrics handlers provide a persistent connection to transmit Sensu observability metrics to a Sumo Logic HTTP Logs and Metrics Source, which helps prevent the data bottlenecks you may experience with traditional handlers.</description>
    </item>
    
    <item>
      <title>Sumo Logic metrics handlers reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access Sumo Logic metrics handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes Sumo Logic metrics handlers during the process stage of the observability pipeline.
Sumo Logic metrics handlers provide a persistent connection to transmit Sensu observability metrics to a Sumo Logic HTTP Logs and Metrics Source, which helps prevent the data bottlenecks you may experience with traditional handlers.</description>
    </item>
    
    <item>
      <title>Sumo Logic metrics handlers reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access Sumo Logic metrics handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes Sumo Logic metrics handlers during the process stage of the observability pipeline.
Sumo Logic metrics handlers provide a persistent connection to transmit Sensu observability metrics to a Sumo Logic HTTP Logs and Metrics Source, which helps prevent the data bottlenecks you may experience with traditional handlers.</description>
    </item>
    
    <item>
      <title>Sumo Logic metrics handlers reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/sumo-logic-metrics-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access Sumo Logic metrics handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes Sumo Logic metrics handlers during the process stage of the observability pipeline.
Sumo Logic metrics handlers provide a persistent connection to transmit Sensu observability metrics to a Sumo Logic HTTP Logs and Metrics Source, which helps prevent the data bottlenecks you may experience with traditional handlers.</description>
    </item>
    
    <item>
      <title>Use dynamic runtime assets to install plugins</title>
      <link>/sensu-go/6.6/plugins/use-assets-to-install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/use-assets-to-install-plugins/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Read the asset reference for more information about dynamic runtime assets. This guide uses the sensu/sensu-pagerduty-handler dynamic runtime asset as an example.
NOTE: Dynamic runtime assets are not required to use Sensu Go. You can install Sensu plugins using the sensu-install tool or a configuration management solution.</description>
    </item>
    
    <item>
      <title>Use dynamic runtime assets to install plugins</title>
      <link>/sensu-go/6.7/plugins/use-assets-to-install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/use-assets-to-install-plugins/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Read the asset reference for more information about dynamic runtime assets. This guide uses the sensu/sensu-pagerduty-handler dynamic runtime asset as an example.
NOTE: Dynamic runtime assets are not required to use Sensu Go. You can install Sensu plugins using the sensu-install tool or a configuration management solution.</description>
    </item>
    
    <item>
      <title>Use dynamic runtime assets to install plugins</title>
      <link>/sensu-go/6.8/plugins/use-assets-to-install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/use-assets-to-install-plugins/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Read the asset reference for more information about dynamic runtime assets. This guide uses the sensu/sensu-pagerduty-handler dynamic runtime asset as an example.
NOTE: Dynamic runtime assets are not required to use Sensu Go. You can install Sensu plugins using the sensu-install tool or a configuration management solution.</description>
    </item>
    
    <item>
      <title>Use dynamic runtime assets to install plugins</title>
      <link>/sensu-go/latest/plugins/use-assets-to-install-plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/use-assets-to-install-plugins/</guid>
      <description>Dynamic runtime assets are shareable, reusable packages that make it easier to deploy Sensu plugins. You can use assets to provide the plugins, libraries, and runtimes you need to automate your monitoring workflows. Read the asset reference for more information about dynamic runtime assets. This guide uses the sensu/sensu-pagerduty-handler dynamic runtime asset as an example.
NOTE: Dynamic runtime assets are not required to use Sensu Go. You can install Sensu plugins using the sensu-install tool or a configuration management solution.</description>
    </item>
    
    <item>
      <title>Configure the web UI</title>
      <link>/sensu-go/6.6/web-ui/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Configure the web UI</title>
      <link>/sensu-go/6.7/web-ui/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Configure the web UI</title>
      <link>/sensu-go/6.8/web-ui/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Configure the web UI</title>
      <link>/sensu-go/latest/web-ui/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>TCP stream handlers reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/tcp-stream-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/tcp-stream-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access TCP stream handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes TCP stream handlers during the process stage of the observability pipeline.
Like traditional TCP handlers, TCP stream handlers send observability event data to TCP sockets for external services to consume. However, TCP stream handlers can help prevent the data bottlenecks you may experience with traditional TCP handlers.</description>
    </item>
    
    <item>
      <title>TCP stream handlers reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/tcp-stream-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/tcp-stream-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access TCP stream handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes TCP stream handlers during the process stage of the observability pipeline.
Like traditional TCP handlers, TCP stream handlers send observability event data to TCP sockets for external services to consume. However, TCP stream handlers can help prevent the data bottlenecks you may experience with traditional TCP handlers.</description>
    </item>
    
    <item>
      <title>TCP stream handlers reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/tcp-stream-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/tcp-stream-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access TCP stream handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes TCP stream handlers during the process stage of the observability pipeline.
Like traditional TCP handlers, TCP stream handlers send observability event data to TCP sockets for external services to consume. However, TCP stream handlers can help prevent the data bottlenecks you may experience with traditional TCP handlers.</description>
    </item>
    
    <item>
      <title>TCP stream handlers reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/tcp-stream-handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/tcp-stream-handlers/</guid>
      <description>COMMERCIAL FEATURE: Access TCP stream handlers in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu executes TCP stream handlers during the process stage of the observability pipeline.
Like traditional TCP handlers, TCP stream handlers send observability event data to TCP sockets for external services to consume. However, TCP stream handlers can help prevent the data bottlenecks you may experience with traditional TCP handlers.</description>
    </item>
    
    <item>
      <title>Aggregate metrics with the Sensu StatsD listener</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/aggregate-metrics-statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/aggregate-metrics-statsd/</guid>
      <description>Sensu implements a StatsD listener on its agents. StatsD is a daemon, tool, and protocol that you can use to send, collect, and aggregate custom metrics.
With StatsD, you can measure anything and everything. Collect custom metrics in your code and send them to a StatsD server to monitor applicaton performance. Monitor CPU, I/O, and network system levels with collection daemons. You can feed the metrics that StatsD aggregates to multiple different backends to store or visualize the data.</description>
    </item>
    
    <item>
      <title>Aggregate metrics with the Sensu StatsD listener</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/aggregate-metrics-statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/aggregate-metrics-statsd/</guid>
      <description>Sensu implements a StatsD listener on its agents. StatsD is a daemon, tool, and protocol that you can use to send, collect, and aggregate custom metrics.
With StatsD, you can measure anything and everything. Collect custom metrics in your code and send them to a StatsD server to monitor applicaton performance. Monitor CPU, I/O, and network system levels with collection daemons. You can feed the metrics that StatsD aggregates to multiple different backends to store or visualize the data.</description>
    </item>
    
    <item>
      <title>Aggregate metrics with the Sensu StatsD listener</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/aggregate-metrics-statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/aggregate-metrics-statsd/</guid>
      <description>Sensu implements a StatsD listener on its agents. StatsD is a daemon, tool, and protocol that you can use to send, collect, and aggregate custom metrics.
With StatsD, you can measure anything and everything. Collect custom metrics in your code and send them to a StatsD server to monitor applicaton performance. Monitor CPU, I/O, and network system levels with collection daemons. You can feed the metrics that StatsD aggregates to multiple different backends to store or visualize the data.</description>
    </item>
    
    <item>
      <title>Aggregate metrics with the Sensu StatsD listener</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/aggregate-metrics-statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/aggregate-metrics-statsd/</guid>
      <description>Sensu implements a StatsD listener on its agents. StatsD is a daemon, tool, and protocol that you can use to send, collect, and aggregate custom metrics.
With StatsD, you can measure anything and everything. Collect custom metrics in your code and send them to a StatsD server to monitor applicaton performance. Monitor CPU, I/O, and network system levels with collection daemons. You can feed the metrics that StatsD aggregates to multiple different backends to store or visualize the data.</description>
    </item>
    
    <item>
      <title>Subscriptions reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/subscriptions/</guid>
      <description>Sensu uses the publish/subscribe model of communication. The publish/subscribe model is powerful in ephemeral or elastic infrastructures, where the names and numbers of things change over time.
Because Sensu uses the publish/subscribe model, you can write checks even if you don&amp;rsquo;t know the specific names of the entities that should run the checks. Likewise, your entities do not need to know the specific names of the checks they should execute. The Sensu backend coordinates check execution for you by comparing the subscriptions you specify in your checks and entities to determine which entities should receive execution requests for a given check.</description>
    </item>
    
    <item>
      <title>Subscriptions reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/subscriptions/</guid>
      <description>Sensu uses the publish/subscribe model of communication. The publish/subscribe model is powerful in ephemeral or elastic infrastructures, where the names and numbers of things change over time.
Because Sensu uses the publish/subscribe model, you can write checks even if you don&amp;rsquo;t know the specific names of the entities that should run the checks. Likewise, your entities do not need to know the specific names of the checks they should execute. The Sensu backend coordinates check execution for you by comparing the subscriptions you specify in your checks and entities to determine which entities should receive execution requests for a given check.</description>
    </item>
    
    <item>
      <title>Subscriptions reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/subscriptions/</guid>
      <description>Sensu uses the publish/subscribe model of communication. The publish/subscribe model is powerful in ephemeral or elastic infrastructures, where the names and numbers of things change over time.
Because Sensu uses the publish/subscribe model, you can write checks even if you don&amp;rsquo;t know the specific names of the entities that should run the checks. Likewise, your entities do not need to know the specific names of the checks they should execute. The Sensu backend coordinates check execution for you by comparing the subscriptions you specify in your checks and entities to determine which entities should receive execution requests for a given check.</description>
    </item>
    
    <item>
      <title>Subscriptions reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/subscriptions/</guid>
      <description>Sensu uses the publish/subscribe model of communication. The publish/subscribe model is powerful in ephemeral or elastic infrastructures, where the names and numbers of things change over time.
Because Sensu uses the publish/subscribe model, you can write checks even if you don&amp;rsquo;t know the specific names of the entities that should run the checks. Likewise, your entities do not need to know the specific names of the checks they should execute. The Sensu backend coordinates check execution for you by comparing the subscriptions you specify in your checks and entities to determine which entities should receive execution requests for a given check.</description>
    </item>
    
    <item>
      <title>Build business service monitoring</title>
      <link>/sensu-go/6.6/web-ui/bsm-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/bsm-module/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
The Sensu web UI includes a module to help you build and configure business service monitoring (BSM) service entities with service components and rule templates.
Build a business service NOTE: BSM requires PostgreSQL to achieve high event throughput.</description>
    </item>
    
    <item>
      <title>Build business service monitoring</title>
      <link>/sensu-go/6.7/web-ui/bsm-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/bsm-module/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
The Sensu web UI includes a module to help you build and configure business service monitoring (BSM) service entities with service components and rule templates.
Build a business service NOTE: BSM requires PostgreSQL to achieve high event throughput.</description>
    </item>
    
    <item>
      <title>Build business service monitoring</title>
      <link>/sensu-go/6.8/web-ui/bsm-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/bsm-module/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
The Sensu web UI includes a module to help you build and configure business service monitoring (BSM) service entities with service components and rule templates.
Build a business service NOTE: BSM requires PostgreSQL to achieve high event throughput.</description>
    </item>
    
    <item>
      <title>Build business service monitoring</title>
      <link>/sensu-go/latest/web-ui/bsm-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/bsm-module/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI and business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
The Sensu web UI includes a module to help you build and configure business service monitoring (BSM) service entities with service components and rule templates.
Build a business service NOTE: BSM requires PostgreSQL to achieve high event throughput.</description>
    </item>
    
    <item>
      <title>Create handler templates</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/handler-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/handler-templates/</guid>
      <description>Sensu Go uses the Go template package, which allows you to generate text output that includes observation data from events. Sensu handler templates include HTML-formatted text and data derived from event attributes like event.entity.name and event.check.output. This allows you to add meaningful, actionable context to alerts.
For example, a template for a brief Slack alert might include information about the affected entity and its status, as well as a link to the organization&amp;rsquo;s playbook for resolving observability alerts:</description>
    </item>
    
    <item>
      <title>Create handler templates</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/handler-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/handler-templates/</guid>
      <description>Sensu Go uses the Go template package, which allows you to generate text output that includes observation data from events. Sensu handler templates include HTML-formatted text and data derived from event attributes like event.entity.name and event.check.output. This allows you to add meaningful, actionable context to alerts.
For example, a template for a brief Slack alert might include information about the affected entity and its status, as well as a link to the organization&amp;rsquo;s playbook for resolving observability alerts:</description>
    </item>
    
    <item>
      <title>Create handler templates</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/handler-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/handler-templates/</guid>
      <description>Sensu Go uses the Go template package, which allows you to generate text output that includes observation data from events. Sensu handler templates include HTML-formatted text and data derived from event attributes like event.entity.name and event.check.output. This allows you to add meaningful, actionable context to alerts.
For example, a template for a brief Slack alert might include information about the affected entity and its status, as well as a link to the organization&amp;rsquo;s playbook for resolving observability alerts:</description>
    </item>
    
    <item>
      <title>Create handler templates</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/handler-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/handler-templates/</guid>
      <description>Sensu Go uses the Go template package, which allows you to generate text output that includes observation data from events. Sensu handler templates include HTML-formatted text and data derived from event attributes like event.entity.name and event.check.output. This allows you to add meaningful, actionable context to alerts.
For example, a template for a brief Slack alert might include information about the affected entity and its status, as well as a link to the organization&amp;rsquo;s playbook for resolving observability alerts:</description>
    </item>
    
    <item>
      <title>Scale Sensu Go with Enterprise datastore</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/scale-event-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/scale-event-storage/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Go&amp;rsquo;s datastore feature enables scaling your monitoring to many thousands of events per second.
For each unique entity/check pair, Sensu records the latest event object in its datastore. By default, Sensu uses the embedded etcd datastore for event storage. The embedded etcd datastore helps you get started, but as the number of entities and checks in your Sensu implementation grows, so does the rate of events being written to the datastore.</description>
    </item>
    
    <item>
      <title>Scale Sensu Go with Enterprise datastore</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/scale-event-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/scale-event-storage/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Go&amp;rsquo;s datastore feature enables scaling your monitoring to many thousands of events per second.
For each unique entity/check pair, Sensu records the latest event object in its datastore. By default, Sensu uses the embedded etcd datastore for event storage. The embedded etcd datastore helps you get started, but as the number of entities and checks in your Sensu implementation grows, so does the rate of events being written to the datastore.</description>
    </item>
    
    <item>
      <title>Scale Sensu Go with Enterprise datastore</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/scale-event-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/scale-event-storage/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Go&amp;rsquo;s datastore feature enables scaling your monitoring to many thousands of events per second.
For each unique entity/check pair, Sensu records the latest event object in its datastore. By default, Sensu uses the embedded etcd datastore for event storage. The embedded etcd datastore helps you get started, but as the number of entities and checks in your Sensu implementation grows, so does the rate of events being written to the datastore.</description>
    </item>
    
    <item>
      <title>Scale Sensu Go with Enterprise datastore</title>
      <link>/sensu-go/latest/operations/deploy-sensu/scale-event-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/scale-event-storage/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Sensu Go&amp;rsquo;s datastore feature enables scaling your monitoring to many thousands of events per second.
For each unique entity/check pair, Sensu records the latest event object in its datastore. By default, Sensu uses the embedded etcd datastore for event storage. The embedded etcd datastore helps you get started, but as the number of entities and checks in your Sensu implementation grows, so does the rate of events being written to the datastore.</description>
    </item>
    
    <item>
      <title>Tokens reference</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/tokens/</guid>
      <description>Tokens are placeholders in a check definition that the agent replaces with entity information before executing the check. You can use tokens to fine-tune check attributes (like alert thresholds) on a per-entity level while reusing the check definition.
When a check is scheduled to be executed by an agent, it first goes through a token substitution step. The agent replaces any tokens with matching attributes from the entity definition, and then the check is executed.</description>
    </item>
    
    <item>
      <title>Tokens reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/tokens/</guid>
      <description>Tokens are placeholders in a check definition that the agent replaces with entity information before executing the check. You can use tokens to fine-tune check attributes (like alert thresholds) on a per-entity level while reusing the check definition.
When a check is scheduled to be executed by an agent, it first goes through a token substitution step. The agent replaces any tokens with matching attributes from the entity definition, and then the check is executed.</description>
    </item>
    
    <item>
      <title>Tokens reference</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/tokens/</guid>
      <description>Tokens are placeholders in a check definition that the agent replaces with entity information before executing the check. You can use tokens to fine-tune check attributes (like alert thresholds) on a per-entity level while reusing the check definition.
When a check is scheduled to be executed by an agent, it first goes through a token substitution step. The agent replaces any tokens with matching attributes from the entity definition, and then the check is executed.</description>
    </item>
    
    <item>
      <title>Tokens reference</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/tokens/</guid>
      <description>Tokens are placeholders in a check definition that the agent replaces with entity information before executing the check. You can use tokens to fine-tune check attributes (like alert thresholds) on a per-entity level while reusing the check definition.
When a check is scheduled to be executed by an agent, it first goes through a token substitution step. The agent replaces any tokens with matching attributes from the entity definition, and then the check is executed.</description>
    </item>
    
    <item>
      <title>Business service monitoring SDK</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) feature uses a dedicated SDK of JavaScript-based expressions that provide additional functionality. Use the BSM SDK to create custom JavaScript expressions with complex logic.
BSM SDK expressions are defined in rule templates, so they act in the context of determining whether aggregate data derived from a service component’s selection of Sensu Go events should trigger a rule-based event.</description>
    </item>
    
    <item>
      <title>Business service monitoring SDK</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) feature uses a dedicated SDK of JavaScript-based expressions that provide additional functionality. Use the BSM SDK to create custom JavaScript expressions with complex logic.
BSM SDK expressions are defined in rule templates, so they act in the context of determining whether aggregate data derived from a service component’s selection of Sensu Go events should trigger a rule-based event.</description>
    </item>
    
    <item>
      <title>Business service monitoring SDK</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) feature uses a dedicated SDK of JavaScript-based expressions that provide additional functionality. Use the BSM SDK to create custom JavaScript expressions with complex logic.
BSM SDK expressions are defined in rule templates, so they act in the context of determining whether aggregate data derived from a service component’s selection of Sensu Go events should trigger a rule-based event.</description>
    </item>
    
    <item>
      <title>Business service monitoring SDK</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) feature uses a dedicated SDK of JavaScript-based expressions that provide additional functionality. Use the BSM SDK to create custom JavaScript expressions with complex logic.
BSM SDK expressions are defined in rule templates, so they act in the context of determining whether aggregate data derived from a service component’s selection of Sensu Go events should trigger a rule-based event.</description>
    </item>
    
    <item>
      <title>Searches reference</title>
      <link>/sensu-go/6.6/web-ui/searches-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/searches-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
With the saved searches feature in the web UI, you can apply search parameters to your entities, events, and resources and save them to etcd in a namespaced resource named searches.
The saved searches feature is designed to be used directly in the web UI. However, you can create, retrieve, update, and delete saved searches with enterprise/searches/v1 API endpoints.</description>
    </item>
    
    <item>
      <title>Searches reference</title>
      <link>/sensu-go/6.7/web-ui/searches-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/searches-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
With the saved searches feature in the web UI, you can apply search parameters to your entities, events, and resources and save them to etcd in a namespaced resource named searches.
The saved searches feature is designed to be used directly in the web UI. However, you can create, retrieve, update, and delete saved searches with enterprise/searches/v1 API endpoints.</description>
    </item>
    
    <item>
      <title>Searches reference</title>
      <link>/sensu-go/6.8/web-ui/searches-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/searches-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
With the saved searches feature in the web UI, you can apply search parameters to your entities, events, and resources and save them to etcd in a namespaced resource named searches.
The saved searches feature is designed to be used directly in the web UI. However, you can create, retrieve, update, and delete saved searches with enterprise/searches/v1 API endpoints.</description>
    </item>
    
    <item>
      <title>Searches reference</title>
      <link>/sensu-go/latest/web-ui/searches-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/searches-reference/</guid>
      <description>COMMERCIAL FEATURE: Access the web UI in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
With the saved searches feature in the web UI, you can apply search parameters to your entities, events, and resources and save them to etcd in a namespaced resource named searches.
The saved searches feature is designed to be used directly in the web UI. However, you can create, retrieve, update, and delete saved searches with enterprise/searches/v1 API endpoints.</description>
    </item>
    
    <item>
      <title>Augment event data with check hooks</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</guid>
      <description>Check hooks are commands the Sensu agent runs in response to the result of check execution. The Sensu agent executes the appropriate configured hook command based on the exit status code of the check (for example, 1).
Check hooks allow you to automate data collection that operators would routinely perform to investigate observability alerts, which frees up precious operator time. Although you can use check hooks for rudimentary auto-remediation tasks, they are intended to enrich observability event data.</description>
    </item>
    
    <item>
      <title>Augment event data with check hooks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</guid>
      <description>Check hooks are commands the Sensu agent runs in response to the result of check execution. The Sensu agent executes the appropriate configured hook command based on the exit status code of the check (for example, 1).
Check hooks allow you to automate data collection that operators would routinely perform to investigate observability alerts, which frees up precious operator time. Although you can use check hooks for rudimentary auto-remediation tasks, they are intended to enrich observability event data.</description>
    </item>
    
    <item>
      <title>Augment event data with check hooks</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</guid>
      <description>Check hooks are commands the Sensu agent runs in response to the result of check execution. The Sensu agent executes the appropriate configured hook command based on the exit status code of the check (for example, 1).
Check hooks allow you to automate data collection that operators would routinely perform to investigate observability alerts, which frees up precious operator time. Although you can use check hooks for rudimentary auto-remediation tasks, they are intended to enrich observability event data.</description>
    </item>
    
    <item>
      <title>Augment event data with check hooks</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</guid>
      <description>Check hooks are commands the Sensu agent runs in response to the result of check execution. The Sensu agent executes the appropriate configured hook command based on the exit status code of the check (for example, 1).
Check hooks allow you to automate data collection that operators would routinely perform to investigate observability alerts, which frees up precious operator time. Although you can use check hooks for rudimentary auto-remediation tasks, they are intended to enrich observability event data.</description>
    </item>
    
    <item>
      <title>Plan maintenance windows with silencing</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/plan-maintenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/plan-maintenance/</guid>
      <description>As the Sensu backend processes check results, the server executes handlers to send alerts or otherwise relay observation events and metrics data to external services. Sensu’s built-in silencing capability allows you to suppress event handler execution as needed. This feature is useful when you&amp;rsquo;re planning maintenance.
You can configure silences to prevent handlers from taking actions based on check name, entity subscription, entity name, or a combination of these factors. In this guide, you&amp;rsquo;ll create a silenced entry for a specific entity and its associated check to prevent alerts and create a time window for maintenance.</description>
    </item>
    
    <item>
      <title>Plan maintenance windows with silencing</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/plan-maintenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/plan-maintenance/</guid>
      <description>As the Sensu backend processes check results, the server executes handlers to send alerts or otherwise relay observation events and metrics data to external services. Sensu’s built-in silencing capability allows you to suppress event handler execution as needed. This feature is useful when you&amp;rsquo;re planning maintenance.
You can configure silences to prevent handlers from taking actions based on check name, entity subscription, entity name, or a combination of these factors. In this guide, you&amp;rsquo;ll create a silenced entry for a specific entity and its associated check to prevent alerts and create a time window for maintenance.</description>
    </item>
    
    <item>
      <title>Plan maintenance windows with silencing</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/plan-maintenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/plan-maintenance/</guid>
      <description>As the Sensu backend processes check results, the server executes handlers to send alerts or otherwise relay observation events and metrics data to external services. Sensu’s built-in silencing capability allows you to suppress event handler execution as needed. This feature is useful when you&amp;rsquo;re planning maintenance.
You can configure silences to prevent handlers from taking actions based on check name, entity subscription, entity name, or a combination of these factors. In this guide, you&amp;rsquo;ll create a silenced entry for a specific entity and its associated check to prevent alerts and create a time window for maintenance.</description>
    </item>
    
    <item>
      <title>Plan maintenance windows with silencing</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/plan-maintenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/plan-maintenance/</guid>
      <description>As the Sensu backend processes check results, the server executes handlers to send alerts or otherwise relay observation events and metrics data to external services. Sensu’s built-in silencing capability allows you to suppress event handler execution as needed. This feature is useful when you&amp;rsquo;re planning maintenance.
You can configure silences to prevent handlers from taking actions based on check name, entity subscription, entity name, or a combination of these factors. In this guide, you&amp;rsquo;ll create a silenced entry for a specific entity and its associated check to prevent alerts and create a time window for maintenance.</description>
    </item>
    
    <item>
      <title>Web UI configuration reference</title>
      <link>/sensu-go/6.6/web-ui/webconfig-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/web-ui/webconfig-reference/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Web UI configuration reference</title>
      <link>/sensu-go/6.7/web-ui/webconfig-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/web-ui/webconfig-reference/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Web UI configuration reference</title>
      <link>/sensu-go/6.8/web-ui/webconfig-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/web-ui/webconfig-reference/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Web UI configuration reference</title>
      <link>/sensu-go/latest/web-ui/webconfig-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/web-ui/webconfig-reference/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
Web UI configuration allows you to define certain display options for the Sensu web UI, such as which web UI theme to use, the number of items to list on each page, and which URLs and linked images to expand. You can define a single custom web UI configuration to federate to all, some, or only one of your clusters.</description>
    </item>
    
    <item>
      <title>Collect Prometheus metrics with Sensu</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/prometheus-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/prometheus-metrics/</guid>
      <description>The Prometheus ecosystem contains a number of actively maintained exporters, such as the node exporter for reporting hardware and operating system metrics or Google&amp;rsquo;s cAdvisor exporter for monitoring containers. These exporters expose metrics that Sensu can collect and route to one or more time-series databases. Sensu and Prometheus can run in parallel, complementing each other and making use of environments where Prometheus is already deployed.
You can use the sensu/sensu-prometheus-collector dynamic runtime asset to create checks that collect metrics from a Prometheus exporter or the Prometheus query API.</description>
    </item>
    
    <item>
      <title>Collect Prometheus metrics with Sensu</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/prometheus-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/prometheus-metrics/</guid>
      <description>The Prometheus ecosystem contains a number of actively maintained exporters, such as the node exporter for reporting hardware and operating system metrics or Google&amp;rsquo;s cAdvisor exporter for monitoring containers. These exporters expose metrics that Sensu can collect and route to one or more time-series databases. Sensu and Prometheus can run in parallel, complementing each other and making use of environments where Prometheus is already deployed.
You can use the sensu/sensu-prometheus-collector dynamic runtime asset to create checks that collect metrics from a Prometheus exporter or the Prometheus query API.</description>
    </item>
    
    <item>
      <title>Collect Prometheus metrics with Sensu</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/prometheus-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/prometheus-metrics/</guid>
      <description>The Prometheus ecosystem contains a number of actively maintained exporters, such as the node exporter for reporting hardware and operating system metrics or Google&amp;rsquo;s cAdvisor exporter for monitoring containers. These exporters expose metrics that Sensu can collect and route to one or more time-series databases. Sensu and Prometheus can run in parallel, complementing each other and making use of environments where Prometheus is already deployed.
You can use the sensu/sensu-prometheus-collector dynamic runtime asset to create checks that collect metrics from a Prometheus exporter or the Prometheus query API.</description>
    </item>
    
    <item>
      <title>Collect Prometheus metrics with Sensu</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/prometheus-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/prometheus-metrics/</guid>
      <description>The Prometheus ecosystem contains a number of actively maintained exporters, such as the node exporter for reporting hardware and operating system metrics or Google&amp;rsquo;s cAdvisor exporter for monitoring containers. These exporters expose metrics that Sensu can collect and route to one or more time-series databases. Sensu and Prometheus can run in parallel, complementing each other and making use of environments where Prometheus is already deployed.
You can use the sensu/sensu-prometheus-collector dynamic runtime asset to create checks that collect metrics from a Prometheus exporter or the Prometheus query API.</description>
    </item>
    
    <item>
      <title>Datastore reference</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/datastore/</guid>
      <description>Sensu stores the most recent event for each entity and check pair using either an etcd (default) or PostgreSQL database.
You can access observability event data with the Sensu web UI Events page, sensuctl event commands, and core/v2/events API endpoints. For longer retention of observability event data, integrate Sensu with a time-series database like InfluxDB or a searchable index like ElasticSearch or Splunk.
etcd and PostgreSQL version compatibility Sensu requires at least etcd 3.</description>
    </item>
    
    <item>
      <title>Datastore reference</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/datastore/</guid>
      <description>Sensu stores the most recent event for each entity and check pair using either an etcd (default) or PostgreSQL database.
You can access observability event data with the Sensu web UI Events page, sensuctl event commands, and core/v2/events API endpoints. For longer retention of observability event data, integrate Sensu with a time-series database like InfluxDB or a searchable index like ElasticSearch or Splunk.
etcd and PostgreSQL version compatibility Sensu requires at least etcd 3.</description>
    </item>
    
    <item>
      <title>Datastore reference</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/datastore/</guid>
      <description>Sensu stores the most recent event for each entity and check pair using either an etcd (default) or PostgreSQL database.
You can access observability event data with the Sensu web UI Events page, sensuctl event commands, and core/v2/events API endpoints. For longer retention of observability event data, integrate Sensu with a time-series database like InfluxDB or a searchable index like ElasticSearch or Splunk.
etcd and PostgreSQL version compatibility Sensu requires at least etcd 3.</description>
    </item>
    
    <item>
      <title>Datastore reference</title>
      <link>/sensu-go/latest/operations/deploy-sensu/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/datastore/</guid>
      <description>Sensu stores the most recent event for each entity and check pair using either an etcd (default) or PostgreSQL database.
You can access observability event data with the Sensu web UI Events page, sensuctl event commands, and core/v2/events API endpoints. For longer retention of observability event data, integrate Sensu with a time-series database like InfluxDB or a searchable index like ElasticSearch or Splunk.
etcd and PostgreSQL version compatibility Sensu requires at least etcd 3.</description>
    </item>
    
    <item>
      <title>Populate metrics in InfluxDB with handlers</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/populate-metrics-influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/populate-metrics-influxdb/</guid>
      <description>A Sensu event handler is an action the Sensu backend executes when a specific event occurs. In this guide, you&amp;rsquo;ll use a handler to populate the time-series database InfluxDB with Sensu observability event data.
Metrics can be collected from check output (in this guide, a check that generates Prometheus metrics) or the Sensu StatsD Server.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Populate metrics in InfluxDB with handlers</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/populate-metrics-influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/populate-metrics-influxdb/</guid>
      <description>PRO TIP: You can use the InfluxDB Metrics integration in the Sensu Catalog to send Sensu event data to InfluxDB instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
A Sensu event handler is an action the Sensu backend executes when a specific event occurs. In this guide, you&amp;rsquo;ll use a handler to populate the time-series database InfluxDB with Sensu observability event data.</description>
    </item>
    
    <item>
      <title>Populate metrics in InfluxDB with handlers</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/populate-metrics-influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/populate-metrics-influxdb/</guid>
      <description>PRO TIP: You can use the InfluxDB Metrics integration in the Sensu Catalog to send Sensu event data to InfluxDB instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
A Sensu event handler is an action the Sensu backend executes when a specific event occurs. In this guide, you&amp;rsquo;ll use a handler to populate the time-series database InfluxDB with Sensu observability event data.</description>
    </item>
    
    <item>
      <title>Populate metrics in InfluxDB with handlers</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/populate-metrics-influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/populate-metrics-influxdb/</guid>
      <description>PRO TIP: You can use the InfluxDB Metrics integration in the Sensu Catalog to send Sensu event data to InfluxDB instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
A Sensu event handler is an action the Sensu backend executes when a specific event occurs. In this guide, you&amp;rsquo;ll use a handler to populate the time-series database InfluxDB with Sensu observability event data.</description>
    </item>
    
    <item>
      <title>Etcd replicators reference</title>
      <link>/sensu-go/6.6/operations/deploy-sensu/etcdreplicators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/operations/deploy-sensu/etcdreplicators/</guid>
      <description>COMMERCIAL FEATURE: Access the EtcdReplicator datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: EtcdReplicator is a datatype in the enterprise/federation/v1 API, which is only accessible for users who have a cluster role that permits access to replication resources.
Etcd replicators allow you to manage role-based access control (RBAC) resources in one place and mirror the changes to follower clusters. The API sets up etcd mirrors for one-way key replication.</description>
    </item>
    
    <item>
      <title>Etcd replicators reference</title>
      <link>/sensu-go/6.7/operations/deploy-sensu/etcdreplicators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/operations/deploy-sensu/etcdreplicators/</guid>
      <description>COMMERCIAL FEATURE: Access the EtcdReplicator datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: EtcdReplicator is a datatype in the enterprise/federation/v1 API, which is only accessible for users who have a cluster role that permits access to replication resources.
Etcd replicators allow you to manage role-based access control (RBAC) resources in one place and mirror the changes to follower clusters. The API sets up etcd mirrors for one-way key replication.</description>
    </item>
    
    <item>
      <title>Etcd replicators reference</title>
      <link>/sensu-go/6.8/operations/deploy-sensu/etcdreplicators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/operations/deploy-sensu/etcdreplicators/</guid>
      <description>COMMERCIAL FEATURE: Access the EtcdReplicator datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: EtcdReplicator is a datatype in the enterprise/federation/v1 API, which is only accessible for users who have a cluster role that permits access to replication resources.
Etcd replicators allow you to manage role-based access control (RBAC) resources in one place and mirror the changes to follower clusters. The API sets up etcd mirrors for one-way key replication.</description>
    </item>
    
    <item>
      <title>Etcd replicators reference</title>
      <link>/sensu-go/latest/operations/deploy-sensu/etcdreplicators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/operations/deploy-sensu/etcdreplicators/</guid>
      <description>COMMERCIAL FEATURE: Access the EtcdReplicator datatype in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: EtcdReplicator is a datatype in the enterprise/federation/v1 API, which is only accessible for users who have a cluster role that permits access to replication resources.
Etcd replicators allow you to manage role-based access control (RBAC) resources in one place and mirror the changes to follower clusters. The API sets up etcd mirrors for one-way key replication.</description>
    </item>
    
    <item>
      <title>Collect service metrics with Sensu checks</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/collect-metrics-with-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/collect-metrics-with-checks/</guid>
      <description>Sensu checks are commands (or scripts) that the Sensu agent executes that output data and produce an exit code to indicate a state. If you are unfamiliar with checks, read the checks reference for details and examples. You can also learn how to configure monitoring checks in Monitor server resources.
This guide demonstrates how to use a check to extract service metrics for an NGINX webserver, with output in Nagios Performance Data format.</description>
    </item>
    
    <item>
      <title>Collect service metrics with Sensu checks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/collect-metrics-with-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/collect-metrics-with-checks/</guid>
      <description>PRO TIP: You can use the HTTP Service Monitoring (Local) integration in the Sensu Catalog to collect service metrics instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Sensu checks are commands (or scripts) that the Sensu agent executes that output data and produce an exit code to indicate a state. If you are unfamiliar with checks, read the checks reference for details and examples.</description>
    </item>
    
    <item>
      <title>Collect service metrics with Sensu checks</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/collect-metrics-with-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/collect-metrics-with-checks/</guid>
      <description>PRO TIP: You can use the HTTP Service Monitoring (Local) integration in the Sensu Catalog to collect service metrics instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Sensu checks are commands (or scripts) that the Sensu agent executes that output data and produce an exit code to indicate a state. If you are unfamiliar with checks, read the checks reference for details and examples.</description>
    </item>
    
    <item>
      <title>Collect service metrics with Sensu checks</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/collect-metrics-with-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/collect-metrics-with-checks/</guid>
      <description>PRO TIP: You can use the HTTP Service Monitoring (Local) integration in the Sensu Catalog to collect service metrics instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Sensu checks are commands (or scripts) that the Sensu agent executes that output data and produce an exit code to indicate a state. If you are unfamiliar with checks, read the checks reference for details and examples.</description>
    </item>
    
    <item>
      <title>Send data to Sumo Logic with Sensu</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/send-data-sumo-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/send-data-sumo-logic/</guid>
      <description>Follow this guide to create a pipeline that sends data from a Sensu check to Sumo Logic for long-term logs and metrics storage. Sensu checks are commands the Sensu agent executes that generate observability data in a status or metric event. Sensu pipelines define the event filters and actions the Sensu backend executes on the events.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Send data to Sumo Logic with Sensu</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/send-data-sumo-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/send-data-sumo-logic/</guid>
      <description>PRO TIP: You can use the Sumo Logic Analytics integration in the Sensu Catalog to send Sensu event data to Sumo Logic instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends data from a Sensu check to Sumo Logic for long-term logs and metrics storage.</description>
    </item>
    
    <item>
      <title>Send data to Sumo Logic with Sensu</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/send-data-sumo-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/send-data-sumo-logic/</guid>
      <description>PRO TIP: You can use the Sumo Logic Analytics integration in the Sensu Catalog to send Sensu event data to Sumo Logic instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends data from a Sensu check to Sumo Logic for long-term logs and metrics storage.</description>
    </item>
    
    <item>
      <title>Send data to Sumo Logic with Sensu</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/send-data-sumo-logic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/send-data-sumo-logic/</guid>
      <description>PRO TIP: You can use the Sumo Logic Analytics integration in the Sensu Catalog to send Sensu event data to Sumo Logic instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends data from a Sensu check to Sumo Logic for long-term logs and metrics storage.</description>
    </item>
    
    <item>
      <title>Monitor Business Services</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) provides high-level visibility into the current health of any number of your business services. Use BSM to monitor every component in your system with a top-down approach that produces meaningful alerts, prevents alert fatigue, and helps you focus on your core business services.</description>
    </item>
    
    <item>
      <title>Monitor Business Services</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) provides high-level visibility into the current health of any number of your business services. Use BSM to monitor every component in your system with a top-down approach that produces meaningful alerts, prevents alert fatigue, and helps you focus on your core business services.</description>
    </item>
    
    <item>
      <title>Monitor Business Services</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) provides high-level visibility into the current health of any number of your business services. Use BSM to monitor every component in your system with a top-down approach that produces meaningful alerts, prevents alert fatigue, and helps you focus on your core business services.</description>
    </item>
    
    <item>
      <title>Monitor Business Services</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) provides high-level visibility into the current health of any number of your business services. Use BSM to monitor every component in your system with a top-down approach that produces meaningful alerts, prevents alert fatigue, and helps you focus on your core business services.</description>
    </item>
    
    <item>
      <title>Send email alerts with a pipeline</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/send-email-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/send-email-alerts/</guid>
      <description>Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.
When you are using Sensu in production, events will come from a check or metric you configure. For this guide, you will create an ad hoc event that you can trigger manually to test your email handler.</description>
    </item>
    
    <item>
      <title>Send email alerts with a pipeline</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/send-email-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/send-email-alerts/</guid>
      <description>PRO TIP: You can use the Email Alerts integration in the Sensu Catalog to send email alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>Send email alerts with a pipeline</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/send-email-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/send-email-alerts/</guid>
      <description>PRO TIP: You can use the Email Alerts integration in the Sensu Catalog to send email alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>Send email alerts with a pipeline</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/send-email-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/send-email-alerts/</guid>
      <description>PRO TIP: You can use the Email Alerts integration in the Sensu Catalog to send email alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>Monitor server resources with checks</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-schedule/monitor-server-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-schedule/monitor-server-resources/</guid>
      <description>Sensu checks are commands or scripts the Sensu agent executes that output data and produce an exit code to indicate a state.
You can use checks to monitor server resources, services, and application health, such as remaining disk space and whether NGINX is running. This guide includes two check examples to help you monitor server resources: specifically, CPU usage and NGINX status.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Monitor server resources with checks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/monitor-server-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/monitor-server-resources/</guid>
      <description>Sensu checks are commands or scripts the Sensu agent executes that output data and produce an exit code to indicate a state.
You can use checks to monitor server resources, services, and application health, such as remaining disk space and whether NGINX is running. This guide includes two check examples to help you monitor server resources: specifically, CPU usage and NGINX status.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Monitor server resources with checks</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-schedule/monitor-server-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-schedule/monitor-server-resources/</guid>
      <description>Sensu checks are commands or scripts the Sensu agent executes that output data and produce an exit code to indicate a state.
You can use checks to monitor server resources, services, and application health, such as remaining disk space and whether NGINX is running. This guide includes two check examples to help you monitor server resources: specifically, CPU usage and NGINX status.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Monitor server resources with checks</title>
      <link>/sensu-go/latest/observability-pipeline/observe-schedule/monitor-server-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-schedule/monitor-server-resources/</guid>
      <description>Sensu checks are commands or scripts the Sensu agent executes that output data and produce an exit code to indicate a state.
You can use checks to monitor server resources, services, and application health, such as remaining disk space and whether NGINX is running. This guide includes two check examples to help you monitor server resources: specifically, CPU usage and NGINX status.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Send PagerDuty alerts with Sensu</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/send-pagerduty-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/send-pagerduty-alerts/</guid>
      <description>Follow this guide to create a pipeline that sends incident alerts to PagerDuty and add the pipeline to a check named check_cpu. Sensu checks are commands the Sensu agent executes that generate observability data in a status or metric event. Sensu pipelines define the event filters and actions the Sensu backend executes on the events.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Send PagerDuty alerts with Sensu</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/send-pagerduty-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/send-pagerduty-alerts/</guid>
      <description>PRO TIP: You can use the PagerDuty integration in the Sensu Catalog to send alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends incident alerts to PagerDuty and add the pipeline to a check named check_cpu. Sensu checks are commands the Sensu agent executes that generate observability data in a status or metric event.</description>
    </item>
    
    <item>
      <title>Send PagerDuty alerts with Sensu</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/send-pagerduty-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/send-pagerduty-alerts/</guid>
      <description>PRO TIP: You can use the PagerDuty integration in the Sensu Catalog to send alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends incident alerts to PagerDuty and add the pipeline to a check named check_cpu. Sensu checks are commands the Sensu agent executes that generate observability data in a status or metric event.</description>
    </item>
    
    <item>
      <title>Send PagerDuty alerts with Sensu</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/send-pagerduty-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/send-pagerduty-alerts/</guid>
      <description>PRO TIP: You can use the PagerDuty integration in the Sensu Catalog to send alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Follow this guide to create a pipeline that sends incident alerts to PagerDuty and add the pipeline to a check named check_cpu. Sensu checks are commands the Sensu agent executes that generate observability data in a status or metric event.</description>
    </item>
    
    <item>
      <title>Send Slack alerts with a pipeline</title>
      <link>/sensu-go/6.6/observability-pipeline/observe-process/send-slack-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/observability-pipeline/observe-process/send-slack-alerts/</guid>
      <description>Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.
This guide will help you send alerts to Slack in the channel monitoring by configuring a pipeline and adding it to a check named check_cpu.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
    <item>
      <title>Send Slack alerts with a pipeline</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-process/send-slack-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-process/send-slack-alerts/</guid>
      <description>PRO TIP: You can use the Slack Alerts integration in the Sensu Catalog to send Slack alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>Send Slack alerts with a pipeline</title>
      <link>/sensu-go/6.8/observability-pipeline/observe-process/send-slack-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/observability-pipeline/observe-process/send-slack-alerts/</guid>
      <description>PRO TIP: You can use the Slack Alerts integration in the Sensu Catalog to send Slack alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>Send Slack alerts with a pipeline</title>
      <link>/sensu-go/latest/observability-pipeline/observe-process/send-slack-alerts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/observability-pipeline/observe-process/send-slack-alerts/</guid>
      <description>PRO TIP: You can use the Slack Alerts integration in the Sensu Catalog to send Slack alerts based on Sensu event data instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Pipelines are Sensu resources composed of observation event processing workflows that include filters, mutators, and handlers. You can use pipelines to send email alerts, create or resolve incidents (in PagerDuty, for example), or store metrics in a time-series database like InfluxDB.</description>
    </item>
    
    <item>
      <title>/auth</title>
      <link>/sensu-go/6.6/api/other/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/other/auth/</guid>
      <description>Generate an access token and a refresh token The /auth API endpoint provides HTTP GET access to generate an access token and a refresh token using Sensu&amp;rsquo;s basic authentication.
The access and refresh tokens are JSON Web Tokens (JWTs) that Sensu issues to record the details of users&amp;rsquo; authenticated Sensu sessions. The backend digitally signs these tokens, and the tokens can&amp;rsquo;t be changed without invalidating the signature.
Example The following example queries the /auth API endpoint with a given username and password to determine whether the credentials are valid and retrieve an access token and a refresh token:</description>
    </item>
    
    <item>
      <title>/auth</title>
      <link>/sensu-go/6.7/api/other/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/other/auth/</guid>
      <description>Generate an access token and a refresh token The /auth API endpoint provides HTTP GET access to generate an access token and a refresh token using Sensu&amp;rsquo;s basic authentication.
The access and refresh tokens are JSON Web Tokens (JWTs) that Sensu issues to record the details of users&amp;rsquo; authenticated Sensu sessions. The backend digitally signs these tokens, and the tokens can&amp;rsquo;t be changed without invalidating the signature.
Example The following example queries the /auth API endpoint with a given username and password to determine whether the credentials are valid and retrieve an access token and a refresh token:</description>
    </item>
    
    <item>
      <title>/auth</title>
      <link>/sensu-go/6.8/api/other/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/auth/</guid>
      <description>Generate an access token and a refresh token The /auth API endpoint provides HTTP GET access to generate an access token and a refresh token using Sensu&amp;rsquo;s basic authentication.
The access and refresh tokens are JSON Web Tokens (JWTs) that Sensu issues to record the details of users&amp;rsquo; authenticated Sensu sessions. The backend digitally signs these tokens, and the tokens can&amp;rsquo;t be changed without invalidating the signature.
Example The following example queries the /auth API endpoint with a given username and password to determine whether the credentials are valid and retrieve an access token and a refresh token:</description>
    </item>
    
    <item>
      <title>/auth</title>
      <link>/sensu-go/latest/api/other/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/auth/</guid>
      <description>Generate an access token and a refresh token The /auth API endpoint provides HTTP GET access to generate an access token and a refresh token using Sensu&amp;rsquo;s basic authentication.
The access and refresh tokens are JSON Web Tokens (JWTs) that Sensu issues to record the details of users&amp;rsquo; authenticated Sensu sessions. The backend digitally signs these tokens, and the tokens can&amp;rsquo;t be changed without invalidating the signature.
Example The following example queries the /auth API endpoint with a given username and password to determine whether the credentials are valid and retrieve an access token and a refresh token:</description>
    </item>
    
    <item>
      <title>/health</title>
      <link>/sensu-go/6.6/api/other/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/other/health/</guid>
      <description>Get health data for your Sensu instance The /health API endpoint provides HTTP GET access to health data for your Sensu instance.
Example The following example demonstrates a GET request to the /health API endpoint:
curl -X GET \ http://127.0.0.1:8080/health The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu health data:
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 2882886652148554927, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;8923110df66458af&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 4255616344056076734, &amp;#34;member_id&amp;#34;: 2882886652148554927, &amp;#34;raft_term&amp;#34;: 26 }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } NOTE: If your Sensu instance is not configured to use a PostgreSQL datastore, the health payload will not include PostgresHealth.</description>
    </item>
    
    <item>
      <title>/health</title>
      <link>/sensu-go/6.7/api/other/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/other/health/</guid>
      <description>Get health data for your Sensu instance The /health API endpoint provides HTTP GET access to health data for your Sensu instance.
Example The following example demonstrates a GET request to the /health API endpoint:
curl -X GET \ http://127.0.0.1:8080/health The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu health data:
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 2882886652148554927, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;8923110df66458af&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 4255616344056076734, &amp;#34;member_id&amp;#34;: 2882886652148554927, &amp;#34;raft_term&amp;#34;: 26 }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } NOTE: If your Sensu instance is not configured to use a PostgreSQL datastore, the health payload will not include PostgresHealth.</description>
    </item>
    
    <item>
      <title>/health</title>
      <link>/sensu-go/6.8/api/other/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/health/</guid>
      <description>Get health data for your Sensu instance The /health API endpoint provides HTTP GET access to health data for your Sensu instance.
Example The following example demonstrates a GET request to the /health API endpoint:
curl -X GET \ http://127.0.0.1:8080/health The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu health data:
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 2882886652148554927, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;8923110df66458af&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 4255616344056076734, &amp;#34;member_id&amp;#34;: 2882886652148554927, &amp;#34;raft_term&amp;#34;: 26 }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } NOTE: If your Sensu instance is not configured to use a PostgreSQL datastore, the health payload will not include PostgresHealth.</description>
    </item>
    
    <item>
      <title>/health</title>
      <link>/sensu-go/latest/api/other/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/health/</guid>
      <description>Get health data for your Sensu instance The /health API endpoint provides HTTP GET access to health data for your Sensu instance.
Example The following example demonstrates a GET request to the /health API endpoint:
curl -X GET \ http://127.0.0.1:8080/health The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu health data:
{ &amp;#34;Alarms&amp;#34;: null, &amp;#34;ClusterHealth&amp;#34;: [ { &amp;#34;MemberID&amp;#34;: 2882886652148554927, &amp;#34;MemberIDHex&amp;#34;: &amp;#34;8923110df66458af&amp;#34;, &amp;#34;Name&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;Err&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;Healthy&amp;#34;: true } ], &amp;#34;Header&amp;#34;: { &amp;#34;cluster_id&amp;#34;: 4255616344056076734, &amp;#34;member_id&amp;#34;: 2882886652148554927, &amp;#34;raft_term&amp;#34;: 26 }, &amp;#34;PostgresHealth&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;my-postgres&amp;#34;, &amp;#34;Active&amp;#34;: false, &amp;#34;Healthy&amp;#34;: false } ] } NOTE: If your Sensu instance is not configured to use a PostgreSQL datastore, the health payload will not include PostgresHealth.</description>
    </item>
    
    <item>
      <title>/license</title>
      <link>/sensu-go/6.6/api/other/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/other/license/</guid>
      <description>NOTE: Requests to /license API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
For more information about commercial features designed for enterprises, read Get started with commercial features.
Get the active license configuration The /license API endpoint provides HTTP GET access to the active license configuration.</description>
    </item>
    
    <item>
      <title>/license</title>
      <link>/sensu-go/6.7/api/other/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/other/license/</guid>
      <description>NOTE: Requests to /license API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
For more information about commercial features designed for enterprises, read Get started with commercial features.
Get the active license configuration The /license API endpoint provides HTTP GET access to the active license configuration.</description>
    </item>
    
    <item>
      <title>/license</title>
      <link>/sensu-go/6.8/api/other/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/license/</guid>
      <description>NOTE: Requests to /license API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
For more information about commercial features designed for enterprises, read Get started with commercial features.
Get the active license configuration The /license API endpoint provides HTTP GET access to the active license configuration.</description>
    </item>
    
    <item>
      <title>/license</title>
      <link>/sensu-go/latest/api/other/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/license/</guid>
      <description>NOTE: Requests to /license API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
For more information about commercial features designed for enterprises, read Get started with commercial features.
Get the active license configuration The /license API endpoint provides HTTP GET access to the active license configuration.</description>
    </item>
    
    <item>
      <title>/metrics</title>
      <link>/sensu-go/6.6/api/other/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/other/metrics/</guid>
      <description>Get Sensu metrics The /metrics API endpoint provides HTTP GET access to internal Sensu metrics in Prometheus format, including embedded etcd, memory usage, garbage collection, and gRPC metrics.
Example The following example demonstrates a GET request to the /metrics API endpoint:
curl -X GET \ http://127.0.0.1:8080/metrics The request results in a successful HTTP/1.1 200 OK response and plaintext output that contains internal Sensu metrics:
# HELP etcd_debugging_mvcc_compact_revision The revision of the last compaction in store.</description>
    </item>
    
    <item>
      <title>/metrics</title>
      <link>/sensu-go/6.7/api/other/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/other/metrics/</guid>
      <description>Get Sensu metrics The /metrics API endpoint provides HTTP GET access to internal Sensu metrics in Prometheus format, including embedded etcd, memory usage, garbage collection, and gRPC metrics.
Example The following example demonstrates a GET request to the /metrics API endpoint:
curl -X GET \ http://127.0.0.1:8080/metrics The request results in a successful HTTP/1.1 200 OK response and plaintext output that contains internal Sensu metrics:
# HELP etcd_debugging_mvcc_compact_revision The revision of the last compaction in store.</description>
    </item>
    
    <item>
      <title>/metrics</title>
      <link>/sensu-go/6.8/api/other/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/metrics/</guid>
      <description>Get Sensu metrics The /metrics API endpoint provides HTTP GET access to internal Sensu metrics in Prometheus format, including embedded etcd, memory usage, garbage collection, and gRPC metrics.
Example The following example demonstrates a GET request to the /metrics API endpoint:
curl -X GET \ http://127.0.0.1:8080/metrics The request results in a successful HTTP/1.1 200 OK response and plaintext output that contains internal Sensu metrics:
# HELP etcd_debugging_mvcc_compact_revision The revision of the last compaction in store.</description>
    </item>
    
    <item>
      <title>/metrics</title>
      <link>/sensu-go/latest/api/other/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/metrics/</guid>
      <description>Get Sensu metrics The /metrics API endpoint provides HTTP GET access to internal Sensu metrics in Prometheus format, including embedded etcd, memory usage, garbage collection, and gRPC metrics.
Example The following example demonstrates a GET request to the /metrics API endpoint:
curl -X GET \ http://127.0.0.1:8080/metrics The request results in a successful HTTP/1.1 200 OK response and plaintext output that contains internal Sensu metrics:
# HELP etcd_debugging_mvcc_compact_revision The revision of the last compaction in store.</description>
    </item>
    
    <item>
      <title>/ready</title>
      <link>/sensu-go/6.8/api/other/ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/ready/</guid>
      <description>Get API readiness data for your Sensu instance The /ready API endpoint provides HTTP GET access to information about whether your Sensu instance is ready to serve API requests.
Example The following example demonstrates a GET request to the /ready API endpoint:
curl -X GET \ http://127.0.0.1:8080/ready The request results in a successful HTTP/1.1 200 OK response and a text response body:
ready If the backend configuration includes an api-serve-wait-time duration, the request will result in an HTTP/1.</description>
    </item>
    
    <item>
      <title>/ready</title>
      <link>/sensu-go/latest/api/other/ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/ready/</guid>
      <description>Get API readiness data for your Sensu instance The /ready API endpoint provides HTTP GET access to information about whether your Sensu instance is ready to serve API requests.
Example The following example demonstrates a GET request to the /ready API endpoint:
curl -X GET \ http://127.0.0.1:8080/ready The request results in a successful HTTP/1.1 200 OK response and a text response body:
ready If the backend configuration includes an api-serve-wait-time duration, the request will result in an HTTP/1.</description>
    </item>
    
    <item>
      <title>/version</title>
      <link>/sensu-go/6.6/api/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/other/version/</guid>
      <description>Get the Sensu backend and etcd versions The /version API endpoint provides HTTP GET access to the Sensu backend and etcd versions for the Sensu instance.
Example The following example demonstrates a GET request to the /version API endpoint:
curl -X GET \ http://127.0.0.1:8080/version The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu version data:
{ &amp;#34;etcd&amp;#34;: { &amp;#34;etcdserver&amp;#34;: &amp;#34;3.5.0&amp;#34;, &amp;#34;etcdcluster&amp;#34;: &amp;#34;3.5.0&amp;#34; }, &amp;#34;sensu_backend&amp;#34;: &amp;#34;6.</description>
    </item>
    
    <item>
      <title>/version</title>
      <link>/sensu-go/6.7/api/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/other/version/</guid>
      <description>Get the Sensu backend and etcd versions The /version API endpoint provides HTTP GET access to the Sensu backend and etcd versions for the Sensu instance.
Example The following example demonstrates a GET request to the /version API endpoint:
curl -X GET \ http://127.0.0.1:8080/version The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu version data:
{ &amp;#34;etcd&amp;#34;: { &amp;#34;etcdserver&amp;#34;: &amp;#34;3.5.0&amp;#34;, &amp;#34;etcdcluster&amp;#34;: &amp;#34;3.5.0&amp;#34; }, &amp;#34;sensu_backend&amp;#34;: &amp;#34;6.</description>
    </item>
    
    <item>
      <title>/version</title>
      <link>/sensu-go/6.8/api/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/other/version/</guid>
      <description>Get the Sensu backend and etcd versions The /version API endpoint provides HTTP GET access to the Sensu backend and etcd versions for the Sensu instance.
Example The following example demonstrates a GET request to the /version API endpoint:
curl -X GET \ http://127.0.0.1:8080/version The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu version data:
{ &amp;#34;etcd&amp;#34;: { &amp;#34;etcdserver&amp;#34;: &amp;#34;3.5.0&amp;#34;, &amp;#34;etcdcluster&amp;#34;: &amp;#34;3.5.0&amp;#34; }, &amp;#34;sensu_backend&amp;#34;: &amp;#34;6.</description>
    </item>
    
    <item>
      <title>/version</title>
      <link>/sensu-go/latest/api/other/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/other/version/</guid>
      <description>Get the Sensu backend and etcd versions The /version API endpoint provides HTTP GET access to the Sensu backend and etcd versions for the Sensu instance.
Example The following example demonstrates a GET request to the /version API endpoint:
curl -X GET \ http://127.0.0.1:8080/version The request results in a successful HTTP/1.1 200 OK response and a JSON map that contains Sensu version data:
{ &amp;#34;etcd&amp;#34;: { &amp;#34;etcdserver&amp;#34;: &amp;#34;3.5.0&amp;#34;, &amp;#34;etcdcluster&amp;#34;: &amp;#34;3.5.0&amp;#34; }, &amp;#34;sensu_backend&amp;#34;: &amp;#34;6.</description>
    </item>
    
    <item>
      <title>Aggregates API</title>
      <link>/sensu-enterprise-dashboard/latest/api/aggregates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/aggregates/</guid>
      <description>The /aggregates API endpoint /aggregates (GET) The /aggregates/:name API endpoints /aggregates/:name (GET) /aggregates/:name (DELETE) The /aggregates API endpoint The /aggregates API endpoint provides HTTP GET access to named aggregate data.
/aggregates (GET) EXAMPLES The following example demonstrates a /aggregates API query which results in a JSON Array of JSON Hashes containing named check aggregates.
$ curl -s http://127.0.0.1:3000/aggregates | jq . [ { &amp;#34;_id&amp;#34;: &amp;#34;us_east1/check_web_app&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_east1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;check_web_app&amp;#34; }, { &amp;#34;_id&amp;#34;: &amp;#34;us_west1/elasticsearch_health&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;elasticsearch_health&amp;#34; } ] API specification /aggregates (GET) description Returns the list of named aggregates by name and datacenter (dc) example url http://hostname:3000/aggregates response type Array response codes Success: 200 (OK)Error: 500 (Internal Server Error) output [ { &amp;#34;_id&amp;#34;: &amp;#34;us_east1/check_web_app&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_east1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;check_web_app&amp;#34; }, { &amp;#34;_id&amp;#34;: &amp;#34;us_west1/elasticsearch_health&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;elasticsearch_health&amp;#34; } ] The /aggregates/:name API endpoints The /aggregates/:name API endpoints provide HTTP GET and HTTP DELETE access to check aggregate data for a named aggregate.</description>
    </item>
    
    <item>
      <title>Ansible integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/ansible/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Ansible Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Ansible Handler plugin is a Sensu handler that launches Ansible Tower job templates for automated remediation based on Sensu observability event data.
NOTE: The Sensu Ansible Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.</description>
    </item>
    
    <item>
      <title>Ansible integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/ansible/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Ansible Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Ansible Handler plugin is a Sensu handler that launches Ansible Tower job templates for automated remediation based on Sensu observability event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Ansible integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/ansible/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Ansible Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Ansible Handler plugin is a Sensu handler that launches Ansible Tower job templates for automated remediation based on Sensu observability event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Ansible integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/ansible/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Ansible Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Ansible Handler plugin is a Sensu handler that launches Ansible Tower job templates for automated remediation based on Sensu observability event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>CHANGELOG</title>
      <link>/sensu-enterprise-dashboard/latest/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/changelog/</guid>
      <description>NOTE: Sensu Enterprise Dashboard is built on Uchiwa. Uchiwa changes are documented in the Uchiwa changelog.
Releases Enterprise Dashboard 2.16.0 Release Notes Enterprise Dashboard 2.15.0 Release Notes Enterprise Dashboard 2.14.0 Release Notes Enterprise Dashboard 2.13.2 Release Notes Enterprise Dashboard 2.13.1 Release Notes Enterprise Dashboard 2.13.0 Release Notes Enterprise Dashboard 2.12.0 Release Notes Enterprise Dashboard 2.11.2 Release Notes Enterprise Dashboard 2.11.1 Release Notes Enterprise Dashboard 2.11.0 Release Notes Enterprise Dashboard 2.10.1 Release Notes Enterprise Dashboard 2.</description>
    </item>
    
    <item>
      <title>Checks API</title>
      <link>/sensu-enterprise-dashboard/latest/api/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/checks/</guid>
      <description>The /checks API endpoint /checks (GET) The /checks/:check API endpoint /checks/:check (GET) The /request API endpoint /request (POST) The /checks API endpoint The /checks API endpoint provides HTTP GET access to subscription check data.
/checks (GET) EXAMPLE The following example demonstrates a request to the /checks API, resulting in a JSON Array of JSON Hashes containing subscription check definitions.
$ curl -s http://127.0.0.1:3000/checks | jq . [ { &amp;#34;name&amp;#34;: &amp;#34;sensu_website&amp;#34;, &amp;#34;_id&amp;#34;: &amp;#34;us_east1/sensu_website&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_east1&amp;#34;, &amp;#34;interval&amp;#34;: 60, &amp;#34;subscribers&amp;#34;: [ &amp;#34;production&amp;#34; ], &amp;#34;command&amp;#34;: &amp;#34;check-http.</description>
    </item>
    
    <item>
      <title>Chef integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/chef/</guid>
      <description>The Sensu Chef Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Chef node no longer exists.
NOTE: The Sensu Chef Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Chef node names. Keep your sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Chef integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/chef/</guid>
      <description>The Sensu Chef Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Chef node no longer exists.
NOTE: The Sensu Chef Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Chef node names. Keep your sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Chef integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/chef/</guid>
      <description>The Sensu Chef Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Chef node no longer exists.
NOTE: The Sensu Chef Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Chef node names. Keep your sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Chef integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/chef/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/chef/</guid>
      <description>The Sensu Chef Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Chef node no longer exists.
NOTE: The Sensu Chef Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Chef node names. Keep your sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Clients API</title>
      <link>/sensu-enterprise-dashboard/latest/api/clients/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/clients/</guid>
      <description>The /clients API endpoint /clients (GET) The /clients/:client API endpoints /clients/:client (GET) /clients/:client (DELETE) The /clients/:client/history API endpoint The /clients API Endpoint The /clients API endpoint provides HTTP GET and POST access to the Sensu client registry.
/clients (GET) The /clients endpoint provides HTTP GET access to client registry data as published via client keepalives, generated for a proxy client, or created via HTTP POST to the /clients API.</description>
    </item>
    
    <item>
      <title>Configuration API</title>
      <link>/sensu-enterprise-dashboard/latest/api/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/config/</guid>
      <description>Reference documentation The /config API endpoint /config (GET) The /config API endpoint The /config API provides HTTP GET access to the Sensu Enterprise configuration. Sensitive setting values are redacted by default.
/config (GET) EXAMPLE The following example demonstrates a request to the /config API, resulting in a JSON Hash containing the Sensu Enterprise configuration.
$ curl -s http://127.0.0.1:3000/config | jq . { &amp;#34;Sensu&amp;#34;: [ { &amp;#34;Advanced&amp;#34;: { &amp;#34;CloseRequest&amp;#34;: false, &amp;#34;DisableKeepAlives&amp;#34;: false, &amp;#34;Tracing&amp;#34;: false }, &amp;#34;Name&amp;#34;: &amp;#34;sensu1&amp;#34;, &amp;#34;Host&amp;#34;: &amp;#34;127.</description>
    </item>
    
    <item>
      <title>core/v2/apikeys</title>
      <link>/sensu-go/6.6/api/core/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/apikeys/</guid>
      <description>NOTE: Requests to core/v2/apikeys endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all API keys The /apikeys GET endpoint retrieves all API keys.
Example The following example demonstrates a request to the /apikeys API endpoint:
curl -X GET \ http://127.0.0.1:8080/api/core/v2/apikeys \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; The request will result in a successful HTTP/1.</description>
    </item>
    
    <item>
      <title>core/v2/apikeys</title>
      <link>/sensu-go/6.7/api/core/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/apikeys/</guid>
      <description>NOTE: Requests to core/v2/apikeys endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all API keys The /apikeys GET endpoint retrieves all API keys.
Example The following example demonstrates a GET request to the /apikeys API endpoint:
curl -X GET \ http://127.0.0.1:8080/api/core/v2/apikeys \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; The request will result in a successful HTTP/1.</description>
    </item>
    
    <item>
      <title>core/v2/apikeys</title>
      <link>/sensu-go/6.8/api/core/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/apikeys/</guid>
      <description>NOTE: Requests to core/v2/apikeys endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all API keys The /apikeys GET endpoint retrieves all API keys.
Example The following example demonstrates a GET request to the /apikeys API endpoint:
curl -X GET \ http://127.0.0.1:8080/api/core/v2/apikeys \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; The request will result in a successful HTTP/1.</description>
    </item>
    
    <item>
      <title>core/v2/apikeys</title>
      <link>/sensu-go/latest/api/core/apikeys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/apikeys/</guid>
      <description>NOTE: Requests to core/v2/apikeys endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all API keys The /apikeys GET endpoint retrieves all API keys.
Example The following example demonstrates a GET request to the /apikeys API endpoint:
curl -X GET \ http://127.0.0.1:8080/api/core/v2/apikeys \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; The request will result in a successful HTTP/1.</description>
    </item>
    
    <item>
      <title>core/v2/assets</title>
      <link>/sensu-go/6.6/api/core/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/assets/</guid>
      <description>NOTE: Requests to core/v2/assets API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all assets The /assets API endpoint provides HTTP GET access to dynamic runtime asset data.
Example The following example demonstrates a request to the /assets API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/assets</title>
      <link>/sensu-go/6.7/api/core/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/assets/</guid>
      <description>NOTE: Requests to core/v2/assets API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all assets The /assets API endpoint provides HTTP GET access to dynamic runtime asset data.
Example The following example demonstrates a GET request to the /assets API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/assets</title>
      <link>/sensu-go/6.8/api/core/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/assets/</guid>
      <description>NOTE: Requests to core/v2/assets API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all assets The /assets API endpoint provides HTTP GET access to dynamic runtime asset data.
Example The following example demonstrates a GET request to the /assets API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/assets</title>
      <link>/sensu-go/latest/api/core/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/assets/</guid>
      <description>NOTE: Requests to core/v2/assets API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all assets The /assets API endpoint provides HTTP GET access to dynamic runtime asset data.
Example The following example demonstrates a GET request to the /assets API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/checks</title>
      <link>/sensu-go/6.6/api/core/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/checks/</guid>
      <description>NOTE: Requests to core/v2/checks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all checks The /checks API endpoint provides HTTP GET access to check data.
Example The following example demonstrates a request to the /checks API endpoint:
curl -X GET \ http://127.0.0.1:8080/api/core/v2/namespaces/default/checks \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; The request results in a successful HTTP/1.</description>
    </item>
    
    <item>
      <title>core/v2/checks</title>
      <link>/sensu-go/6.7/api/core/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/checks/</guid>
      <description>NOTE: Requests to core/v2/checks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all checks The /checks API endpoint provides HTTP GET access to check data.
Example The following example demonstrates a GET request to the /checks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/checks</title>
      <link>/sensu-go/6.8/api/core/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/checks/</guid>
      <description>NOTE: Requests to core/v2/checks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all checks The /checks API endpoint provides HTTP GET access to check data.
Example The following example demonstrates a GET request to the /checks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/checks</title>
      <link>/sensu-go/latest/api/core/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/checks/</guid>
      <description>NOTE: Requests to core/v2/checks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all checks The /checks API endpoint provides HTTP GET access to check data.
Example The following example demonstrates a GET request to the /checks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/cluster</title>
      <link>/sensu-go/6.6/api/core/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/cluster/</guid>
      <description>NOTE: Requests to core/v2/cluster API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster data The /cluster/members API endpoint provides HTTP GET access to Sensu cluster data.
Example The following example demonstrates a request to the /cluster/members API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/cluster</title>
      <link>/sensu-go/6.7/api/core/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/cluster/</guid>
      <description>NOTE: Requests to core/v2/cluster API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster data The /cluster/members API endpoint provides HTTP GET access to Sensu cluster data.
Example The following example demonstrates a request to the /cluster/members API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/cluster</title>
      <link>/sensu-go/6.8/api/core/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/cluster/</guid>
      <description>NOTE: Requests to core/v2/cluster API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster data The /cluster/members API endpoint provides HTTP GET access to Sensu cluster data.
Example The following example demonstrates a request to the /cluster/members API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/cluster</title>
      <link>/sensu-go/latest/api/core/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/cluster/</guid>
      <description>NOTE: Requests to core/v2/cluster API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster data The /cluster/members API endpoint provides HTTP GET access to Sensu cluster data.
Example The following example demonstrates a request to the /cluster/members API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/clusterrolebindings</title>
      <link>/sensu-go/6.6/api/core/cluster-role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/cluster-role-bindings/</guid>
      <description>NOTE: Requests to core/v2/clusterrolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster role bindings The /clusterrolebindings API endpoint provides HTTP GET access to cluster role binding data.
Example The following example demonstrates a request to the /clusterrolebindings API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/clusterrolebindings</title>
      <link>/sensu-go/6.7/api/core/cluster-role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/cluster-role-bindings/</guid>
      <description>NOTE: Requests to core/v2/clusterrolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster role bindings The /clusterrolebindings API endpoint provides HTTP GET access to cluster role binding data.
Example The following example demonstrates a GET request to the /clusterrolebindings API endpoint:</description>
    </item>
    
    <item>
      <title>core/v2/clusterrolebindings</title>
      <link>/sensu-go/6.8/api/core/cluster-role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/cluster-role-bindings/</guid>
      <description>NOTE: Requests to core/v2/clusterrolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster role bindings The /clusterrolebindings API endpoint provides HTTP GET access to cluster role binding data.
Example The following example demonstrates a GET request to the /clusterrolebindings API endpoint:</description>
    </item>
    
    <item>
      <title>core/v2/clusterrolebindings</title>
      <link>/sensu-go/latest/api/core/cluster-role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/cluster-role-bindings/</guid>
      <description>NOTE: Requests to core/v2/clusterrolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster role bindings The /clusterrolebindings API endpoint provides HTTP GET access to cluster role binding data.
Example The following example demonstrates a GET request to the /clusterrolebindings API endpoint:</description>
    </item>
    
    <item>
      <title>core/v2/clusterroles</title>
      <link>/sensu-go/6.6/api/core/cluster-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/cluster-roles/</guid>
      <description>NOTE: Requests to core/v2/clusterroles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster roles The /clusterroles API endpoint provides HTTP GET access to cluster role data.
Example The following example demonstrates a GET request to the /clusterroles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/clusterroles</title>
      <link>/sensu-go/6.7/api/core/cluster-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/cluster-roles/</guid>
      <description>NOTE: Requests to core/v2/clusterroles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster roles The /clusterroles API endpoint provides HTTP GET access to cluster role data.
Example The following example demonstrates a GET request to the /clusterroles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/clusterroles</title>
      <link>/sensu-go/6.8/api/core/cluster-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/cluster-roles/</guid>
      <description>NOTE: Requests to core/v2/clusterroles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster roles The /clusterroles API endpoint provides HTTP GET access to cluster role data.
Example The following example demonstrates a GET request to the /clusterroles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/clusterroles</title>
      <link>/sensu-go/latest/api/core/cluster-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/cluster-roles/</guid>
      <description>NOTE: Requests to core/v2/clusterroles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all cluster roles The /clusterroles API endpoint provides HTTP GET access to cluster role data.
Example The following example demonstrates a GET request to the /clusterroles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/entities</title>
      <link>/sensu-go/6.6/api/core/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/entities/</guid>
      <description>NOTE: Requests to core/v2/entities API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all entities The /entities API endpoint provides HTTP GET access to entity data.
Example The following example demonstrates a GET request to the /entities API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/entities</title>
      <link>/sensu-go/6.7/api/core/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/entities/</guid>
      <description>NOTE: Requests to core/v2/entities API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all entities The /entities API endpoint provides HTTP GET access to entity data.
Example The following example demonstrates a GET request to the /entities API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/entities</title>
      <link>/sensu-go/6.8/api/core/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/entities/</guid>
      <description>NOTE: Requests to core/v2/entities API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all entities The /entities API endpoint provides HTTP GET access to entity data.
Example The following example demonstrates a GET request to the /entities API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/entities</title>
      <link>/sensu-go/latest/api/core/entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/entities/</guid>
      <description>NOTE: Requests to core/v2/entities API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all entities The /entities API endpoint provides HTTP GET access to entity data.
Example The following example demonstrates a GET request to the /entities API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/events</title>
      <link>/sensu-go/6.6/api/core/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/events/</guid>
      <description>PRO TIP: The core/v2/events API endpoints are primarily designed to provide HTTP access to event data created by agent-executed checks. To test your Sensu observability pipeline, use the agent API to create new ad hoc events or sensuctl or the web UI to execute existing checks on demand.
NOTE: Requests to core/v2/events API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/events</title>
      <link>/sensu-go/6.7/api/core/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/events/</guid>
      <description>PRO TIP: The core/v2/events API endpoints are primarily designed to provide HTTP access to event data created by agent-executed checks. To test your Sensu observability pipeline, use the agent API to create new ad hoc events or sensuctl or the web UI to execute existing checks on demand.
NOTE: Requests to core/v2/events API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/events</title>
      <link>/sensu-go/6.8/api/core/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/events/</guid>
      <description>PRO TIP: The core/v2/events API endpoints are primarily designed to provide HTTP access to event data created by agent-executed checks. To test your Sensu observability pipeline, use the agent API to create new ad hoc events or sensuctl or the web UI to execute existing checks on demand.
NOTE: Requests to core/v2/events API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/events</title>
      <link>/sensu-go/latest/api/core/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/events/</guid>
      <description>PRO TIP: The core/v2/events API endpoints are primarily designed to provide HTTP access to event data created by agent-executed checks. To test your Sensu observability pipeline, use the agent API to create new ad hoc events or sensuctl or the web UI to execute existing checks on demand.
NOTE: Requests to core/v2/events API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/filters</title>
      <link>/sensu-go/6.6/api/core/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/filters/</guid>
      <description>NOTE: Requests to core/v2/filters API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all event filters The /filters API endpoint provides HTTP GET access to event filter data.
Example The following example demonstrates a GET request to the /filters API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/filters</title>
      <link>/sensu-go/6.7/api/core/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/filters/</guid>
      <description>NOTE: Requests to core/v2/filters API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all event filters The /filters API endpoint provides HTTP GET access to event filter data.
Example The following example demonstrates a GET request to the /filters API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/filters</title>
      <link>/sensu-go/6.8/api/core/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/filters/</guid>
      <description>NOTE: Requests to core/v2/filters API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all event filters The /filters API endpoint provides HTTP GET access to event filter data.
Example The following example demonstrates a GET request to the /filters API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/filters</title>
      <link>/sensu-go/latest/api/core/filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/filters/</guid>
      <description>NOTE: Requests to core/v2/filters API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all event filters The /filters API endpoint provides HTTP GET access to event filter data.
Example The following example demonstrates a GET request to the /filters API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/handlers</title>
      <link>/sensu-go/6.6/api/core/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/handlers/</guid>
      <description>NOTE: Requests to core/v2/handlers API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all handlers The /handlers API endpoint provides HTTP GET access to handler data.
Example The following example demonstrates a GET request to the /handlers API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/handlers</title>
      <link>/sensu-go/6.7/api/core/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/handlers/</guid>
      <description>NOTE: Requests to core/v2/handlers API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all handlers The /handlers API endpoint provides HTTP GET access to handler data.
Example The following example demonstrates a GET request to the /handlers API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/handlers</title>
      <link>/sensu-go/6.8/api/core/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/handlers/</guid>
      <description>NOTE: Requests to core/v2/handlers API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all handlers The /handlers API endpoint provides HTTP GET access to handler data.
Example The following example demonstrates a GET request to the /handlers API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/handlers</title>
      <link>/sensu-go/latest/api/core/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/handlers/</guid>
      <description>NOTE: Requests to core/v2/handlers API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all handlers The /handlers API endpoint provides HTTP GET access to handler data.
Example The following example demonstrates a GET request to the /handlers API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/hooks</title>
      <link>/sensu-go/6.6/api/core/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/hooks/</guid>
      <description>NOTE: Requests to core/v2/hooks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all hooks The /hooks API endpoint provides HTTP GET access to hook data.
Example The following example demonstrates a GET request to the /hooks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/hooks</title>
      <link>/sensu-go/6.7/api/core/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/hooks/</guid>
      <description>NOTE: Requests to core/v2/hooks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all hooks The /hooks API endpoint provides HTTP GET access to hook data.
Example The following example demonstrates a GET request to the /hooks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/hooks</title>
      <link>/sensu-go/6.8/api/core/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/hooks/</guid>
      <description>NOTE: Requests to core/v2/hooks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all hooks The /hooks API endpoint provides HTTP GET access to hook data.
Example The following example demonstrates a GET request to the /hooks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/hooks</title>
      <link>/sensu-go/latest/api/core/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/hooks/</guid>
      <description>NOTE: Requests to core/v2/hooks API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all hooks The /hooks API endpoint provides HTTP GET access to hook data.
Example The following example demonstrates a GET request to the /hooks API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/mutators</title>
      <link>/sensu-go/6.6/api/core/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/mutators/</guid>
      <description>NOTE: Requests to core/v2/mutators API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all mutators The /mutators API endpoint provides HTTP GET access to mutator data.
Example The following example demonstrates a GET request to the /mutators API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/mutators</title>
      <link>/sensu-go/6.7/api/core/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/mutators/</guid>
      <description>NOTE: Requests to core/v2/mutators API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all mutators The /mutators API endpoint provides HTTP GET access to mutator data.
Example The following example demonstrates a GET request to the /mutators API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/mutators</title>
      <link>/sensu-go/6.8/api/core/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/mutators/</guid>
      <description>NOTE: Requests to core/v2/mutators API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all mutators The /mutators API endpoint provides HTTP GET access to mutator data.
Example The following example demonstrates a GET request to the /mutators API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/mutators</title>
      <link>/sensu-go/latest/api/core/mutators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/mutators/</guid>
      <description>NOTE: Requests to core/v2/mutators API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all mutators The /mutators API endpoint provides HTTP GET access to mutator data.
Example The following example demonstrates a GET request to the /mutators API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/namespaces</title>
      <link>/sensu-go/6.6/api/core/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/namespaces/</guid>
      <description>NOTE: Requests to core/v2/namespaces API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all namespaces The /namespaces API endpoint provides HTTP GET access to namespace data.
Example The following example demonstrates a GET request to the /namespaces API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/namespaces</title>
      <link>/sensu-go/6.7/api/core/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/namespaces/</guid>
      <description>NOTE: Requests to core/v2/namespaces API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all namespaces The /namespaces API endpoint provides HTTP GET access to namespace data.
Example The following example demonstrates a GET request to the /namespaces API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/namespaces</title>
      <link>/sensu-go/6.8/api/core/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/namespaces/</guid>
      <description>NOTE: Requests to core/v2/namespaces API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all namespaces The /namespaces API endpoint provides HTTP GET access to namespace data.
Example The following example demonstrates a GET request to the /namespaces API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/namespaces</title>
      <link>/sensu-go/latest/api/core/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/namespaces/</guid>
      <description>NOTE: Requests to core/v2/namespaces API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all namespaces The /namespaces API endpoint provides HTTP GET access to namespace data.
Example The following example demonstrates a GET request to the /namespaces API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/pipelines</title>
      <link>/sensu-go/6.6/api/core/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/pipelines/</guid>
      <description>IMPORTANT: The pipelines you can create and manage with this core/v2/pipelines API are observation event processing workflows made up of filters, mutators, and handlers.
Pipelines are different from the resources you can create and manage with the enterprise/pipeline/v1 API, which allows you to create and manage resources that can only be used in pipelines.
NOTE: Requests to core/v2/pipelines API endpoints require you to authenticate with a Sensu API key or access token.</description>
    </item>
    
    <item>
      <title>core/v2/pipelines</title>
      <link>/sensu-go/6.7/api/core/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/pipelines/</guid>
      <description>IMPORTANT: The pipelines you can create and manage with this core/v2/pipelines API are observation event processing workflows made up of filters, mutators, and handlers.
Pipelines are different from the resources you can create and manage with the enterprise/pipeline/v1 API, which allows you to create and manage resources that can only be used in pipelines.
NOTE: Requests to core/v2/pipelines API endpoints require you to authenticate with a Sensu API key or access token.</description>
    </item>
    
    <item>
      <title>core/v2/pipelines</title>
      <link>/sensu-go/6.8/api/core/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/pipelines/</guid>
      <description>IMPORTANT: The pipelines you can create and manage with this core/v2/pipelines API are observation event processing workflows made up of filters, mutators, and handlers.
Pipelines are different from the resources you can create and manage with the enterprise/pipeline/v1 API, which allows you to create and manage resources that can only be used in pipelines.
NOTE: Requests to core/v2/pipelines API endpoints require you to authenticate with a Sensu API key or access token.</description>
    </item>
    
    <item>
      <title>core/v2/pipelines</title>
      <link>/sensu-go/latest/api/core/pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/pipelines/</guid>
      <description>IMPORTANT: The pipelines you can create and manage with this core/v2/pipelines API are observation event processing workflows made up of filters, mutators, and handlers.
Pipelines are different from the resources you can create and manage with the enterprise/pipeline/v1 API, which allows you to create and manage resources that can only be used in pipelines.
NOTE: Requests to core/v2/pipelines API endpoints require you to authenticate with a Sensu API key or access token.</description>
    </item>
    
    <item>
      <title>core/v2/rolebindings</title>
      <link>/sensu-go/6.6/api/core/role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/role-bindings/</guid>
      <description>NOTE: Requests to core/v2/rolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all role bindings The /rolebindings API endpoint provides HTTP GET access to role binding data.
Example The following example demonstrates a GET request to the /rolebindings API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/rolebindings</title>
      <link>/sensu-go/6.7/api/core/role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/role-bindings/</guid>
      <description>NOTE: Requests to core/v2/rolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all role bindings The /rolebindings API endpoint provides HTTP GET access to role binding data.
Example The following example demonstrates a GET request to the /rolebindings API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/rolebindings</title>
      <link>/sensu-go/6.8/api/core/role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/role-bindings/</guid>
      <description>NOTE: Requests to core/v2/rolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all role bindings The /rolebindings API endpoint provides HTTP GET access to role binding data.
Example The following example demonstrates a GET request to the /rolebindings API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/rolebindings</title>
      <link>/sensu-go/latest/api/core/role-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/role-bindings/</guid>
      <description>NOTE: Requests to core/v2/rolebindings API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all role bindings The /rolebindings API endpoint provides HTTP GET access to role binding data.
Example The following example demonstrates a GET request to the /rolebindings API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/roles</title>
      <link>/sensu-go/6.6/api/core/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/roles/</guid>
      <description>NOTE: Requests to core/v2/roles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all roles The /roles API endpoint provides HTTP GET access to role data.
Example The following example demonstrates a GET request to the /roles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/roles</title>
      <link>/sensu-go/6.7/api/core/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/roles/</guid>
      <description>NOTE: Requests to core/v2/roles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all roles The /roles API endpoint provides HTTP GET access to role data.
Example The following example demonstrates a GET request to the /roles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/roles</title>
      <link>/sensu-go/6.8/api/core/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/roles/</guid>
      <description>NOTE: Requests to core/v2/roles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all roles The /roles API endpoint provides HTTP GET access to role data.
Example The following example demonstrates a GET request to the /roles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/roles</title>
      <link>/sensu-go/latest/api/core/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/roles/</guid>
      <description>NOTE: Requests to core/v2/roles API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all roles The /roles API endpoint provides HTTP GET access to role data.
Example The following example demonstrates a GET request to the /roles API endpoint:
curl -X GET \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/silenced</title>
      <link>/sensu-go/6.6/api/core/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/silenced/</guid>
      <description>NOTE: Requests to core/v2/silenced API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all silences The /silenced API endpoint provides HTTP GET access to silencing entry data.
Example The following example demonstrates a GET request to the /silenced API endpoint:
curl -X GET \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/silenced</title>
      <link>/sensu-go/6.7/api/core/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/silenced/</guid>
      <description>NOTE: Requests to core/v2/silenced API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all silences The /silenced API endpoint provides HTTP GET access to silencing entry data.
Example The following example demonstrates a GET request to the /silenced API endpoint:
curl -X GET \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/silenced</title>
      <link>/sensu-go/6.8/api/core/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/silenced/</guid>
      <description>NOTE: Requests to core/v2/silenced API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all silences The /silenced API endpoint provides HTTP GET access to silencing entry data.
Example The following example demonstrates a GET request to the /silenced API endpoint:
curl -X GET \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/silenced</title>
      <link>/sensu-go/latest/api/core/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/silenced/</guid>
      <description>NOTE: Requests to core/v2/silenced API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all silences The /silenced API endpoint provides HTTP GET access to silencing entry data.
Example The following example demonstrates a GET request to the /silenced API endpoint:
curl -X GET \ -H &amp;#34;Authorization: Key $SENSU_API_KEY&amp;#34; \ http://127.</description>
    </item>
    
    <item>
      <title>core/v2/tessen</title>
      <link>/sensu-go/6.6/api/core/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/tessen/</guid>
      <description>NOTE: Requests to core/v2/tessen API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
The core/v2/tessen API endpoints provide HTTP access to manage Tessen configuration. Access to core/v2/tessen is restricted to the default admin user.
Get the active Tessen configuration The /tessen API endpoint provides HTTP GET access to the active Tessen configuration.</description>
    </item>
    
    <item>
      <title>core/v2/tessen</title>
      <link>/sensu-go/6.7/api/core/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/tessen/</guid>
      <description>NOTE: Requests to core/v2/tessen API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
The core/v2/tessen API endpoints provide HTTP access to manage Tessen configuration. Access to core/v2/tessen is restricted to the default admin user.
Get the active Tessen configuration The /tessen API endpoint provides HTTP GET access to the active Tessen configuration.</description>
    </item>
    
    <item>
      <title>core/v2/tessen</title>
      <link>/sensu-go/6.8/api/core/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/tessen/</guid>
      <description>NOTE: Requests to core/v2/tessen API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
The core/v2/tessen API endpoints provide HTTP access to manage Tessen configuration. Access to core/v2/tessen is restricted to the default admin user.
Get the active Tessen configuration The /tessen API endpoint provides HTTP GET access to the active Tessen configuration.</description>
    </item>
    
    <item>
      <title>core/v2/tessen</title>
      <link>/sensu-go/latest/api/core/tessen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/tessen/</guid>
      <description>NOTE: Requests to core/v2/tessen API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
The core/v2/tessen API endpoints provide HTTP access to manage Tessen configuration. Access to core/v2/tessen is restricted to the default admin user.
Get the active Tessen configuration The /tessen API endpoint provides HTTP GET access to the active Tessen configuration.</description>
    </item>
    
    <item>
      <title>core/v2/users</title>
      <link>/sensu-go/6.6/api/core/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/core/users/</guid>
      <description>NOTE: The core/v2/users API endpoints allow you to create and manage user credentials with Sensu&amp;rsquo;s built-in basic authentication. To configure user credentials with an external provider like Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC), use Sensu&amp;rsquo;s enterprise/authentication/v2 API endpoints.
Requests to core/v2/users API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/users</title>
      <link>/sensu-go/6.7/api/core/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/core/users/</guid>
      <description>NOTE: The core/v2/users API endpoints allow you to create and manage user credentials with Sensu&amp;rsquo;s built-in basic authentication. To configure user credentials with an external provider like Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC), use Sensu&amp;rsquo;s enterprise/authentication/v2 API endpoints.
Requests to core/v2/users API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/users</title>
      <link>/sensu-go/6.8/api/core/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/core/users/</guid>
      <description>NOTE: The core/v2/users API endpoints allow you to create and manage user credentials with Sensu&amp;rsquo;s built-in basic authentication. To configure user credentials with an external provider like Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC), use Sensu&amp;rsquo;s enterprise/authentication/v2 API endpoints.
Requests to core/v2/users API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>core/v2/users</title>
      <link>/sensu-go/latest/api/core/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/core/users/</guid>
      <description>NOTE: The core/v2/users API endpoints allow you to create and manage user credentials with Sensu&amp;rsquo;s built-in basic authentication. To configure user credentials with an external provider like Lightweight Directory Access Protocol (LDAP), Active Directory (AD), or OpenID Connect 1.0 protocol (OIDC), use Sensu&amp;rsquo;s enterprise/authentication/v2 API endpoints.
Requests to core/v2/users API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>Datacenters API</title>
      <link>/sensu-enterprise-dashboard/latest/api/datacenters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/datacenters/</guid>
      <description>The /datacenters API endpoint /datacenters (GET) The /datacenters/:datacenter API endpoint /datacenters/:datacenter (GET) The /datacenters API endpoint The /datacenters API endpoint provides HTTP GET access to datacenter information.
/datacenters (GET) EXAMPLE The following example demonstrates a request to the /datacenters API, resulting in a JSON Array of JSON Hashes containing datacenter information.
$ curl -s http://127.0.0.1:3000/datacenters | jq . [ { &amp;#34;name&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;info&amp;#34;: { &amp;#34;...&amp;#34;: &amp;#34;...&amp;#34; }, &amp;#34;metrics&amp;#34;: { &amp;#34;.</description>
    </item>
    
    <item>
      <title>EC2 integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/aws-ec2/</guid>
      <description>The Sensu EC2 Handler plugin is a Sensu handler that checks an AWS EC2 instance and removes it from Sensu if it is not in one of the specified states.
NOTE: The Sensu EC2 Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Tunable arguments: use Sensu annotations to set custom instance ID, instance ID labels, timeouts, and more in EC2.</description>
    </item>
    
    <item>
      <title>EC2 integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/aws-ec2/</guid>
      <description>The Sensu EC2 Handler plugin is a Sensu handler that checks an AWS EC2 instance and removes it from Sensu if it is not in one of the specified states.
NOTE: The Sensu EC2 Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Tunable arguments: use Sensu annotations to set custom instance ID, instance ID labels, timeouts, and more in EC2.</description>
    </item>
    
    <item>
      <title>EC2 integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/aws-ec2/</guid>
      <description>The Sensu EC2 Handler plugin is a Sensu handler that checks an AWS EC2 instance and removes it from Sensu if it is not in one of the specified states.
NOTE: The Sensu EC2 Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Tunable arguments: use Sensu annotations to set custom instance ID, instance ID labels, timeouts, and more in EC2.</description>
    </item>
    
    <item>
      <title>EC2 integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/aws-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/aws-ec2/</guid>
      <description>The Sensu EC2 Handler plugin is a Sensu handler that checks an AWS EC2 instance and removes it from Sensu if it is not in one of the specified states.
NOTE: The Sensu EC2 Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Tunable arguments: use Sensu annotations to set custom instance ID, instance ID labels, timeouts, and more in EC2.</description>
    </item>
    
    <item>
      <title>Elasticsearch integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/elasticsearch/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Elasticsearch Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Elasticsearch Handler plugin is a Sensu handler that sends observation data from Sensu events and metrics to Elasticsearch. With this handler, the Sensu observation data you send to Elasticsearch is available for indexing and visualization in Kibana.
NOTE: The Sensu Elasticsearch Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations.</description>
    </item>
    
    <item>
      <title>Elasticsearch integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/elasticsearch/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Elasticsearch Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Elasticsearch Handler plugin is a Sensu handler that sends observation data from Sensu events and metrics to Elasticsearch. With this handler, the Sensu observation data you send to Elasticsearch is available for indexing and visualization in Kibana.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser.</description>
    </item>
    
    <item>
      <title>Elasticsearch integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/elasticsearch/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Elasticsearch Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Elasticsearch Handler plugin is a Sensu handler that sends observation data from Sensu events and metrics to Elasticsearch. With this handler, the Sensu observation data you send to Elasticsearch is available for indexing and visualization in Kibana.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser.</description>
    </item>
    
    <item>
      <title>Elasticsearch integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/elasticsearch/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Elasticsearch Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Elasticsearch Handler plugin is a Sensu handler that sends observation data from Sensu events and metrics to Elasticsearch. With this handler, the Sensu observation data you send to Elasticsearch is available for indexing and visualization in Kibana.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser.</description>
    </item>
    
    <item>
      <title>Email integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/email/</guid>
      <description>The Sensu Email Handler plugin is a Sensu handler that sends email alerts based on your event data. With this handler, Sensu can send email messages to the email addresses you specify based on event data generated by your Sensu checks.
NOTE: The Sensu Email Handler plugin is an example of Sensu&amp;rsquo;s alerting integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu Email Handler plugin supports the login authentication mechanisms required for use with Google Mail, Office 365, and other standards-based email providers and transports.</description>
    </item>
    
    <item>
      <title>Email integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/email/</guid>
      <description>The Sensu Email Handler plugin is a Sensu handler that sends email alerts based on your event data. With this handler, Sensu can send email messages to the email addresses you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Email integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/email/</guid>
      <description>The Sensu Email Handler plugin is a Sensu handler that sends email alerts based on your event data. With this handler, Sensu can send email messages to the email addresses you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Email integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/email/</guid>
      <description>The Sensu Email Handler plugin is a Sensu handler that sends email alerts based on your event data. With this handler, Sensu can send email messages to the email addresses you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>enterprise/authentication/v2</title>
      <link>/sensu-go/6.6/api/enterprise/authproviders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/authproviders/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/authentication/v2 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get active authentication provider configurations The /authproviders API endpoint provides HTTP GET access to authentication provider configuration in Sensu.</description>
    </item>
    
    <item>
      <title>enterprise/authentication/v2</title>
      <link>/sensu-go/6.7/api/enterprise/authproviders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/authproviders/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/authentication/v2 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get active authentication provider configurations The /authproviders API endpoint provides HTTP GET access to authentication provider configuration in Sensu.</description>
    </item>
    
    <item>
      <title>enterprise/authentication/v2</title>
      <link>/sensu-go/6.8/api/enterprise/authproviders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/authproviders/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/authentication/v2 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get active authentication provider configurations The /authproviders API endpoint provides HTTP GET access to authentication provider configuration in Sensu.</description>
    </item>
    
    <item>
      <title>enterprise/authentication/v2</title>
      <link>/sensu-go/latest/api/enterprise/authproviders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/authproviders/</guid>
      <description>COMMERCIAL FEATURE: Access authentication providers for single sign-on (SSO) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/authentication/v2 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get active authentication provider configurations The /authproviders API endpoint provides HTTP GET access to authentication provider configuration in Sensu.</description>
    </item>
    
    <item>
      <title>enterprise/bsm/v1</title>
      <link>/sensu-go/6.6/api/enterprise/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Requests to enterprise/bsm/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>enterprise/bsm/v1</title>
      <link>/sensu-go/6.7/api/enterprise/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Requests to enterprise/bsm/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>enterprise/bsm/v1</title>
      <link>/sensu-go/6.8/api/enterprise/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Requests to enterprise/bsm/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>enterprise/bsm/v1</title>
      <link>/sensu-go/latest/api/enterprise/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Requests to enterprise/bsm/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.</description>
    </item>
    
    <item>
      <title>enterprise/federation/v1</title>
      <link>/sensu-go/6.6/api/enterprise/federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/federation/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all replicators The /etcd-replicators API endpoint provides HTTP GET access to a list of replicators.</description>
    </item>
    
    <item>
      <title>enterprise/federation/v1</title>
      <link>/sensu-go/6.7/api/enterprise/federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/federation/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all replicators The /etcd-replicators API endpoint provides HTTP GET access to a list of replicators.</description>
    </item>
    
    <item>
      <title>enterprise/federation/v1</title>
      <link>/sensu-go/6.8/api/enterprise/federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/federation/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all replicators The /etcd-replicators API endpoint provides HTTP GET access to a list of replicators.</description>
    </item>
    
    <item>
      <title>enterprise/federation/v1</title>
      <link>/sensu-go/latest/api/enterprise/federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/federation/</guid>
      <description>COMMERCIAL FEATURE: Access federation in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/federation/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all replicators The /etcd-replicators API endpoint provides HTTP GET access to a list of replicators.</description>
    </item>
    
    <item>
      <title>enterprise/pipeline/v1</title>
      <link>/sensu-go/6.6/api/enterprise/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/pipeline/</guid>
      <description>IMPORTANT: The enterprise/pipeline/v1 API endpoints do not allow you to create and manage pipelines, which are composed of observation event processing workflows. Instead, enterprise/pipeline/v1 API endpoints allow you to create and manage resources that can only be used within pipelines (the Sumo Logic metrics handlers and TCP stream handlers).
COMMERCIAL FEATURE: Access enterprise/pipeline/v1 API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.</description>
    </item>
    
    <item>
      <title>enterprise/pipeline/v1</title>
      <link>/sensu-go/6.7/api/enterprise/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/pipeline/</guid>
      <description>IMPORTANT: The enterprise/pipeline/v1 API endpoints do not allow you to create and manage pipelines, which are composed of observation event processing workflows. Instead, enterprise/pipeline/v1 API endpoints allow you to create and manage resources that can only be used within pipelines (the Sumo Logic metrics handlers and TCP stream handlers).
COMMERCIAL FEATURE: Access enterprise/pipeline/v1 API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.</description>
    </item>
    
    <item>
      <title>enterprise/pipeline/v1</title>
      <link>/sensu-go/6.8/api/enterprise/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/pipeline/</guid>
      <description>IMPORTANT: The enterprise/pipeline/v1 API endpoints do not allow you to create and manage pipelines, which are composed of observation event processing workflows. Instead, enterprise/pipeline/v1 API endpoints allow you to create and manage resources that can only be used within pipelines (the Sumo Logic metrics handlers and TCP stream handlers).
COMMERCIAL FEATURE: Access enterprise/pipeline/v1 API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.</description>
    </item>
    
    <item>
      <title>enterprise/pipeline/v1</title>
      <link>/sensu-go/latest/api/enterprise/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/pipeline/</guid>
      <description>IMPORTANT: The enterprise/pipeline/v1 API endpoints do not allow you to create and manage pipelines, which are composed of observation event processing workflows. Instead, enterprise/pipeline/v1 API endpoints allow you to create and manage resources that can only be used within pipelines (the Sumo Logic metrics handlers and TCP stream handlers).
COMMERCIAL FEATURE: Access enterprise/pipeline/v1 API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.</description>
    </item>
    
    <item>
      <title>enterprise/prune/v1alpha</title>
      <link>/sensu-go/6.6/api/enterprise/prune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/prune/</guid>
      <description>COMMERCIAL FEATURE: Access pruning via enterprise/prune/v1alpha API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The enterprise/prune/v1alpha API endpoints are an alpha feature and may include breaking changes.
The pruning operation follows the role-based access control (RBAC) permissions of the current user. For example, to prune resources in the dev namespace, the current user who sends the prune command must have delete access to the dev namespace.</description>
    </item>
    
    <item>
      <title>enterprise/prune/v1alpha</title>
      <link>/sensu-go/6.7/api/enterprise/prune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/prune/</guid>
      <description>COMMERCIAL FEATURE: Access pruning via enterprise/prune/v1alpha API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The enterprise/prune/v1alpha API endpoints are an alpha feature and may include breaking changes.
The pruning operation follows the role-based access control (RBAC) permissions of the current user. For example, to prune resources in the dev namespace, the current user who sends the prune command must have delete access to the dev namespace.</description>
    </item>
    
    <item>
      <title>enterprise/prune/v1alpha</title>
      <link>/sensu-go/6.8/api/enterprise/prune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/prune/</guid>
      <description>COMMERCIAL FEATURE: Access pruning via enterprise/prune/v1alpha API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The enterprise/prune/v1alpha API endpoints are an alpha feature and may include breaking changes.
The pruning operation follows the role-based access control (RBAC) permissions of the current user. For example, to prune resources in the dev namespace, the current user who sends the prune command must have delete access to the dev namespace.</description>
    </item>
    
    <item>
      <title>enterprise/prune/v1alpha</title>
      <link>/sensu-go/latest/api/enterprise/prune/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/prune/</guid>
      <description>COMMERCIAL FEATURE: Access pruning via enterprise/prune/v1alpha API endpoints in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: The enterprise/prune/v1alpha API endpoints are an alpha feature and may include breaking changes.
The pruning operation follows the role-based access control (RBAC) permissions of the current user. For example, to prune resources in the dev namespace, the current user who sends the prune command must have delete access to the dev namespace.</description>
    </item>
    
    <item>
      <title>enterprise/searches/v1</title>
      <link>/sensu-go/6.6/api/enterprise/searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/searches/</guid>
      <description>COMMERCIAL FEATURE: Access saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/searches/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all searches The /searches API endpoint provides HTTP GET access to the list of saved searches.</description>
    </item>
    
    <item>
      <title>enterprise/searches/v1</title>
      <link>/sensu-go/6.7/api/enterprise/searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/searches/</guid>
      <description>COMMERCIAL FEATURE: Access saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/searches/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all searches The /searches API endpoint provides HTTP GET access to the list of saved searches.</description>
    </item>
    
    <item>
      <title>enterprise/searches/v1</title>
      <link>/sensu-go/6.8/api/enterprise/searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/searches/</guid>
      <description>COMMERCIAL FEATURE: Access saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/searches/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all searches The /searches API endpoint provides HTTP GET access to the list of saved searches.</description>
    </item>
    
    <item>
      <title>enterprise/searches/v1</title>
      <link>/sensu-go/latest/api/enterprise/searches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/searches/</guid>
      <description>COMMERCIAL FEATURE: Access saved searches in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/searches/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all searches The /searches API endpoint provides HTTP GET access to the list of saved searches.</description>
    </item>
    
    <item>
      <title>enterprise/secrets/v1</title>
      <link>/sensu-go/6.6/api/enterprise/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access secrets management in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/secrets/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all secrets providers The /providers API endpoint provides HTTP GET access to a list of secrets providers.</description>
    </item>
    
    <item>
      <title>enterprise/secrets/v1</title>
      <link>/sensu-go/6.7/api/enterprise/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access secrets management in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/secrets/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all secrets providers The /providers API endpoint provides HTTP GET access to a list of secrets providers.</description>
    </item>
    
    <item>
      <title>enterprise/secrets/v1</title>
      <link>/sensu-go/6.8/api/enterprise/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access secrets management in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/secrets/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all secrets providers The /providers API endpoint provides HTTP GET access to a list of secrets providers.</description>
    </item>
    
    <item>
      <title>enterprise/secrets/v1</title>
      <link>/sensu-go/latest/api/enterprise/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/secrets/</guid>
      <description>COMMERCIAL FEATURE: Access secrets management in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/secrets/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all secrets providers The /providers API endpoint provides HTTP GET access to a list of secrets providers.</description>
    </item>
    
    <item>
      <title>enterprise/store/v1</title>
      <link>/sensu-go/6.6/api/enterprise/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/datastore/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/store/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all datastore providers The /provider API endpoint provides HTTP GET access to Sensu datastore data.</description>
    </item>
    
    <item>
      <title>enterprise/store/v1</title>
      <link>/sensu-go/6.7/api/enterprise/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/datastore/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/store/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all datastore providers The /provider API endpoint provides HTTP GET access to Sensu datastore data.</description>
    </item>
    
    <item>
      <title>enterprise/store/v1</title>
      <link>/sensu-go/6.8/api/enterprise/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/datastore/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/store/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all datastore providers The /provider API endpoint provides HTTP GET access to Sensu datastore data.</description>
    </item>
    
    <item>
      <title>enterprise/store/v1</title>
      <link>/sensu-go/latest/api/enterprise/datastore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/datastore/</guid>
      <description>COMMERCIAL FEATURE: Access the datastore feature in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/store/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get all datastore providers The /provider API endpoint provides HTTP GET access to Sensu datastore data.</description>
    </item>
    
    <item>
      <title>enterprise/web/v1</title>
      <link>/sensu-go/6.6/api/enterprise/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/api/enterprise/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/web/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get the web UI configuration The /config API endpoint provides HTTP GET access to the global web UI configuration.</description>
    </item>
    
    <item>
      <title>enterprise/web/v1</title>
      <link>/sensu-go/6.7/api/enterprise/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/api/enterprise/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/web/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get the web UI configuration The /config API endpoint provides HTTP GET access to the global web UI configuration.</description>
    </item>
    
    <item>
      <title>enterprise/web/v1</title>
      <link>/sensu-go/6.8/api/enterprise/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/api/enterprise/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/web/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get the web UI configuration The /config API endpoint provides HTTP GET access to the global web UI configuration.</description>
    </item>
    
    <item>
      <title>enterprise/web/v1</title>
      <link>/sensu-go/latest/api/enterprise/webconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/api/enterprise/webconfig/</guid>
      <description>COMMERCIAL FEATURE: Access web UI configuration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Requests to enterprise/web/v1 API endpoints require you to authenticate with a Sensu API key or access token. The code examples in this document use the environment variable $SENSU_API_KEY to represent a valid API key in API requests.
Get the web UI configuration The /config API endpoint provides HTTP GET access to the global web UI configuration.</description>
    </item>
    
    <item>
      <title>Events API</title>
      <link>/sensu-enterprise-dashboard/latest/api/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/events/</guid>
      <description>The /events API endpoint /events (GET) The /events/:client/:check API endpoint /events/:client/:check (DELETE) The /events API endpoint The /events API endpoint provide HTTP GET access to the Sensu event registry.
/events (GET) EXAMPLES The following example demonstrates a /events API query which returns a JSON Array of JSON Hashes containing event data.
$ curl -s http://127.0.0.1:3000/events | jq . [ { &amp;#34;_id&amp;#34;: &amp;#34;us_west1/client-01/sensu_website&amp;#34;, &amp;#34;action&amp;#34;: &amp;#34;create&amp;#34;, &amp;#34;check&amp;#34;: { &amp;#34;total_state_change&amp;#34;: 14, &amp;#34;history&amp;#34;: [ &amp;#34;0&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;0&amp;#34;, &amp;#34;1&amp;#34; ], &amp;#34;status&amp;#34;: 1, &amp;#34;output&amp;#34;: &amp;#34;CheckHttp WARNING: 301\n&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;check-http.</description>
    </item>
    
    <item>
      <title>Graphite integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/graphite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/graphite/</guid>
      <description>The Sensu Graphite Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database Graphite so you can store, instrument, and visualize Sensu metrics data.
NOTE: The Sensu Graphite Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to Graphite format: extract and transform the metrics you collect from different sources in formats like Influx, Nagios, and OpenTSDB and populate them into Graphite.</description>
    </item>
    
    <item>
      <title>Graphite integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/graphite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/graphite/</guid>
      <description>The Sensu Graphite Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database Graphite so you can store, instrument, and visualize Sensu metrics data.
NOTE: The Sensu Graphite Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to Graphite format: extract and transform the metrics you collect from different sources in formats like Influx, Nagios, and OpenTSDB and populate them into Graphite.</description>
    </item>
    
    <item>
      <title>Graphite integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/graphite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/graphite/</guid>
      <description>The Sensu Graphite Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database Graphite so you can store, instrument, and visualize Sensu metrics data.
NOTE: The Sensu Graphite Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to Graphite format: extract and transform the metrics you collect from different sources in formats like Influx, Nagios, and OpenTSDB and populate them into Graphite.</description>
    </item>
    
    <item>
      <title>Graphite integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/graphite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/graphite/</guid>
      <description>The Sensu Graphite Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database Graphite so you can store, instrument, and visualize Sensu metrics data.
NOTE: The Sensu Graphite Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to Graphite format: extract and transform the metrics you collect from different sources in formats like Influx, Nagios, and OpenTSDB and populate them into Graphite.</description>
    </item>
    
    <item>
      <title>Health API</title>
      <link>/sensu-enterprise-dashboard/latest/api/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/health/</guid>
      <description>Reference documentation The /health API endpoint /health (GET) The /health API endpoint The /health API provides HTTP GET access to the health of a Sensu Enterprise installation.
/health (GET) EXAMPLE The following example demonstrates a request to the /health API, resulting in a JSON Hash indicating the health of Sensu Enterprise.
$ curl -s http://127.0.0.1:3000/health | jq . { &amp;#34;sensu&amp;#34;: { &amp;#34;sensu-1&amp;#34;: { &amp;#34;output&amp;#34;: &amp;#34;ok&amp;#34;, &amp;#34;status&amp;#34;: 0 } }, &amp;#34;uchiwa&amp;#34;: &amp;#34;ok&amp;#34; } API Specification /health (GET) description Returns Sensu Enterprise health information.</description>
    </item>
    
    <item>
      <title>InfluxDB integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/influxdb/</guid>
      <description>The Sensu InfluxDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database InfluxDB so you can store, instrument, and visualize Sensu metrics data. You can also use the Sensu InfluxDB Handler integration to create metrics from Sensu status check results for long-term storage in InfluxDB.
NOTE: The Sensu InfluxDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.</description>
    </item>
    
    <item>
      <title>InfluxDB integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/influxdb/</guid>
      <description>The Sensu InfluxDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database InfluxDB so you can store, instrument, and visualize Sensu metrics data. You can also use the Sensu InfluxDB Handler integration to create metrics from Sensu status check results for long-term storage in InfluxDB.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>InfluxDB integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/influxdb/</guid>
      <description>The Sensu InfluxDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database InfluxDB so you can store, instrument, and visualize Sensu metrics data. You can also use the Sensu InfluxDB Handler integration to create metrics from Sensu status check results for long-term storage in InfluxDB.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>InfluxDB integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/influxdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/influxdb/</guid>
      <description>The Sensu InfluxDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database InfluxDB so you can store, instrument, and visualize Sensu metrics data. You can also use the Sensu InfluxDB Handler integration to create metrics from Sensu status check results for long-term storage in InfluxDB.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Jira integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/jira/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Jira Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Jira Handler plugin is a Sensu handler that creates and updates Jira issues based on observation data from Sensu events.
NOTE: The Sensu Jira Handler plugin is an example of Sensu&amp;rsquo;s alerting and incident management integrations. To find more integrations, search Bonsai, the Sensu asset hub.</description>
    </item>
    
    <item>
      <title>Jira integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/jira/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Jira Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Jira Handler plugin is a Sensu handler that creates and updates Jira issues based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Jira integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/jira/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Jira Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Jira Handler plugin is a Sensu handler that creates and updates Jira issues based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Jira integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/jira/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Jira Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Jira Handler plugin is a Sensu handler that creates and updates Jira issues based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Legacy Documentation</title>
      <link>/sensu-enterprise-dashboard/legacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/legacy/</guid>
      <description>You&amp;rsquo;ve requested docs for a legacy version of Sensu Enterprise Dashboard. Documentation covering Sensu Enterprise Dashboard versions up to 2.8 is no longer being hosted on the Sensu website.
If you are intentionally seeking documentation for a legacy version, please visit the sensu-docs project on GitHub.
Otherwise, please click here for the latest Sensu Enterprise Dashboard documentation.</description>
    </item>
    
    <item>
      <title>Legacy Documentation</title>
      <link>/sensu-enterprise/legacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise/legacy/</guid>
      <description>You&amp;rsquo;ve requested docs for a legacy version of Sensu Enterprise. Documentation covering Sensu Enterprise versions up to 2.5 is no longer being hosted on the Sensu website.
If you are intentionally seeking documentation for a legacy version, please visit the sensu-docs project on GitHub.
Otherwise, please click here for the latest Sensu Enterprise documentation.</description>
    </item>
    
    <item>
      <title>OpenTSDB integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/opentsdb/</guid>
      <description>The Sensu OpenTSDB Handler plugin is a Sensu handler that sends Sensu metrics to an OpenTSDB server via its Telnet-style API. This allows you to extract, tag, and store Sensu metrics data in an OpenTSDB database.
NOTE: The Sensu OpenTSDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to OpenTSDB format: extract and transform the metrics you collect from different sources in formats like Graphite, Influx, and Nagios and populate them into OpenTSDB.</description>
    </item>
    
    <item>
      <title>OpenTSDB integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/opentsdb/</guid>
      <description>The Sensu OpenTSDB Handler plugin is a Sensu handler that sends Sensu metrics to an OpenTSDB server via its Telnet-style API. This allows you to extract, tag, and store Sensu metrics data in an OpenTSDB database.
NOTE: The Sensu OpenTSDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to OpenTSDB format: extract and transform the metrics you collect from different sources in formats like Graphite, Influx, and Nagios and populate them into OpenTSDB.</description>
    </item>
    
    <item>
      <title>OpenTSDB integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/opentsdb/</guid>
      <description>The Sensu OpenTSDB Handler plugin is a Sensu handler that sends Sensu metrics to an OpenTSDB server via its Telnet-style API. This allows you to extract, tag, and store Sensu metrics data in an OpenTSDB database.
NOTE: The Sensu OpenTSDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to OpenTSDB format: extract and transform the metrics you collect from different sources in formats like Graphite, Influx, and Nagios and populate them into OpenTSDB.</description>
    </item>
    
    <item>
      <title>OpenTSDB integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/opentsdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/opentsdb/</guid>
      <description>The Sensu OpenTSDB Handler plugin is a Sensu handler that sends Sensu metrics to an OpenTSDB server via its Telnet-style API. This allows you to extract, tag, and store Sensu metrics data in an OpenTSDB database.
NOTE: The Sensu OpenTSDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to OpenTSDB format: extract and transform the metrics you collect from different sources in formats like Graphite, Influx, and Nagios and populate them into OpenTSDB.</description>
    </item>
    
    <item>
      <title>PagerDuty integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/pagerduty/</guid>
      <description>The Sensu PagerDuty Handler plugin is a Sensu handler that manages PagerDuty incidents and operator alerts. With this handler, Sensu can trigger and resolve PagerDuty incidents according to the PagerDuty schedules, notifications, and escalation, response, and orchestration workflows you already have configured.
NOTE: The Sensu PagerDuty Handler plugin is an example of Sensu&amp;rsquo;s alerting and incident management integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Optional severity mapping: match Sensu check statuses with PagerDuty incident severities via a JSON document.</description>
    </item>
    
    <item>
      <title>PagerDuty integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/pagerduty/</guid>
      <description>The Sensu PagerDuty Handler plugin is a Sensu handler that manages PagerDuty incidents and operator alerts. With this handler, Sensu can trigger and resolve PagerDuty incidents according to the PagerDuty schedules, notifications, and escalation, response, and orchestration workflows you already have configured.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>PagerDuty integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/pagerduty/</guid>
      <description>The Sensu PagerDuty Handler plugin is a Sensu handler that manages PagerDuty incidents and operator alerts. With this handler, Sensu can trigger and resolve PagerDuty incidents according to the PagerDuty schedules, notifications, and escalation, response, and orchestration workflows you already have configured.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>PagerDuty integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/pagerduty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/pagerduty/</guid>
      <description>The Sensu PagerDuty Handler plugin is a Sensu handler that manages PagerDuty incidents and operator alerts. With this handler, Sensu can trigger and resolve PagerDuty incidents according to the PagerDuty schedules, notifications, and escalation, response, and orchestration workflows you already have configured.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Prometheus integrations</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/prometheus/</guid>
      <description>Sensu has two Prometheus plugins: the Prometheus Collector and the Prometheus Pushgateway Handler. Both help you get Sensu observability data into Prometheus.
NOTE: The Sensu Prometheus plugins are examples of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Sensu Prometheus Collector The Sensu Prometheus Collector plugin is a Sensu check that collects metrics from a Prometheus exporter or the Prometheus query API and outputs the metrics to stdout in Influx, Graphite, or JSON format.</description>
    </item>
    
    <item>
      <title>Prometheus integrations</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/prometheus/</guid>
      <description>Sensu has two Prometheus plugins: the Prometheus Collector and the Prometheus Pushgateway Handler. Both help you get Sensu observability data into Prometheus.
NOTE: The Sensu Prometheus plugins are examples of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Sensu Prometheus Collector The Sensu Prometheus Collector plugin is a Sensu check that collects metrics from a Prometheus exporter or the Prometheus query API and outputs the metrics to stdout in Influx, Graphite, or JSON format.</description>
    </item>
    
    <item>
      <title>Prometheus integrations</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/prometheus/</guid>
      <description>Sensu has two Prometheus plugins: the Prometheus Collector and the Prometheus Pushgateway Handler. Both help you get Sensu observability data into Prometheus.
NOTE: The Sensu Prometheus plugins are examples of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Sensu Prometheus Collector The Sensu Prometheus Collector plugin is a Sensu check that collects metrics from a Prometheus exporter or the Prometheus query API and outputs the metrics to stdout in Influx, Graphite, or JSON format.</description>
    </item>
    
    <item>
      <title>Prometheus integrations</title>
      <link>/sensu-go/latest/plugins/featured-integrations/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/prometheus/</guid>
      <description>Sensu has two Prometheus plugins: the Prometheus Collector and the Prometheus Pushgateway Handler. Both help you get Sensu observability data into Prometheus.
NOTE: The Sensu Prometheus plugins are examples of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Sensu Prometheus Collector The Sensu Prometheus Collector plugin is a Sensu check that collects metrics from a Prometheus exporter or the Prometheus query API and outputs the metrics to stdout in Influx, Graphite, or JSON format.</description>
    </item>
    
    <item>
      <title>Puppet integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/puppet/</guid>
      <description>The Sensu Puppet Keepalive Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Puppet node no longer exists or is deregistered.
NOTE: The Sensu Puppet Keepalive Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Puppet node names. Keep sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Puppet integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/puppet/</guid>
      <description>The Sensu Puppet Keepalive Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Puppet node no longer exists or is deregistered.
NOTE: The Sensu Puppet Keepalive Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Puppet node names. Keep sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Puppet integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/puppet/</guid>
      <description>The Sensu Puppet Keepalive Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Puppet node no longer exists or is deregistered.
NOTE: The Sensu Puppet Keepalive Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Puppet node names. Keep sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Puppet integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/puppet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/puppet/</guid>
      <description>The Sensu Puppet Keepalive Handler plugin is a Sensu handler that deletes a Sensu entity with a failing keepalive check when the entity&amp;rsquo;s corresponding Puppet node no longer exists or is deregistered.
NOTE: The Sensu Puppet Keepalive Handler plugin is an example of Sensu&amp;rsquo;s deregistration integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use Sensu annotations to override Sensu entity names with corresponding Puppet node names. Keep sensitive API authentication information secure with Sensu environment variables and secrets management.</description>
    </item>
    
    <item>
      <title>Results API</title>
      <link>/sensu-enterprise-dashboard/latest/api/results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/results/</guid>
      <description>The /results/:client/:check API endpoint /results/:client/:check (DELETE) The /results/:client/:check API endpoint The /results/:client/:check API endpoint provides HTTP DELETE access to check result data for a named client and check.
/results/:client/:check (DELETE) EXAMPLES The following example demonstrates a /results/:client/:check request to delete check result data for a client named client-01 and a check named sensu_website, resulting in a 202 (Accepted) HTTP response code indicating that the result was successful, but that no content is provided as output.</description>
    </item>
    
    <item>
      <title>Rundeck integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/rundeck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/rundeck/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Rundeck Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Rundeck Handler plugin is a Sensu handler that initiates Rundeck jobs for automated remediation based on Sensu event data.
NOTE: The Sensu Rundeck Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu Rundeck Handler plugin supports both Rundeck Enterprise and Rundeck Open Source and standard job invocation or webhook invocation.</description>
    </item>
    
    <item>
      <title>Rundeck integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/rundeck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/rundeck/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Rundeck Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Rundeck Handler plugin is a Sensu handler that initiates Rundeck jobs for automated remediation based on Sensu event data.
NOTE: The Sensu Rundeck Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu Rundeck Handler plugin supports both Rundeck Enterprise and Rundeck Open Source and standard job invocation or webhook invocation.</description>
    </item>
    
    <item>
      <title>Rundeck integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/rundeck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/rundeck/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Rundeck Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Rundeck Handler plugin is a Sensu handler that initiates Rundeck jobs for automated remediation based on Sensu event data.
NOTE: The Sensu Rundeck Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu Rundeck Handler plugin supports both Rundeck Enterprise and Rundeck Open Source and standard job invocation or webhook invocation.</description>
    </item>
    
    <item>
      <title>Rundeck integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/rundeck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/rundeck/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu Rundeck Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu Rundeck Handler plugin is a Sensu handler that initiates Rundeck jobs for automated remediation based on Sensu event data.
NOTE: The Sensu Rundeck Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu Rundeck Handler plugin supports both Rundeck Enterprise and Rundeck Open Source and standard job invocation or webhook invocation.</description>
    </item>
    
    <item>
      <title>SaltStack integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/saltstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/saltstack/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu SaltStack Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu SaltStack Handler plugin is a Sensu handler that launches SaltStack functions for automated remediation based on Sensu event data.
NOTE: The Sensu SaltStack Handler plugin is an example of Sensu&amp;rsquo;s auto-remediation integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features The Sensu SaltStack Handler plugin supports both SaltStack Enterprise and SaltStack Open Source as well as SaltStack functions such as service, state, saltutil, and grains (including arg and kwarg arguments).</description>
    </item>
    
    <item>
      <title>SaltStack integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/saltstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/saltstack/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu SaltStack Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu SaltStack Handler plugin is a Sensu handler that launches SaltStack functions for automated remediation based on Sensu event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>SaltStack integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/saltstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/saltstack/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu SaltStack Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu SaltStack Handler plugin is a Sensu handler that launches SaltStack functions for automated remediation based on Sensu event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>SaltStack integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/saltstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/saltstack/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu SaltStack Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu SaltStack Handler plugin is a Sensu handler that launches SaltStack functions for automated remediation based on Sensu event data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>ServiceNow integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/servicenow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/servicenow/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu ServiceNow Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu ServiceNow Handler plugin is a Sensu handler that creates and updates ServiceNow incidents and events based on observation data from Sensu events.
NOTE: The Sensu ServiceNow Handler plugin is an example of Sensu&amp;rsquo;s alerting and incident management integrations. To find more integrations, search Bonsai, the Sensu asset hub.</description>
    </item>
    
    <item>
      <title>ServiceNow integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/servicenow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/servicenow/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu ServiceNow Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu ServiceNow Handler plugin is a Sensu handler that creates and updates ServiceNow incidents and events based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>ServiceNow integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/servicenow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/servicenow/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu ServiceNow Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu ServiceNow Handler plugin is a Sensu handler that creates and updates ServiceNow incidents and events based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>ServiceNow integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/servicenow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/servicenow/</guid>
      <description>COMMERCIAL FEATURE: Access the Sensu ServiceNow Handler integration in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
The Sensu ServiceNow Handler plugin is a Sensu handler that creates and updates ServiceNow incidents and events based on observation data from Sensu events.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Silenced API</title>
      <link>/sensu-enterprise-dashboard/latest/api/silenced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/silenced/</guid>
      <description>The /silenced API endpoints /silenced (GET) /silenced (POST) /silenced/clear (POST) The /silenced API endpoints The Silenced API provides HTTP POST and GET access to create, query, and clear (delete) a silencing entry.
/silenced (GET) The /silenced endpoint provides HTTP GET access to silencing entry specifications.
EXAMPLES The following example demonstrates a /silenced API query which returns a JSON Array of JSON Hashes containing all silencing entry specifications.
$ curl -s -X GET http://127.</description>
    </item>
    
    <item>
      <title>Slack integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/slack/</guid>
      <description>The Sensu Slack Handler plugin is a Sensu handler that sends alerts based on your event data. With this handler, Sensu can trigger alerts to the Slack channels you specify based on event data generated by your Sensu checks.
NOTE: The Sensu Slack Handler plugin is an example of Sensu&amp;rsquo;s alerting and incident management integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Use event-based templating to include observation data from event attributes in your alerts to add meaningful, actionable context.</description>
    </item>
    
    <item>
      <title>Slack integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/slack/</guid>
      <description>The Sensu Slack Handler plugin is a Sensu handler that sends alerts based on your event data. With this handler, Sensu can trigger alerts to the Slack channels you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Slack integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/slack/</guid>
      <description>The Sensu Slack Handler plugin is a Sensu handler that sends alerts based on your event data. With this handler, Sensu can trigger alerts to the Slack channels you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Slack integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/slack/</guid>
      <description>The Sensu Slack Handler plugin is a Sensu handler that sends alerts based on your event data. With this handler, Sensu can trigger alerts to the Slack channels you specify based on event data generated by your Sensu checks.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Stashes API</title>
      <link>/sensu-enterprise-dashboard/latest/api/stashes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/stashes/</guid>
      <description>The /stashes API endpoints /stashes (GET) /stashes (POST) The /stashes/:path API endpoint /stashes/:path (DELETE) The /stashes API endpoints The /stashes API endpoint provides HTTP GET and HTTP POST access to Sensu stash data via the Sensu key/value store.
/stashes (GET) EXAMPLES The following example demonstrates a /stashes query, which results in a JSON Array of JSON Hashes containing stash data.
$ curl -s http://127.0.0.1:3000/stashes | jq . [ { &amp;#34;_id&amp;#34;: &amp;#34;us_west1/silence/i-424242/chef_client_process&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;silence/i-424242/chef_client_process&amp;#34;, &amp;#34;content&amp;#34;: { &amp;#34;timestamp&amp;#34;: 1383441836 }, &amp;#34;expire&amp;#34;: 3600 }, { &amp;#34;_id&amp;#34;: &amp;#34;us_east1/application/storefront&amp;#34;, &amp;#34;dc&amp;#34;: &amp;#34;us_east1&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;application/storefront&amp;#34;, &amp;#34;content&amp;#34;: { &amp;#34;timestamp&amp;#34;: 1381350802, &amp;#34;endpoints&amp;#34;: [ &amp;#34;https://hostname/store&amp;#34; ] }, &amp;#34;expire&amp;#34;: -1 } ] API specification /stashes (GET) description Returns a list of stashes by path and datacenter (dc).</description>
    </item>
    
    <item>
      <title>Subscriptions API</title>
      <link>/sensu-enterprise-dashboard/latest/api/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-enterprise-dashboard/latest/api/subscriptions/</guid>
      <description>The /subscriptions API endpoint /subscriptions (GET) The /subscriptions API endpoint The /subscriptions API endpoint provides HTTP GET access to subscription data.
/subscriptions (GET) EXAMPLE The following example demonstrates a request to the /subscriptions API, resulting in a JSON Array of JSON Hashes containing subscription definitions.
$ curl -s http://127.0.0.1:3000/subscriptions | jq . [ { &amp;#34;dc&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;web_server&amp;#34; }, { &amp;#34;dc&amp;#34;: &amp;#34;us_west1&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;database&amp;#34; } ] API Specification /subscriptions (GET) description Returns a list of subscriptions by name and datacenter (dc).</description>
    </item>
    
    <item>
      <title>Sumo Logic integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/sumologic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/sumologic/</guid>
      <description>The Sensu Sumo Logic Handler plugin is a Sensu handler that sends Sensu observability events and metrics to a Sumo Logic HTTP Logs and Metrics Source. This handler sends Sensu events as log entries, a set of metrics, or both, depending on the mode of operation you specify.
NOTE: The Sensu Sumo Logic Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.</description>
    </item>
    
    <item>
      <title>Sumo Logic integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/sumologic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/sumologic/</guid>
      <description>The Sensu Sumo Logic Handler plugin is a Sensu handler that sends Sensu observability events and metrics to a Sumo Logic HTTP Logs and Metrics Source. This handler sends Sensu events as log entries, a set of metrics, or both, depending on the mode of operation you specify.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Sumo Logic integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/sumologic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/sumologic/</guid>
      <description>The Sensu Sumo Logic Handler plugin is a Sensu handler that sends Sensu observability events and metrics to a Sumo Logic HTTP Logs and Metrics Source. This handler sends Sensu events as log entries, a set of metrics, or both, depending on the mode of operation you specify.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>Sumo Logic integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/sumologic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/sumologic/</guid>
      <description>The Sensu Sumo Logic Handler plugin is a Sensu handler that sends Sensu observability events and metrics to a Sumo Logic HTTP Logs and Metrics Source. This handler sends Sensu events as log entries, a set of metrics, or both, depending on the mode of operation you specify.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.</description>
    </item>
    
    <item>
      <title>This page covers documentation for legacy versions of Sensu, which are no longer hosted on the Sensu documentation site.</title>
      <link>/sensu-core/legacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-core/legacy/</guid>
      <description>You&amp;rsquo;ve requested docs for a legacy version of Sensu. Documentation covering Sensu versions up to 0.28 is no longer being hosted on the Sensu website.
If you are intentionally seeking documentation for a legacy version, please visit the sensu-docs project on GitHub.
Otherwise, please click here for the latest Sensu Core documentation.</description>
    </item>
    
    <item>
      <title>TimescaleDB integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/timescaledb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/timescaledb/</guid>
      <description>The Sensu TimescaleDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database TimescaleDB so you can store, instrument, and visualize Sensu metrics data.
NOTE: The Sensu TimescaleDB Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to TimescaleDB format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into TimescaleDB.</description>
    </item>
    
    <item>
      <title>TimescaleDB integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/timescaledb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/timescaledb/</guid>
      <description>The Sensu TimescaleDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database TimescaleDB so you can store, instrument, and visualize Sensu metrics data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to TimescaleDB format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into TimescaleDB.</description>
    </item>
    
    <item>
      <title>TimescaleDB integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/timescaledb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/timescaledb/</guid>
      <description>The Sensu TimescaleDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database TimescaleDB so you can store, instrument, and visualize Sensu metrics data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to TimescaleDB format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into TimescaleDB.</description>
    </item>
    
    <item>
      <title>TimescaleDB integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/timescaledb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/timescaledb/</guid>
      <description>The Sensu TimescaleDB Handler plugin is a Sensu handler that sends Sensu metrics to the time-series database TimescaleDB so you can store, instrument, and visualize Sensu metrics data.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to TimescaleDB format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into TimescaleDB.</description>
    </item>
    
    <item>
      <title>Wavefront integration</title>
      <link>/sensu-go/6.6/plugins/featured-integrations/wavefront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.6/plugins/featured-integrations/wavefront/</guid>
      <description>The Sensu Wavefront Handler plugin is a Sensu handler that sends Sensu metrics to Wavefront via a proxy, which allows you to store, instrument, and visualize Sensu metrics data in an Wavefront database.
NOTE: The Sensu Wavefront Handler plugin is an example of Sensu&amp;rsquo;s time-series and long-term event storage integrations. To find more integrations, search Bonsai, the Sensu asset hub.
Features Transform metrics to Wavefront format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into Wavefront.</description>
    </item>
    
    <item>
      <title>Wavefront integration</title>
      <link>/sensu-go/6.7/plugins/featured-integrations/wavefront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/plugins/featured-integrations/wavefront/</guid>
      <description>The Sensu Wavefront Handler plugin is a Sensu handler that sends Sensu metrics to Wavefront via a proxy, which allows you to store, instrument, and visualize Sensu metrics data in an Wavefront database.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to Wavefront format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into Wavefront.</description>
    </item>
    
    <item>
      <title>Wavefront integration</title>
      <link>/sensu-go/6.8/plugins/featured-integrations/wavefront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.8/plugins/featured-integrations/wavefront/</guid>
      <description>The Sensu Wavefront Handler plugin is a Sensu handler that sends Sensu metrics to Wavefront via a proxy, which allows you to store, instrument, and visualize Sensu metrics data in an Wavefront database.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to Wavefront format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into Wavefront.</description>
    </item>
    
    <item>
      <title>Wavefront integration</title>
      <link>/sensu-go/latest/plugins/featured-integrations/wavefront/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/latest/plugins/featured-integrations/wavefront/</guid>
      <description>The Sensu Wavefront Handler plugin is a Sensu handler that sends Sensu metrics to Wavefront via a proxy, which allows you to store, instrument, and visualize Sensu metrics data in an Wavefront database.
PRO TIP: Use the Sensu Catalog to enable this integration directly from your browser. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Features Transform metrics to Wavefront format: extract and transform the metrics you collect from different sources in formats like Graphite, OpenTSDB, Nagios, and Influx and populate them into Wavefront.</description>
    </item>
    
  </channel>
</rss>
