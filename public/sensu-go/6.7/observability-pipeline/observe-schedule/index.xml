<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Schedule observability data collection on Sensu Docs</title>
    <link>/sensu-go/6.7/observability-pipeline/observe-schedule/</link>
    <description>Recent content in Schedule observability data collection on Sensu Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/sensu-go/6.7/observability-pipeline/observe-schedule/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Agent reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/agent/</guid>
      <description>Example Sensu agent configuration file (download)
The Sensu agent is a lightweight client that runs on the infrastructure components you want to monitor. Agents register with the Sensu backend as entities with type: &amp;quot;agent&amp;quot;. Agent entities are responsible for creating check and metrics events to send to the backend event pipeline.
The Sensu agent is available for Linux, macOS, and Windows. For Windows operating systems, the Sensu agent uses cmd.exe for the execution environment.</description>
    </item>
    
    <item>
      <title>Backend reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/backend/</guid>
      <description>Example Sensu backend configuration file (download)
The Sensu backend is a service that manages check requests and observability data. Every Sensu backend includes an integrated structure for scheduling checks using subscriptions, an event processing pipeline that applies event filters, mutators, handlers, and pipelines, an embedded etcd datastore for storing configuration and state, and the Sensu API, Sensu web UI, and sensuctl command line tool.
The Sensu backend is available for Debian- and RHEL-family distributions of Linux.</description>
    </item>
    
    <item>
      <title>Checks reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/checks/</guid>
      <description>Checks work with Sensu agents to produce observability events automatically. You can use checks to monitor server resources, services, and application health as well as collect and analyze metrics. Read Monitor server resources to get started. Use Bonsai, the Sensu asset hub, to discover, download, and share Sensu check dynamic runtime assets.
Check example (minimum recommended attributes) This example shows a check resource definition that includes the minimum recommended attributes.</description>
    </item>
    
    <item>
      <title>Hooks reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/hooks/</guid>
      <description>Hooks are reusable commands the agent executes in response to a check result before creating an observability event. You can create, manage, and reuse hooks independently of checks. Hooks enrich observability event context by gathering relevant information based on the exit status code of a check (ex: 1). Hook commands can also receive JSON serialized Sensu client data via stdin.
Hook example You can use hooks to automate data gathering for incident triage.</description>
    </item>
    
    <item>
      <title>Metrics reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/metrics/</guid>
      <description>Sensu Go offers built-in support for collecting and processing service and time-series metrics for your entire infrastructure.
In Sensu, metrics are an optional component of observation data in events. Sensu events may contain check execution results, metrics, or both. Certain inputs like the Sensu StatsD listener or patterns like the Prometheus collector pattern will create metrics-only events. Events can also include metrics from check output metric extraction.
Use Sensu handlers to process extracted metrics and route them to databases like Elasticsearch, InfluxDB, Grafana, and Graphite.</description>
    </item>
    
    <item>
      <title>Rule templates reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/rule-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/rule-templates/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including rule templates, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Rule templates are the resources that Sensu applies to service components for business service monitoring (BSM). A rule template applies to selections of events defined by a service component&amp;rsquo;s query. This selection of events is the rule&amp;rsquo;s input.</description>
    </item>
    
    <item>
      <title>Service components reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/service-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/service-components/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM), including service components, in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Service components are resources for defining and managing elements of a business service in business service monitoring. A service entity consists of a number of underlying service components. A service component is a meaningful selection of Sensu events for a business service, such as database monitoring events.</description>
    </item>
    
    <item>
      <title>Subscriptions reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/subscriptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/subscriptions/</guid>
      <description>Sensu uses the publish/subscribe model of communication. The publish/subscribe model is powerful in ephemeral or elastic infrastructures, where the names and numbers of things change over time.
Because Sensu uses the publish/subscribe model, you can write checks even if you don&amp;rsquo;t know the specific names of the entities that should run the checks. Likewise, your entities do not need to know the specific names of the checks they should execute. The Sensu backend coordinates check execution for you by comparing the subscriptions you specify in your checks and entities to determine which entities should receive execution requests for a given check.</description>
    </item>
    
    <item>
      <title>Tokens reference</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/tokens/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/tokens/</guid>
      <description>Tokens are placeholders in a check definition that the agent replaces with entity information before executing the check. You can use tokens to fine-tune check attributes (like alert thresholds) on a per-entity level while reusing the check definition.
When a check is scheduled to be executed by an agent, it first goes through a token substitution step. The agent replaces any tokens with matching attributes from the entity definition, and then the check is executed.</description>
    </item>
    
    <item>
      <title>Business service monitoring SDK</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring-sdk/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) feature uses a dedicated SDK of JavaScript-based expressions that provide additional functionality. Use the BSM SDK to create custom JavaScript expressions with complex logic.
BSM SDK expressions are defined in rule templates, so they act in the context of determining whether aggregate data derived from a service componentâ€™s selection of Sensu Go events should trigger a rule-based event.</description>
    </item>
    
    <item>
      <title>Augment event data with check hooks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/augment-event-data-with-hooks/</guid>
      <description>Check hooks are commands the Sensu agent runs in response to the result of check execution. The Sensu agent executes the appropriate configured hook command based on the exit status code of the check (for example, 1).
Check hooks allow you to automate data collection that operators would routinely perform to investigate observability alerts, which frees up precious operator time. Although you can use check hooks for rudimentary auto-remediation tasks, they are intended to enrich observability event data.</description>
    </item>
    
    <item>
      <title>Collect Prometheus metrics with Sensu</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/prometheus-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/prometheus-metrics/</guid>
      <description>The Prometheus ecosystem contains a number of actively maintained exporters, such as the node exporter for reporting hardware and operating system metrics or Google&amp;rsquo;s cAdvisor exporter for monitoring containers. These exporters expose metrics that Sensu can collect and route to one or more time-series databases. Sensu and Prometheus can run in parallel, complementing each other and making use of environments where Prometheus is already deployed.
You can use the sensu/sensu-prometheus-collector dynamic runtime asset to create checks that collect metrics from a Prometheus exporter or the Prometheus query API.</description>
    </item>
    
    <item>
      <title>Collect service metrics with Sensu checks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/collect-metrics-with-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/collect-metrics-with-checks/</guid>
      <description>PRO TIP: You can use the HTTP Service Monitoring (Local) integration in the Sensu Catalog to collect service metrics instead of following this guide. Follow the Catalog prompts to configure the Sensu resources you need and start processing your observability data with a few clicks.
Sensu checks are commands (or scripts) that the Sensu agent executes that output data and produce an exit code to indicate a state. If you are unfamiliar with checks, read the checks reference for details and examples.</description>
    </item>
    
    <item>
      <title>Monitor Business Services</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/business-service-monitoring/</guid>
      <description>COMMERCIAL FEATURE: Access business service monitoring (BSM) in the packaged Sensu Go distribution. For more information, read Get started with commercial features.
NOTE: Business service monitoring (BSM) is in public preview and is subject to change.
Sensu&amp;rsquo;s business service monitoring (BSM) provides high-level visibility into the current health of any number of your business services. Use BSM to monitor every component in your system with a top-down approach that produces meaningful alerts, prevents alert fatigue, and helps you focus on your core business services.</description>
    </item>
    
    <item>
      <title>Monitor server resources with checks</title>
      <link>/sensu-go/6.7/observability-pipeline/observe-schedule/monitor-server-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sensu-go/6.7/observability-pipeline/observe-schedule/monitor-server-resources/</guid>
      <description>Sensu checks are commands or scripts the Sensu agent executes that output data and produce an exit code to indicate a state.
You can use checks to monitor server resources, services, and application health, such as remaining disk space and whether NGINX is running. This guide includes two check examples to help you monitor server resources: specifically, CPU usage and NGINX status.
Requirements To follow this guide, install the Sensu backend, make sure at least one Sensu agent is running, and configure sensuctl to connect to the backend as the admin user.</description>
    </item>
    
  </channel>
</rss>
